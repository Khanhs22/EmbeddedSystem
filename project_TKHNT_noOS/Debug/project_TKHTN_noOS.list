
project_TKHTN_noOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009964  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  08009a78  08009a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a194  0800a194  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800a194  0800a194  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a194  0800a194  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800a19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000230  0800a3cc  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800a3cc  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1c1  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002558  00000000  00000000  0002d41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  000307c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190ab  00000000  00000000  00031500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4a6  00000000  00000000  0004a5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c579  00000000  00000000  00059a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f4  00000000  00000000  000e601c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a5c 	.word	0x08009a5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08009a5c 	.word	0x08009a5c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <DWT_Delay_Init+0x58>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <DWT_Delay_Init+0x58>)
 80011ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011ee:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <DWT_Delay_Init+0x58>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4a10      	ldr	r2, [pc, #64]	; (8001238 <DWT_Delay_Init+0x58>)
 80011f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011fa:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <DWT_Delay_Init+0x5c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <DWT_Delay_Init+0x5c>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <DWT_Delay_Init+0x5c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <DWT_Delay_Init+0x5c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <DWT_Delay_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800121a:	bf00      	nop
     __ASM volatile ("NOP");
 800121c:	bf00      	nop
  __ASM volatile ("NOP");
 800121e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <DWT_Delay_Init+0x5c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001228:	2300      	movs	r3, #0
 800122a:	e000      	b.n	800122e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800122c:	2301      	movs	r3, #1
  }
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000edf0 	.word	0xe000edf0
 800123c:	e0001000 	.word	0xe0001000

08001240 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <delay+0x40>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800124e:	f002 fcfb 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <delay+0x44>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001264:	bf00      	nop
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <delay+0x40>)
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3f8      	bcc.n	8001266 <delay+0x26>
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e0001000 	.word	0xe0001000
 8001284:	431bde83 	.word	0x431bde83

08001288 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2302      	movs	r3, #2
 80012ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 ff31 	bl	800311c <HAL_GPIO_Init>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 ff14 	bl	800311c <HAL_GPIO_Init>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DHT_Start>:


void DHT_Start (void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001300:	f7ff ff6e 	bl	80011e0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001304:	2101      	movs	r1, #1
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <DHT_Start+0x40>)
 8001308:	f7ff ffbe 	bl	8001288 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <DHT_Start+0x40>)
 8001312:	f002 f89e 	bl	8003452 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001316:	f244 6050 	movw	r0, #18000	; 0x4650
 800131a:	f7ff ff91 	bl	8001240 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800131e:	2201      	movs	r2, #1
 8001320:	2101      	movs	r1, #1
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <DHT_Start+0x40>)
 8001324:	f002 f895 	bl	8003452 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001328:	2014      	movs	r0, #20
 800132a:	f7ff ff89 	bl	8001240 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800132e:	2101      	movs	r1, #1
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DHT_Start+0x40>)
 8001332:	f7ff ffc6 	bl	80012c2 <Set_Pin_Input>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010800 	.word	0x40010800

08001340 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800134a:	2028      	movs	r0, #40	; 0x28
 800134c:	f7ff ff78 	bl	8001240 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001350:	2101      	movs	r1, #1
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <DHT_Check_Response+0x58>)
 8001354:	f002 f866 	bl	8003424 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <DHT_Check_Response+0x3c>
	{
		delay (90);
 800135e:	205a      	movs	r0, #90	; 0x5a
 8001360:	f7ff ff6e 	bl	8001240 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001364:	2101      	movs	r1, #1
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <DHT_Check_Response+0x58>)
 8001368:	f002 f85c 	bl	8003424 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <DHT_Check_Response+0x38>
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e001      	b.n	800137c <DHT_Check_Response+0x3c>
		else Response = -1;
 8001378:	23ff      	movs	r3, #255	; 0xff
 800137a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800137c:	bf00      	nop
 800137e:	2101      	movs	r1, #1
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <DHT_Check_Response+0x58>)
 8001382:	f002 f84f 	bl	8003424 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f8      	bne.n	800137e <DHT_Check_Response+0x3e>

	return Response;
 800138c:	79fb      	ldrb	r3, [r7, #7]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010800 	.word	0x40010800

0800139c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	71bb      	strb	r3, [r7, #6]
 80013a6:	e037      	b.n	8001418 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80013a8:	bf00      	nop
 80013aa:	2101      	movs	r1, #1
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <DHT_Read+0x8c>)
 80013ae:	f002 f839 	bl	8003424 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f8      	beq.n	80013aa <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f7ff ff41 	bl	8001240 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80013be:	2101      	movs	r1, #1
 80013c0:	4819      	ldr	r0, [pc, #100]	; (8001428 <DHT_Read+0x8c>)
 80013c2:	f002 f82f 	bl	8003424 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10e      	bne.n	80013ea <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2201      	movs	r2, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	4013      	ands	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	e00b      	b.n	8001402 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	f1c3 0307 	rsb	r3, r3, #7
 80013f0:	2201      	movs	r2, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001402:	bf00      	nop
 8001404:	2101      	movs	r1, #1
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <DHT_Read+0x8c>)
 8001408:	f002 f80c 	bl	8003424 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f8      	bne.n	8001404 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	3301      	adds	r3, #1
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d9c4      	bls.n	80013a8 <DHT_Read+0xc>
	}
	return i;
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40010800 	.word	0x40010800

0800142c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001434:	f7ff ff62 	bl	80012fc <DHT_Start>
	Presence = DHT_Check_Response ();
 8001438:	f7ff ff82 	bl	8001340 <DHT_Check_Response>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <DHT_GetData+0xdc>)
 8001442:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001444:	f7ff ffaa 	bl	800139c <DHT_Read>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <DHT_GetData+0xe0>)
 800144e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001450:	f7ff ffa4 	bl	800139c <DHT_Read>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <DHT_GetData+0xe4>)
 800145a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800145c:	f7ff ff9e 	bl	800139c <DHT_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <DHT_GetData+0xe8>)
 8001466:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001468:	f7ff ff98 	bl	800139c <DHT_Read>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <DHT_GetData+0xec>)
 8001472:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001474:	f7ff ff92 	bl	800139c <DHT_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <DHT_GetData+0xf0>)
 800147e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <DHT_GetData+0xf0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <DHT_GetData+0xe0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <DHT_GetData+0xe4>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4413      	add	r3, r2
 8001492:	4a20      	ldr	r2, [pc, #128]	; (8001514 <DHT_GetData+0xe8>)
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <DHT_GetData+0xec>)
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	4413      	add	r3, r2
 800149e:	4299      	cmp	r1, r3
 80014a0:	d12d      	bne.n	80014fe <DHT_GetData+0xd2>
	{
		#if defined(TYPE_DHT11)
//			DHT_Data->Temperature = (float) Temp_byte1;
//			DHT_Data->Humidity = (float) Rh_byte1;
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <DHT_GetData+0xe8>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <DHT_GetData+0xec>)
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc1e 	bl	8000cf0 <__aeabi_i2f>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <DHT_GetData+0xe0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	4a13      	ldr	r2, [pc, #76]	; (8001510 <DHT_GetData+0xe4>)
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc12 	bl	8000cf0 <__aeabi_i2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
			DHT_Data->Temperature = (float)DHT_Data->Temperature/256;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd10 	bl	8000f00 <__aeabi_fdiv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = (float)DHT_Data->Humidity/256;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fd05 	bl	8000f00 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	605a      	str	r2, [r3, #4]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
			DHT_Data->Temperature = (float)(DHT_Data->Temperature/10.0);
			DHT_Data->Humidity = (float)(DHT_Data->Humidity/10.0);
		#endif
	}
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000252 	.word	0x20000252
 800150c:	2000024c 	.word	0x2000024c
 8001510:	2000024d 	.word	0x2000024d
 8001514:	2000024e 	.word	0x2000024e
 8001518:	2000024f 	.word	0x2000024f
 800151c:	20000250 	.word	0x20000250

08001520 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f002 fc2d 	bl	8003d88 <HAL_TIM_Base_Start>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 800154a:	bf00      	nop
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3f9      	bcc.n	800154c <DELAY_TIM_Us+0x16>
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <DELAY_TIM_Ms>:
void DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t Time)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
	while(Time--)
 8001578:	e006      	b.n	8001588 <DELAY_TIM_Ms+0x24>
	{
		while(__HAL_TIM_GET_COUNTER(htim)<1000){}
 800157a:	bf00      	nop
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001586:	d3f9      	bcc.n	800157c <DELAY_TIM_Ms+0x18>
	while(Time--)
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	807a      	strh	r2, [r7, #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f3      	bne.n	800157a <DELAY_TIM_Ms+0x16>
	}
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffb8 	bl	8001520 <DELAY_TIM_Init>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	887a      	ldrh	r2, [r7, #2]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ffb2 	bl	8001536 <DELAY_TIM_Us>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ffb8 	bl	8001564 <DELAY_TIM_Ms>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	889b      	ldrh	r3, [r3, #4]
 8001616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2302      	movs	r3, #2
 800161e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f107 0208 	add.w	r2, r7, #8
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fd76 	bl	800311c <HAL_GPIO_Init>
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	889b      	ldrh	r3, [r3, #4]
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fd58 	bl	800311c <HAL_GPIO_Init>
}
 800166c:	bf00      	nop
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6898      	ldr	r0, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	4619      	mov	r1, r3
 800168c:	f001 fee1 	bl	8003452 <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f001 feba 	bl	8003424 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff98 	bl	80015fc <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffd0 	bl	8001674 <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);
 80016d4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff6d 	bl	80015b8 <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffaa 	bl	8001638 <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80);
 80016e4:	2150      	movs	r1, #80	; 0x50
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff66 	bl	80015b8 <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ffd3 	bl	8001698 <DS18B20_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <DS18B20_Start+0x44>
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <DS18B20_Start+0x48>
	else Response = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8001702:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff56 	bl	80015b8 <DS18B20_DelayUs>

	return Response;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff6a 	bl	80015fc <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e02b      	b.n	8001786 <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	fa42 f303 	asr.w	r3, r2, r3
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d012      	beq.n	8001764 <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ff5c 	bl	80015fc <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8001744:	2100      	movs	r1, #0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff94 	bl	8001674 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 800174c:	2101      	movs	r1, #1
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff32 	bl	80015b8 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff6f 	bl	8001638 <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 800175a:	2132      	movs	r1, #50	; 0x32
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2b 	bl	80015b8 <DS18B20_DelayUs>
 8001762:	e00d      	b.n	8001780 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff49 	bl	80015fc <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 800176a:	2100      	movs	r1, #0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff81 	bl	8001674 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8001772:	2132      	movs	r1, #50	; 0x32
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff1f 	bl	80015b8 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff5c 	bl	8001638 <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b07      	cmp	r3, #7
 800178a:	ddd0      	ble.n	800172e <DS18B20_Write+0x18>
		}
	}
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff48 	bl	8001638 <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	e024      	b.n	80017f8 <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff24 	bl	80015fc <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff5c 	bl	8001674 <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 80017bc:	2101      	movs	r1, #1
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fefa 	bl	80015b8 <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff37 	bl	8001638 <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff64 	bl	8001698 <DS18B20_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 80017d6:	2201      	movs	r2, #1
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 80017ea:	2132      	movs	r1, #50	; 0x32
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fee3 	bl	80015b8 <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	ddd7      	ble.n	80017ae <DS18B20_Read+0x18>
	}
	return Value;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff feb8 	bl	800159e <DS18B20_DelayInit>
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	uint16_t Temp;
	DS18B20_Start(DS18B20);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff3b 	bl	80016ba <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8001844:	2101      	movs	r1, #1
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fec7 	bl	80015da <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 800184c:	21cc      	movs	r1, #204	; 0xcc
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff61 	bl	8001716 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 8001854:	2144      	movs	r1, #68	; 0x44
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff5d 	bl	8001716 <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 800185c:	21c8      	movs	r1, #200	; 0xc8
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff febb 	bl	80015da <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff28 	bl	80016ba <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 800186a:	2101      	movs	r1, #1
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff feb4 	bl	80015da <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001872:	21cc      	movs	r1, #204	; 0xcc
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff4e 	bl	8001716 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 800187a:	21be      	movs	r1, #190	; 0xbe
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff4a 	bl	8001716 <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff87 	bl	8001796 <DS18B20_Read>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff82 	bl	8001796 <DS18B20_Read>
 8001892:	4603      	mov	r3, r0
 8001894:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	81bb      	strh	r3, [r7, #12]
	DS18B20->Temp = (float)Temp/16;
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fa1d 	bl	8000ce8 <__aeabi_ui2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fb23 	bl	8000f00 <__aeabi_fdiv>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <getKey>:
//	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
}

*/
char getKey(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
	char key = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
	//initKeyPad();
	for(int i = 0; i < ROWS; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e060      	b.n	80019a2 <getKey+0xd2>
	{
		HAL_GPIO_WritePin(rowPort_array[i], rowPin_array[i], 0);
 80018e0:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <getKey+0xe4>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018e8:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <getKey+0xe8>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	f001 fdad 	bl	8003452 <HAL_GPIO_WritePin>
		for(int m = 0; m < COLUMNS; m++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e03f      	b.n	800197e <getKey+0xae>
		{
			if(HAL_GPIO_ReadPin(columnPort_array[m], columnPin_array[m]) == 0)
 80018fe:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <getKey+0xec>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001906:	492e      	ldr	r1, [pc, #184]	; (80019c0 <getKey+0xf0>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800190e:	4619      	mov	r1, r3
 8001910:	4610      	mov	r0, r2
 8001912:	f001 fd87 	bl	8003424 <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d12d      	bne.n	8001978 <getKey+0xa8>
			{
				HAL_Delay(10);
 800191c:	200a      	movs	r0, #10
 800191e:	f001 fa1b 	bl	8002d58 <HAL_Delay>
				if(HAL_GPIO_ReadPin(columnPort_array[m], columnPin_array[m]) == 0)
 8001922:	4a26      	ldr	r2, [pc, #152]	; (80019bc <getKey+0xec>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800192a:	4925      	ldr	r1, [pc, #148]	; (80019c0 <getKey+0xf0>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f001 fd75 	bl	8003424 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d11b      	bne.n	8001978 <getKey+0xa8>
				{
					key = keyPad[i][m];
 8001940:	4920      	ldr	r1, [pc, #128]	; (80019c4 <getKey+0xf4>)
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	18ca      	adds	r2, r1, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
					while(!HAL_GPIO_ReadPin(columnPort_array[m], columnPin_array[m])){};
 8001954:	bf00      	nop
 8001956:	4a19      	ldr	r2, [pc, #100]	; (80019bc <getKey+0xec>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800195e:	4918      	ldr	r1, [pc, #96]	; (80019c0 <getKey+0xf0>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f001 fd5b 	bl	8003424 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <getKey+0x86>
					return key;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	e018      	b.n	80019aa <getKey+0xda>
		for(int m = 0; m < COLUMNS; m++)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3301      	adds	r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b02      	cmp	r3, #2
 8001982:	ddbc      	ble.n	80018fe <getKey+0x2e>
				}
			}
		}
		HAL_GPIO_WritePin(rowPort_array[i], rowPin_array[i], 1);
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <getKey+0xe4>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <getKey+0xe8>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001994:	2201      	movs	r2, #1
 8001996:	4619      	mov	r1, r3
 8001998:	f001 fd5b 	bl	8003452 <HAL_GPIO_WritePin>
	for(int i = 0; i < ROWS; i++)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3301      	adds	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	dd9b      	ble.n	80018e0 <getKey+0x10>
	}
	return key;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000010 	.word	0x20000010
 80019bc:	20000018 	.word	0x20000018
 80019c0:	20000024 	.word	0x20000024
 80019c4:	2000002c 	.word	0x2000002c

080019c8 <display_digit>:
		0x80,
		0x90
};

void display_digit(uint8_t number)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(A_pin_GPIO_Port, A_pin_Pin, ((number>>0)&0x01));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e0:	4829      	ldr	r0, [pc, #164]	; (8001a88 <display_digit+0xc0>)
 80019e2:	f001 fd36 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_pin_GPIO_Port, B_pin_Pin, ((number>>1)&0x01));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	2108      	movs	r1, #8
 80019f6:	4825      	ldr	r0, [pc, #148]	; (8001a8c <display_digit+0xc4>)
 80019f8:	f001 fd2b 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_pin_GPIO_Port, C_pin_Pin, ((number>>2)&0x01));
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2140      	movs	r1, #64	; 0x40
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <display_digit+0xc4>)
 8001a0e:	f001 fd20 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_pin_GPIO_Port, D_pin_Pin, ((number>>3)&0x01));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <display_digit+0xc4>)
 8001a26:	f001 fd14 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_pin_GPIO_Port, E_pin_Pin, ((number>>4)&0x01));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <display_digit+0xc4>)
 8001a3e:	f001 fd08 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_pin_GPIO_Port, F_pin_Pin, ((number>>5)&0x01));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <display_digit+0xc0>)
 8001a56:	f001 fcfc 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_pin_GPIO_Port, G_pin_Pin, ((number>>6)&0x01));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	2120      	movs	r1, #32
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <display_digit+0xc4>)
 8001a6c:	f001 fcf1 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dot_pin_GPIO_Port, Dot_pin_Pin, ((number>>7)&0x01));
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	09db      	lsrs	r3, r3, #7
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	4804      	ldr	r0, [pc, #16]	; (8001a8c <display_digit+0xc4>)
 8001a7c:	f001 fce9 	bl	8003452 <HAL_GPIO_WritePin>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	40010c00 	.word	0x40010c00

08001a90 <display_float>:

void display_float(float temperature)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	int hundred_temp = (int)(temperature * 100);
 8001a98:	4957      	ldr	r1, [pc, #348]	; (8001bf8 <display_float+0x168>)
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff f97c 	bl	8000d98 <__aeabi_fmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fb3e 	bl	8001124 <__aeabi_f2iz>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

	digit1 = hundred_temp/1000;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a53      	ldr	r2, [pc, #332]	; (8001bfc <display_float+0x16c>)
 8001ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab4:	1192      	asrs	r2, r2, #6
 8001ab6:	17db      	asrs	r3, r3, #31
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <display_float+0x170>)
 8001abe:	701a      	strb	r2, [r3, #0]
	digit2 = ((hundred_temp/100)%10);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <display_float+0x174>)
 8001ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac8:	1152      	asrs	r2, r2, #5
 8001aca:	17db      	asrs	r3, r3, #31
 8001acc:	1ad2      	subs	r2, r2, r3
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <display_float+0x178>)
 8001ad0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ad4:	1099      	asrs	r1, r3, #2
 8001ad6:	17d3      	asrs	r3, r2, #31
 8001ad8:	1ac9      	subs	r1, r1, r3
 8001ada:	460b      	mov	r3, r1
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1ad1      	subs	r1, r2, r3
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <display_float+0x17c>)
 8001ae8:	701a      	strb	r2, [r3, #0]
	digit3 = ((hundred_temp/10)%10);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <display_float+0x178>)
 8001aee:	fb82 1203 	smull	r1, r2, r2, r3
 8001af2:	1092      	asrs	r2, r2, #2
 8001af4:	17db      	asrs	r3, r3, #31
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <display_float+0x178>)
 8001afa:	fb83 1302 	smull	r1, r3, r3, r2
 8001afe:	1099      	asrs	r1, r3, #2
 8001b00:	17d3      	asrs	r3, r2, #31
 8001b02:	1ac9      	subs	r1, r1, r3
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	1ad1      	subs	r1, r2, r3
 8001b0e:	b2ca      	uxtb	r2, r1
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <display_float+0x180>)
 8001b12:	701a      	strb	r2, [r3, #0]
	digit4 = (hundred_temp%10);
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <display_float+0x178>)
 8001b18:	fb83 1302 	smull	r1, r3, r3, r2
 8001b1c:	1099      	asrs	r1, r3, #2
 8001b1e:	17d3      	asrs	r3, r2, #31
 8001b20:	1ac9      	subs	r1, r1, r3
 8001b22:	460b      	mov	r3, r1
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	1ad1      	subs	r1, r2, r3
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <display_float+0x184>)
 8001b30:	701a      	strb	r2, [r3, #0]
	
	display_digit(numberOfSegment[digit1]);
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <display_float+0x170>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <display_float+0x188>)
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff43 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Digit1_pin_GPIO_Port, Digit1_pin_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b48:	4834      	ldr	r0, [pc, #208]	; (8001c1c <display_float+0x18c>)
 8001b4a:	f001 fc82 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f001 f902 	bl	8002d58 <HAL_Delay>
	HAL_GPIO_WritePin(Digit1_pin_GPIO_Port, Digit1_pin_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5a:	4830      	ldr	r0, [pc, #192]	; (8001c1c <display_float+0x18c>)
 8001b5c:	f001 fc79 	bl	8003452 <HAL_GPIO_WritePin>

	display_digit(numberOfSegment[digit2]);
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <display_float+0x17c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <display_float+0x188>)
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff2c 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Dot_pin_GPIO_Port, Dot_pin_Pin, GPIO_PIN_RESET);  //dot in 2nd section, move it if you want
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	482a      	ldr	r0, [pc, #168]	; (8001c20 <display_float+0x190>)
 8001b76:	f001 fc6c 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Digit2_pin_GPIO_Port, Digit2_pin_Pin, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b80:	4826      	ldr	r0, [pc, #152]	; (8001c1c <display_float+0x18c>)
 8001b82:	f001 fc66 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f001 f8e6 	bl	8002d58 <HAL_Delay>
	HAL_GPIO_WritePin(Digit2_pin_GPIO_Port, Digit2_pin_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b92:	4822      	ldr	r0, [pc, #136]	; (8001c1c <display_float+0x18c>)
 8001b94:	f001 fc5d 	bl	8003452 <HAL_GPIO_WritePin>

	display_digit(numberOfSegment[digit3]);
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <display_float+0x180>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <display_float+0x188>)
 8001ba0:	5c9b      	ldrb	r3, [r3, r2]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff10 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Digit3_pin_GPIO_Port, Digit3_pin_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	481b      	ldr	r0, [pc, #108]	; (8001c1c <display_float+0x18c>)
 8001bb0:	f001 fc4f 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f001 f8cf 	bl	8002d58 <HAL_Delay>
	HAL_GPIO_WritePin(Digit3_pin_GPIO_Port, Digit3_pin_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc0:	4816      	ldr	r0, [pc, #88]	; (8001c1c <display_float+0x18c>)
 8001bc2:	f001 fc46 	bl	8003452 <HAL_GPIO_WritePin>

	display_digit(numberOfSegment[digit4]);
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <display_float+0x184>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <display_float+0x188>)
 8001bce:	5c9b      	ldrb	r3, [r3, r2]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fef9 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Digit4_pin_GPIO_Port, Digit4_pin_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2110      	movs	r1, #16
 8001bda:	4811      	ldr	r0, [pc, #68]	; (8001c20 <display_float+0x190>)
 8001bdc:	f001 fc39 	bl	8003452 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f001 f8b9 	bl	8002d58 <HAL_Delay>
	HAL_GPIO_WritePin(Digit4_pin_GPIO_Port, Digit4_pin_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2110      	movs	r1, #16
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <display_float+0x190>)
 8001bec:	f001 fc31 	bl	8003452 <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	10624dd3 	.word	0x10624dd3
 8001c00:	20000253 	.word	0x20000253
 8001c04:	51eb851f 	.word	0x51eb851f
 8001c08:	66666667 	.word	0x66666667
 8001c0c:	20000254 	.word	0x20000254
 8001c10:	20000255 	.word	0x20000255
 8001c14:	20000256 	.word	0x20000256
 8001c18:	20000038 	.word	0x20000038
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40010c00 	.word	0x40010c00

08001c24 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c2c:	1d39      	adds	r1, r7, #4
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	2201      	movs	r2, #1
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <__io_putchar+0x20>)
 8001c36:	f002 fd16 	bl	8004666 <HAL_UART_Transmit>

  return ch;
 8001c3a:	687b      	ldr	r3, [r7, #4]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000330 	.word	0x20000330

08001c48 <set_up_led>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_up_led(status_t getting)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	if(getting == ds_temp)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d112      	bne.n	8001c7e <set_up_led+0x36>
	{
		HAL_GPIO_WritePin(led_temp_ds_GPIO_Port, led_temp_ds_Pin, SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c5e:	4837      	ldr	r0, [pc, #220]	; (8001d3c <set_up_led+0xf4>)
 8001c60:	f001 fbf7 	bl	8003452 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_temp_dht_GPIO_Port, led_temp_dht_Pin, RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	4834      	ldr	r0, [pc, #208]	; (8001d3c <set_up_led+0xf4>)
 8001c6c:	f001 fbf1 	bl	8003452 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_humi_dht_GPIO_Port, led_humi_dht_Pin, RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c76:	4831      	ldr	r0, [pc, #196]	; (8001d3c <set_up_led+0xf4>)
 8001c78:	f001 fbeb 	bl	8003452 <HAL_GPIO_WritePin>
 8001c7c:	e02a      	b.n	8001cd4 <set_up_led+0x8c>
	}
	else if(getting == dht_temp)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d112      	bne.n	8001caa <set_up_led+0x62>
	{
		HAL_GPIO_WritePin(led_temp_ds_GPIO_Port, led_temp_ds_Pin, RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8a:	482c      	ldr	r0, [pc, #176]	; (8001d3c <set_up_led+0xf4>)
 8001c8c:	f001 fbe1 	bl	8003452 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_temp_dht_GPIO_Port, led_temp_dht_Pin, SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c96:	4829      	ldr	r0, [pc, #164]	; (8001d3c <set_up_led+0xf4>)
 8001c98:	f001 fbdb 	bl	8003452 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_humi_dht_GPIO_Port, led_humi_dht_Pin, RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca2:	4826      	ldr	r0, [pc, #152]	; (8001d3c <set_up_led+0xf4>)
 8001ca4:	f001 fbd5 	bl	8003452 <HAL_GPIO_WritePin>
 8001ca8:	e014      	b.n	8001cd4 <set_up_led+0x8c>
	}
	else if(getting == dht_humi)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d111      	bne.n	8001cd4 <set_up_led+0x8c>
	{
		HAL_GPIO_WritePin(led_temp_ds_GPIO_Port, led_temp_ds_Pin, RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb6:	4821      	ldr	r0, [pc, #132]	; (8001d3c <set_up_led+0xf4>)
 8001cb8:	f001 fbcb 	bl	8003452 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_temp_dht_GPIO_Port, led_temp_dht_Pin, RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	481e      	ldr	r0, [pc, #120]	; (8001d3c <set_up_led+0xf4>)
 8001cc4:	f001 fbc5 	bl	8003452 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_humi_dht_GPIO_Port, led_humi_dht_Pin, SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	481b      	ldr	r0, [pc, #108]	; (8001d3c <set_up_led+0xf4>)
 8001cd0:	f001 fbbf 	bl	8003452 <HAL_GPIO_WritePin>
	}
	if((temp_ds > warning_temp) || (temp_dht > warning_temp) || (humi_dht > warning_humi))
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <set_up_led+0xf8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <set_up_led+0xfc>)
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa16 	bl	8001110 <__aeabi_fcmpgt>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <set_up_led+0xce>
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <set_up_led+0x100>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <set_up_led+0xfc>)
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fa0b 	bl	8001110 <__aeabi_fcmpgt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10a      	bne.n	8001d16 <set_up_led+0xce>
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <set_up_led+0x104>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <set_up_led+0x108>)
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fa00 	bl	8001110 <__aeabi_fcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <set_up_led+0xdc>
	{
		HAL_GPIO_WritePin(led_warning_GPIO_Port, led_warning_Pin, SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <set_up_led+0xf4>)
 8001d1e:	f001 fb98 	bl	8003452 <HAL_GPIO_WritePin>
 8001d22:	e006      	b.n	8001d32 <set_up_led+0xea>
	}
	else
	{
		HAL_GPIO_WritePin(led_warning_GPIO_Port, led_warning_Pin, RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <set_up_led+0xf4>)
 8001d2c:	f001 fb91 	bl	8003452 <HAL_GPIO_WritePin>
	}
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40010c00 	.word	0x40010c00
 8001d40:	2000038c 	.word	0x2000038c
 8001d44:	20000048 	.word	0x20000048
 8001d48:	20000390 	.word	0x20000390
 8001d4c:	20000394 	.word	0x20000394
 8001d50:	2000004c 	.word	0x2000004c

08001d54 <read_sensor_task>:

void read_sensor_task(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
//	printf("Tick:%ld\n", uwTick);
	printf("In read_sensor_task!\n");
 8001d58:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <read_sensor_task+0x84>)
 8001d5a:	f004 f899 	bl	8005e90 <puts>
	temp_ds = DS18B20_ReadTemp(&DS1);
 8001d5e:	481f      	ldr	r0, [pc, #124]	; (8001ddc <read_sensor_task+0x88>)
 8001d60:	f7ff fd69 	bl	8001836 <DS18B20_ReadTemp>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <read_sensor_task+0x8c>)
 8001d68:	6013      	str	r3, [r2, #0]
	printf("Read DS12B20!\n");
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <read_sensor_task+0x90>)
 8001d6c:	f004 f890 	bl	8005e90 <puts>
	DHT_GetData(&DHT11_Data);
 8001d70:	481d      	ldr	r0, [pc, #116]	; (8001de8 <read_sensor_task+0x94>)
 8001d72:	f7ff fb5b 	bl	800142c <DHT_GetData>
	temp_dht = DHT11_Data.Temperature;
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <read_sensor_task+0x94>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <read_sensor_task+0x98>)
 8001d7c:	6013      	str	r3, [r2, #0]
	humi_dht = DHT11_Data.Humidity;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <read_sensor_task+0x94>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <read_sensor_task+0x9c>)
 8001d84:	6013      	str	r3, [r2, #0]
	set_up_led(getting);
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <read_sensor_task+0xa0>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff5c 	bl	8001c48 <set_up_led>
	printf("Read DHT11!\n");
 8001d90:	4819      	ldr	r0, [pc, #100]	; (8001df8 <read_sensor_task+0xa4>)
 8001d92:	f004 f87d 	bl	8005e90 <puts>
	printf("Value temp_ds: %.2f!\n", temp_ds);
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <read_sensor_task+0x8c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb4e 	bl	800043c <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4815      	ldr	r0, [pc, #84]	; (8001dfc <read_sensor_task+0xa8>)
 8001da6:	f003 ffed 	bl	8005d84 <iprintf>
	printf("Value temp_dht: %.2f!\n", temp_dht);
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <read_sensor_task+0x98>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb44 	bl	800043c <__aeabi_f2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4811      	ldr	r0, [pc, #68]	; (8001e00 <read_sensor_task+0xac>)
 8001dba:	f003 ffe3 	bl	8005d84 <iprintf>
	printf("Value humi_dht: %.2f!\n", humi_dht);
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <read_sensor_task+0x9c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb3a 	bl	800043c <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <read_sensor_task+0xb0>)
 8001dce:	f003 ffd9 	bl	8005d84 <iprintf>
//	printf("Value temp_ds:%d!\n", (int) temp_ds);  //hien thi so nguyen
//	printf("Value temp_dht:%d!\n", (int) temp_dht);
//	printf("Value humi_dht:%d!\n", (int) humi_dht);
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08009a78 	.word	0x08009a78
 8001ddc:	20000374 	.word	0x20000374
 8001de0:	2000038c 	.word	0x2000038c
 8001de4:	08009a90 	.word	0x08009a90
 8001de8:	20000384 	.word	0x20000384
 8001dec:	20000390 	.word	0x20000390
 8001df0:	20000394 	.word	0x20000394
 8001df4:	20000398 	.word	0x20000398
 8001df8:	08009aa0 	.word	0x08009aa0
 8001dfc:	08009aac 	.word	0x08009aac
 8001e00:	08009ac4 	.word	0x08009ac4
 8001e04:	08009adc 	.word	0x08009adc

08001e08 <key_pad_task>:

void key_pad_task(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	key = getKey();
 8001e0c:	f7ff fd60 	bl	80018d0 <getKey>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b81      	ldr	r3, [pc, #516]	; (800201c <key_pad_task+0x214>)
 8001e16:	701a      	strb	r2, [r3, #0]
	if(key)
 8001e18:	4b80      	ldr	r3, [pc, #512]	; (800201c <key_pad_task+0x214>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80fb 	beq.w	8002018 <key_pad_task+0x210>
	{
	  printf("Key: %c\n", key);
 8001e22:	4b7e      	ldr	r3, [pc, #504]	; (800201c <key_pad_task+0x214>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4619      	mov	r1, r3
 8001e28:	487d      	ldr	r0, [pc, #500]	; (8002020 <key_pad_task+0x218>)
 8001e2a:	f003 ffab 	bl	8005d84 <iprintf>
	  if(key == '*')
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <key_pad_task+0x214>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b2a      	cmp	r3, #42	; 0x2a
 8001e34:	d114      	bne.n	8001e60 <key_pad_task+0x58>
	  {
		  printf("Change period....\n");
 8001e36:	487b      	ldr	r0, [pc, #492]	; (8002024 <key_pad_task+0x21c>)
 8001e38:	f004 f82a 	bl	8005e90 <puts>
		  getting_period = 1;
 8001e3c:	4b7a      	ldr	r3, [pc, #488]	; (8002028 <key_pad_task+0x220>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
		  TIM4->CNT &= 0x0;
 8001e42:	4b7a      	ldr	r3, [pc, #488]	; (800202c <key_pad_task+0x224>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	4b79      	ldr	r3, [pc, #484]	; (800202c <key_pad_task+0x224>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start_IT(&htim4);
 8001e4c:	4878      	ldr	r0, [pc, #480]	; (8002030 <key_pad_task+0x228>)
 8001e4e:	f001 ffe5 	bl	8003e1c <HAL_TIM_Base_Start_IT>
		  index_key = 0;
 8001e52:	4b78      	ldr	r3, [pc, #480]	; (8002034 <key_pad_task+0x22c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
		  key = 0;
 8001e58:	4b70      	ldr	r3, [pc, #448]	; (800201c <key_pad_task+0x214>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e0d3      	b.n	8002008 <key_pad_task+0x200>
	  }

	  else if(key == '#')
 8001e60:	4b6e      	ldr	r3, [pc, #440]	; (800201c <key_pad_task+0x214>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b23      	cmp	r3, #35	; 0x23
 8001e66:	d117      	bne.n	8001e98 <key_pad_task+0x90>
	  {
		  printf("Change warning temperature....\n");
 8001e68:	4873      	ldr	r0, [pc, #460]	; (8002038 <key_pad_task+0x230>)
 8001e6a:	f004 f811 	bl	8005e90 <puts>
		  getting_warning = 1;
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <key_pad_task+0x234>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
		  getting_period = 0;
 8001e74:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <key_pad_task+0x220>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
		  TIM4->CNT &= 0x0;
 8001e7a:	4b6c      	ldr	r3, [pc, #432]	; (800202c <key_pad_task+0x224>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	4b6b      	ldr	r3, [pc, #428]	; (800202c <key_pad_task+0x224>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start_IT(&htim4);
 8001e84:	486a      	ldr	r0, [pc, #424]	; (8002030 <key_pad_task+0x228>)
 8001e86:	f001 ffc9 	bl	8003e1c <HAL_TIM_Base_Start_IT>
		  index_key = 0;
 8001e8a:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <key_pad_task+0x22c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
		  key = 0;
 8001e90:	4b62      	ldr	r3, [pc, #392]	; (800201c <key_pad_task+0x214>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e0b7      	b.n	8002008 <key_pad_task+0x200>
	  }
	  else if((key == '0') && (getting_period == 0) && (getting_warning == 0) && (getting_warning_humi == 0))
 8001e98:	4b60      	ldr	r3, [pc, #384]	; (800201c <key_pad_task+0x214>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b30      	cmp	r3, #48	; 0x30
 8001e9e:	d129      	bne.n	8001ef4 <key_pad_task+0xec>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	; (8002028 <key_pad_task+0x220>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	f083 0301 	eor.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d022      	beq.n	8001ef4 <key_pad_task+0xec>
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <key_pad_task+0x234>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	f083 0301 	eor.w	r3, r3, #1
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <key_pad_task+0xec>
 8001ebc:	4b60      	ldr	r3, [pc, #384]	; (8002040 <key_pad_task+0x238>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f083 0301 	eor.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d014      	beq.n	8001ef4 <key_pad_task+0xec>
	  {
		  printf("Change warning humidity....\n");
 8001eca:	485e      	ldr	r0, [pc, #376]	; (8002044 <key_pad_task+0x23c>)
 8001ecc:	f003 ffe0 	bl	8005e90 <puts>
		  getting_warning_humi = 1;
 8001ed0:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <key_pad_task+0x238>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
		  TIM4->CNT &= 0x0;
 8001ed6:	4b55      	ldr	r3, [pc, #340]	; (800202c <key_pad_task+0x224>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	4b54      	ldr	r3, [pc, #336]	; (800202c <key_pad_task+0x224>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start_IT(&htim4);
 8001ee0:	4853      	ldr	r0, [pc, #332]	; (8002030 <key_pad_task+0x228>)
 8001ee2:	f001 ff9b 	bl	8003e1c <HAL_TIM_Base_Start_IT>
		  index_key = 0;
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <key_pad_task+0x22c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
		  key = 0;
 8001eec:	4b4b      	ldr	r3, [pc, #300]	; (800201c <key_pad_task+0x214>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e089      	b.n	8002008 <key_pad_task+0x200>
	  }
	  else if(getting_period)
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <key_pad_task+0x220>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d024      	beq.n	8001f46 <key_pad_task+0x13e>
	  {
		  set_up[index_key] = key;
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <key_pad_task+0x22c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a46      	ldr	r2, [pc, #280]	; (800201c <key_pad_task+0x214>)
 8001f02:	7811      	ldrb	r1, [r2, #0]
 8001f04:	4a50      	ldr	r2, [pc, #320]	; (8002048 <key_pad_task+0x240>)
 8001f06:	54d1      	strb	r1, [r2, r3]
		  index_key ++;
 8001f08:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <key_pad_task+0x22c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	4a49      	ldr	r2, [pc, #292]	; (8002034 <key_pad_task+0x22c>)
 8001f10:	6013      	str	r3, [r2, #0]
		  if(index_key > 1)
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <key_pad_task+0x22c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	dd76      	ble.n	8002008 <key_pad_task+0x200>
		  {
			  period = atoi(set_up);
 8001f1a:	484b      	ldr	r0, [pc, #300]	; (8002048 <key_pad_task+0x240>)
 8001f1c:	f003 f88e 	bl	800503c <atoi>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <key_pad_task+0x244>)
 8001f24:	6013      	str	r3, [r2, #0]
			  printf("Changed period: %d\n", period);
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <key_pad_task+0x244>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4848      	ldr	r0, [pc, #288]	; (8002050 <key_pad_task+0x248>)
 8001f2e:	f003 ff29 	bl	8005d84 <iprintf>
			  HAL_TIM_Base_Stop_IT(&htim4);
 8001f32:	483f      	ldr	r0, [pc, #252]	; (8002030 <key_pad_task+0x228>)
 8001f34:	f001 ffc4 	bl	8003ec0 <HAL_TIM_Base_Stop_IT>
			  getting_period = 0;
 8001f38:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <key_pad_task+0x220>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
			  index_key = 0;
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <key_pad_task+0x22c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e060      	b.n	8002008 <key_pad_task+0x200>
		  }
	  }
	  else if(getting_warning)
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <key_pad_task+0x234>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02c      	beq.n	8001fa8 <key_pad_task+0x1a0>
	  {
		  set_up[index_key] = key;
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <key_pad_task+0x22c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a32      	ldr	r2, [pc, #200]	; (800201c <key_pad_task+0x214>)
 8001f54:	7811      	ldrb	r1, [r2, #0]
 8001f56:	4a3c      	ldr	r2, [pc, #240]	; (8002048 <key_pad_task+0x240>)
 8001f58:	54d1      	strb	r1, [r2, r3]
		  index_key ++;
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <key_pad_task+0x22c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a34      	ldr	r2, [pc, #208]	; (8002034 <key_pad_task+0x22c>)
 8001f62:	6013      	str	r3, [r2, #0]
		  if(index_key > 1)
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <key_pad_task+0x22c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	dd4d      	ble.n	8002008 <key_pad_task+0x200>
		  {
			  warning_temp = (float) atoi(set_up);
 8001f6c:	4836      	ldr	r0, [pc, #216]	; (8002048 <key_pad_task+0x240>)
 8001f6e:	f003 f865 	bl	800503c <atoi>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe febb 	bl	8000cf0 <__aeabi_i2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a35      	ldr	r2, [pc, #212]	; (8002054 <key_pad_task+0x24c>)
 8001f7e:	6013      	str	r3, [r2, #0]
			  printf("Changed warning_temp: %d\n", (int) warning_temp);
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <key_pad_task+0x24c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f8cd 	bl	8001124 <__aeabi_f2iz>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4832      	ldr	r0, [pc, #200]	; (8002058 <key_pad_task+0x250>)
 8001f90:	f003 fef8 	bl	8005d84 <iprintf>
			  HAL_TIM_Base_Stop_IT(&htim4);
 8001f94:	4826      	ldr	r0, [pc, #152]	; (8002030 <key_pad_task+0x228>)
 8001f96:	f001 ff93 	bl	8003ec0 <HAL_TIM_Base_Stop_IT>
			  getting_warning = 0;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <key_pad_task+0x234>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
			  index_key = 0;
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <key_pad_task+0x22c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e02f      	b.n	8002008 <key_pad_task+0x200>
		  }
	  }
	  else if(getting_warning_humi)
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <key_pad_task+0x238>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d02b      	beq.n	8002008 <key_pad_task+0x200>
	  {
		  set_up[index_key] = key;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <key_pad_task+0x22c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <key_pad_task+0x214>)
 8001fb6:	7811      	ldrb	r1, [r2, #0]
 8001fb8:	4a23      	ldr	r2, [pc, #140]	; (8002048 <key_pad_task+0x240>)
 8001fba:	54d1      	strb	r1, [r2, r3]
		  index_key ++;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <key_pad_task+0x22c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <key_pad_task+0x22c>)
 8001fc4:	6013      	str	r3, [r2, #0]
		  if(index_key > 1)
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <key_pad_task+0x22c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	dd1c      	ble.n	8002008 <key_pad_task+0x200>
		  {
			  warning_humi = (float) atoi(set_up);
 8001fce:	481e      	ldr	r0, [pc, #120]	; (8002048 <key_pad_task+0x240>)
 8001fd0:	f003 f834 	bl	800503c <atoi>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe8a 	bl	8000cf0 <__aeabi_i2f>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4a1f      	ldr	r2, [pc, #124]	; (800205c <key_pad_task+0x254>)
 8001fe0:	6013      	str	r3, [r2, #0]
			  printf("Changed warning_humi: %d\n", (int) warning_humi);
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <key_pad_task+0x254>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f89c 	bl	8001124 <__aeabi_f2iz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481b      	ldr	r0, [pc, #108]	; (8002060 <key_pad_task+0x258>)
 8001ff2:	f003 fec7 	bl	8005d84 <iprintf>
			  HAL_TIM_Base_Stop_IT(&htim4);
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <key_pad_task+0x228>)
 8001ff8:	f001 ff62 	bl	8003ec0 <HAL_TIM_Base_Stop_IT>
			  getting_warning_humi = 0;
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <key_pad_task+0x238>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
			  index_key = 0;
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <key_pad_task+0x22c>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
		  }
	  }
	  set_up_led(getting);
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <key_pad_task+0x25c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fe1b 	bl	8001c48 <set_up_led>
	  key = 0;
 8002012:	4b02      	ldr	r3, [pc, #8]	; (800201c <key_pad_task+0x214>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
	}
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200003a4 	.word	0x200003a4
 8002020:	08009af4 	.word	0x08009af4
 8002024:	08009b00 	.word	0x08009b00
 8002028:	20000399 	.word	0x20000399
 800202c:	40000800 	.word	0x40000800
 8002030:	200002e8 	.word	0x200002e8
 8002034:	200003a0 	.word	0x200003a0
 8002038:	08009b14 	.word	0x08009b14
 800203c:	2000039a 	.word	0x2000039a
 8002040:	2000039b 	.word	0x2000039b
 8002044:	08009b34 	.word	0x08009b34
 8002048:	2000039c 	.word	0x2000039c
 800204c:	20000044 	.word	0x20000044
 8002050:	08009b50 	.word	0x08009b50
 8002054:	20000048 	.word	0x20000048
 8002058:	08009b64 	.word	0x08009b64
 800205c:	2000004c 	.word	0x2000004c
 8002060:	08009b80 	.word	0x08009b80
 8002064:	20000398 	.word	0x20000398

08002068 <display_led7seg_task>:

void display_led7seg_task(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	if(getting == ds_temp)
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <display_led7seg_task+0x44>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <display_led7seg_task+0x18>
	{
	  display_float(temp_ds);
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <display_led7seg_task+0x48>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fd09 	bl	8001a90 <display_float>
	}
	else if(getting == dht_humi)
	{
	  display_float(humi_dht);
	}
}
 800207e:	e012      	b.n	80020a6 <display_led7seg_task+0x3e>
	else if(getting == dht_temp)
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <display_led7seg_task+0x44>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <display_led7seg_task+0x2c>
	  display_float(temp_dht);
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <display_led7seg_task+0x4c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fcff 	bl	8001a90 <display_float>
}
 8002092:	e008      	b.n	80020a6 <display_led7seg_task+0x3e>
	else if(getting == dht_humi)
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <display_led7seg_task+0x44>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d104      	bne.n	80020a6 <display_led7seg_task+0x3e>
	  display_float(humi_dht);
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <display_led7seg_task+0x50>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fcf5 	bl	8001a90 <display_float>
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000398 	.word	0x20000398
 80020b0:	2000038c 	.word	0x2000038c
 80020b4:	20000390 	.word	0x20000390
 80020b8:	20000394 	.word	0x20000394

080020bc <uart_received_task>:

void uart_received_task(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
	printf("Receive: %s\n", uart_receive);
 80020c2:	495a      	ldr	r1, [pc, #360]	; (800222c <uart_received_task+0x170>)
 80020c4:	485a      	ldr	r0, [pc, #360]	; (8002230 <uart_received_task+0x174>)
 80020c6:	f003 fe5d 	bl	8005d84 <iprintf>
		if(uart_receive[0] == '*')
 80020ca:	4b58      	ldr	r3, [pc, #352]	; (800222c <uart_received_task+0x170>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b2a      	cmp	r3, #42	; 0x2a
 80020d0:	d11b      	bne.n	800210a <uart_received_task+0x4e>
		{
			char get_uart[2];
			strncpy(get_uart, uart_receive+1, 2);
 80020d2:	4958      	ldr	r1, [pc, #352]	; (8002234 <uart_received_task+0x178>)
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	2202      	movs	r2, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 ff04 	bl	8005ee8 <strncpy>
			printf("Get uart to change period: %s\n", get_uart);
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4619      	mov	r1, r3
 80020e6:	4854      	ldr	r0, [pc, #336]	; (8002238 <uart_received_task+0x17c>)
 80020e8:	f003 fe4c 	bl	8005d84 <iprintf>
			period = atoi(get_uart);
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 ffa3 	bl	800503c <atoi>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a50      	ldr	r2, [pc, #320]	; (800223c <uart_received_task+0x180>)
 80020fa:	6013      	str	r3, [r2, #0]
			printf("Changed period: %d\n", period);
 80020fc:	4b4f      	ldr	r3, [pc, #316]	; (800223c <uart_received_task+0x180>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	484f      	ldr	r0, [pc, #316]	; (8002240 <uart_received_task+0x184>)
 8002104:	f003 fe3e 	bl	8005d84 <iprintf>
 8002108:	e081      	b.n	800220e <uart_received_task+0x152>
		}
		else if(uart_receive[0] == '#')
 800210a:	4b48      	ldr	r3, [pc, #288]	; (800222c <uart_received_task+0x170>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b23      	cmp	r3, #35	; 0x23
 8002110:	d120      	bne.n	8002154 <uart_received_task+0x98>
		{
			char get_uart[2];
			strncpy(get_uart, uart_receive+1, 2);
 8002112:	4948      	ldr	r1, [pc, #288]	; (8002234 <uart_received_task+0x178>)
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2202      	movs	r2, #2
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fee5 	bl	8005ee8 <strncpy>
			printf("Get uart to change level warning_temp: %s\n", get_uart);
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4848      	ldr	r0, [pc, #288]	; (8002244 <uart_received_task+0x188>)
 8002124:	f003 fe2e 	bl	8005d84 <iprintf>
			warning_temp = (float) atoi(get_uart);
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4618      	mov	r0, r3
 800212c:	f002 ff86 	bl	800503c <atoi>
 8002130:	4603      	mov	r3, r0
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fddc 	bl	8000cf0 <__aeabi_i2f>
 8002138:	4603      	mov	r3, r0
 800213a:	4a43      	ldr	r2, [pc, #268]	; (8002248 <uart_received_task+0x18c>)
 800213c:	6013      	str	r3, [r2, #0]
			printf("Changed warning_temp: %d\n", (int) warning_temp);
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <uart_received_task+0x18c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe ffee 	bl	8001124 <__aeabi_f2iz>
 8002148:	4603      	mov	r3, r0
 800214a:	4619      	mov	r1, r3
 800214c:	483f      	ldr	r0, [pc, #252]	; (800224c <uart_received_task+0x190>)
 800214e:	f003 fe19 	bl	8005d84 <iprintf>
 8002152:	e05c      	b.n	800220e <uart_received_task+0x152>
		}
		else if(uart_receive[0] == '0')
 8002154:	4b35      	ldr	r3, [pc, #212]	; (800222c <uart_received_task+0x170>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b30      	cmp	r3, #48	; 0x30
 800215a:	d120      	bne.n	800219e <uart_received_task+0xe2>
		{
			char get_uart[2];
			strncpy(get_uart, uart_receive+1, 2);
 800215c:	4935      	ldr	r1, [pc, #212]	; (8002234 <uart_received_task+0x178>)
 800215e:	463b      	mov	r3, r7
 8002160:	2202      	movs	r2, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fec0 	bl	8005ee8 <strncpy>
			printf("Get uart to change level warning_humi: %s\n", get_uart);
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	4838      	ldr	r0, [pc, #224]	; (8002250 <uart_received_task+0x194>)
 800216e:	f003 fe09 	bl	8005d84 <iprintf>
			warning_humi = (float) atoi(get_uart);
 8002172:	463b      	mov	r3, r7
 8002174:	4618      	mov	r0, r3
 8002176:	f002 ff61 	bl	800503c <atoi>
 800217a:	4603      	mov	r3, r0
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fdb7 	bl	8000cf0 <__aeabi_i2f>
 8002182:	4603      	mov	r3, r0
 8002184:	4a33      	ldr	r2, [pc, #204]	; (8002254 <uart_received_task+0x198>)
 8002186:	6013      	str	r3, [r2, #0]
			printf("Changed warning_humi: %d\n", (int) warning_humi);
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <uart_received_task+0x198>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe ffc9 	bl	8001124 <__aeabi_f2iz>
 8002192:	4603      	mov	r3, r0
 8002194:	4619      	mov	r1, r3
 8002196:	4830      	ldr	r0, [pc, #192]	; (8002258 <uart_received_task+0x19c>)
 8002198:	f003 fdf4 	bl	8005d84 <iprintf>
 800219c:	e037      	b.n	800220e <uart_received_task+0x152>
		}
		else if(strcmp(uart_receive, "md1") == 0)
 800219e:	492f      	ldr	r1, [pc, #188]	; (800225c <uart_received_task+0x1a0>)
 80021a0:	4822      	ldr	r0, [pc, #136]	; (800222c <uart_received_task+0x170>)
 80021a2:	f7fd ffd5 	bl	8000150 <strcmp>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <uart_received_task+0xfe>
		{
			getting = ds_temp;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <uart_received_task+0x1a4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to ds18b20 temperature!\n");
 80021b2:	482c      	ldr	r0, [pc, #176]	; (8002264 <uart_received_task+0x1a8>)
 80021b4:	f003 fe6c 	bl	8005e90 <puts>
 80021b8:	e029      	b.n	800220e <uart_received_task+0x152>
		}
		else if(strcmp(uart_receive, "md2") == 0)
 80021ba:	492b      	ldr	r1, [pc, #172]	; (8002268 <uart_received_task+0x1ac>)
 80021bc:	481b      	ldr	r0, [pc, #108]	; (800222c <uart_received_task+0x170>)
 80021be:	f7fd ffc7 	bl	8000150 <strcmp>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <uart_received_task+0x11a>
		{
			getting = dht_temp;
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <uart_received_task+0x1a4>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to dht11 temperature!\n");
 80021ce:	4827      	ldr	r0, [pc, #156]	; (800226c <uart_received_task+0x1b0>)
 80021d0:	f003 fe5e 	bl	8005e90 <puts>
 80021d4:	e01b      	b.n	800220e <uart_received_task+0x152>
		}
		else if(strcmp(uart_receive, "md3") == 0)
 80021d6:	4926      	ldr	r1, [pc, #152]	; (8002270 <uart_received_task+0x1b4>)
 80021d8:	4814      	ldr	r0, [pc, #80]	; (800222c <uart_received_task+0x170>)
 80021da:	f7fd ffb9 	bl	8000150 <strcmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <uart_received_task+0x136>
		{
			getting = dht_humi;
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <uart_received_task+0x1a4>)
 80021e6:	2202      	movs	r2, #2
 80021e8:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to dht11 humidity!\n");
 80021ea:	4822      	ldr	r0, [pc, #136]	; (8002274 <uart_received_task+0x1b8>)
 80021ec:	f003 fe50 	bl	8005e90 <puts>
 80021f0:	e00d      	b.n	800220e <uart_received_task+0x152>
		}
		else
		{
			for(int i = 0; i < 3; i ++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e007      	b.n	8002208 <uart_received_task+0x14c>
			{
				uart_receive[i] = '\0';
 80021f8:	4a0c      	ldr	r2, [pc, #48]	; (800222c <uart_received_task+0x170>)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 3; i ++)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3301      	adds	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b02      	cmp	r3, #2
 800220c:	ddf4      	ble.n	80021f8 <uart_received_task+0x13c>
			}
		}
		set_up_led(getting);
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <uart_received_task+0x1a4>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fd18 	bl	8001c48 <set_up_led>
		HAL_UART_Receive_IT(&huart2, (uint8_t *) uart_receive, 3);
 8002218:	2203      	movs	r2, #3
 800221a:	4904      	ldr	r1, [pc, #16]	; (800222c <uart_received_task+0x170>)
 800221c:	4816      	ldr	r0, [pc, #88]	; (8002278 <uart_received_task+0x1bc>)
 800221e:	f002 fab4 	bl	800478a <HAL_UART_Receive_IT>
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200003ac 	.word	0x200003ac
 8002230:	08009b9c 	.word	0x08009b9c
 8002234:	200003ad 	.word	0x200003ad
 8002238:	08009bac 	.word	0x08009bac
 800223c:	20000044 	.word	0x20000044
 8002240:	08009b50 	.word	0x08009b50
 8002244:	08009bcc 	.word	0x08009bcc
 8002248:	20000048 	.word	0x20000048
 800224c:	08009b64 	.word	0x08009b64
 8002250:	08009bf8 	.word	0x08009bf8
 8002254:	2000004c 	.word	0x2000004c
 8002258:	08009b80 	.word	0x08009b80
 800225c:	08009c24 	.word	0x08009c24
 8002260:	20000398 	.word	0x20000398
 8002264:	08009c28 	.word	0x08009c28
 8002268:	08009c50 	.word	0x08009c50
 800226c:	08009c54 	.word	0x08009c54
 8002270:	08009c78 	.word	0x08009c78
 8002274:	08009c7c 	.word	0x08009c7c
 8002278:	20000330 	.word	0x20000330

0800227c <button_set_mode_task>:

void button_set_mode_task(uint16_t GPIO_Pin)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == but_temp_ds_Pin)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228c:	d10a      	bne.n	80022a4 <button_set_mode_task+0x28>
	{
		if(getting != ds_temp)
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <button_set_mode_task+0x6c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d023      	beq.n	80022de <button_set_mode_task+0x62>
		{
			getting = ds_temp;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <button_set_mode_task+0x6c>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to ds18b20 temperature!\n");
 800229c:	4813      	ldr	r0, [pc, #76]	; (80022ec <button_set_mode_task+0x70>)
 800229e:	f003 fdf7 	bl	8005e90 <puts>
		{
			getting = dht_humi;
			printf("Changed mode to dht11 humidity!\n");
		}
	}
}
 80022a2:	e01c      	b.n	80022de <button_set_mode_task+0x62>
	else if(GPIO_Pin == but_temp_dht_Pin)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022aa:	d10a      	bne.n	80022c2 <button_set_mode_task+0x46>
		if(getting != dht_temp)
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <button_set_mode_task+0x6c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d014      	beq.n	80022de <button_set_mode_task+0x62>
			getting = dht_temp;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <button_set_mode_task+0x6c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to dht11 temperature!\n");
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <button_set_mode_task+0x74>)
 80022bc:	f003 fde8 	bl	8005e90 <puts>
}
 80022c0:	e00d      	b.n	80022de <button_set_mode_task+0x62>
	else if(GPIO_Pin == but_humi_dht_Pin)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c8:	d109      	bne.n	80022de <button_set_mode_task+0x62>
		if(getting != dht_humi)
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <button_set_mode_task+0x6c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d005      	beq.n	80022de <button_set_mode_task+0x62>
			getting = dht_humi;
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <button_set_mode_task+0x6c>)
 80022d4:	2202      	movs	r2, #2
 80022d6:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to dht11 humidity!\n");
 80022d8:	4806      	ldr	r0, [pc, #24]	; (80022f4 <button_set_mode_task+0x78>)
 80022da:	f003 fdd9 	bl	8005e90 <puts>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000398 	.word	0x20000398
 80022ec:	08009c28 	.word	0x08009c28
 80022f0:	08009c54 	.word	0x08009c54
 80022f4:	08009c7c 	.word	0x08009c7c

080022f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fc:	f000 fcca 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002300:	f000 f856 	bl	80023b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002304:	f000 f9ac 	bl	8002660 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002308:	f000 f898 	bl	800243c <MX_TIM2_Init>
  MX_TIM3_Init();
 800230c:	f000 f8e2 	bl	80024d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002310:	f000 f92e 	bl	8002570 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002314:	f000 f97a 	bl	800260c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	DS18B20_Init(&DS1, &htim2, ds18b20_GPIO_Port, ds18b20_Pin);
 8002318:	2302      	movs	r3, #2
 800231a:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <main+0x8c>)
 800231c:	491a      	ldr	r1, [pc, #104]	; (8002388 <main+0x90>)
 800231e:	481b      	ldr	r0, [pc, #108]	; (800238c <main+0x94>)
 8002320:	f7ff fa72 	bl	8001808 <DS18B20_Init>
	HAL_Delay(2000);
 8002324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002328:	f000 fd16 	bl	8002d58 <HAL_Delay>
	printf("Hello World!\n");
 800232c:	4818      	ldr	r0, [pc, #96]	; (8002390 <main+0x98>)
 800232e:	f003 fdaf 	bl	8005e90 <puts>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) uart_receive, 3);
 8002332:	2203      	movs	r2, #3
 8002334:	4917      	ldr	r1, [pc, #92]	; (8002394 <main+0x9c>)
 8002336:	4818      	ldr	r0, [pc, #96]	; (8002398 <main+0xa0>)
 8002338:	f002 fa27 	bl	800478a <HAL_UART_Receive_IT>
	TIM3->EGR = TIM_EGR_UG;     /* Force update for prescaler value. */
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <main+0xa4>)
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
	TIM3->SR  = 0;              /* Clear update flag. */
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <main+0xa4>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
	TIM4->EGR = TIM_EGR_UG;     /* Force update for prescaler value. */
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <main+0xa8>)
 800234a:	2201      	movs	r2, #1
 800234c:	615a      	str	r2, [r3, #20]
	TIM4->SR  = 0;              /* Clear update flag. */
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <main+0xa8>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 8002354:	4813      	ldr	r0, [pc, #76]	; (80023a4 <main+0xac>)
 8002356:	f001 fd61 	bl	8003e1c <HAL_TIM_Base_Start_IT>
	read_sensor_task();
 800235a:	f7ff fcfb 	bl	8001d54 <read_sensor_task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((uwTick%10) == 1)
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <main+0xb0>)
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <main+0xb4>)
 8002364:	fba3 2301 	umull	r2, r3, r3, r1
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	1aca      	subs	r2, r1, r3
 8002374:	2a01      	cmp	r2, #1
 8002376:	d1f2      	bne.n	800235e <main+0x66>
	  {
		  key_pad_task();
 8002378:	f7ff fd46 	bl	8001e08 <key_pad_task>
		  display_led7seg_task();
 800237c:	f7ff fe74 	bl	8002068 <display_led7seg_task>
	  if((uwTick%10) == 1)
 8002380:	e7ed      	b.n	800235e <main+0x66>
 8002382:	bf00      	nop
 8002384:	40010800 	.word	0x40010800
 8002388:	20000258 	.word	0x20000258
 800238c:	20000374 	.word	0x20000374
 8002390:	08009c9c 	.word	0x08009c9c
 8002394:	200003ac 	.word	0x200003ac
 8002398:	20000330 	.word	0x20000330
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800
 80023a4:	200002a0 	.word	0x200002a0
 80023a8:	200003b4 	.word	0x200003b4
 80023ac:	cccccccd 	.word	0xcccccccd

080023b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b090      	sub	sp, #64	; 0x40
 80023b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b6:	f107 0318 	add.w	r3, r7, #24
 80023ba:	2228      	movs	r2, #40	; 0x28
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 fe6a 	bl	8005098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e0:	2301      	movs	r3, #1
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e4:	2302      	movs	r3, #2
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f85b 	bl	80034b4 <HAL_RCC_OscConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002404:	f000 fa26 	bl	8002854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002408:	230f      	movs	r3, #15
 800240a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800240c:	2302      	movs	r3, #2
 800240e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fac8 	bl	80039b8 <HAL_RCC_ClockConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800242e:	f000 fa11 	bl	8002854 <Error_Handler>
  }
}
 8002432:	bf00      	nop
 8002434:	3740      	adds	r7, #64	; 0x40
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002450:	463b      	mov	r3, r7
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_TIM2_Init+0x94>)
 800245a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800245e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_TIM2_Init+0x94>)
 8002462:	2247      	movs	r2, #71	; 0x47
 8002464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_TIM2_Init+0x94>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_TIM2_Init+0x94>)
 800246e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_TIM2_Init+0x94>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <MX_TIM2_Init+0x94>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002480:	4813      	ldr	r0, [pc, #76]	; (80024d0 <MX_TIM2_Init+0x94>)
 8002482:	f001 fc31 	bl	8003ce8 <HAL_TIM_Base_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800248c:	f000 f9e2 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002496:	f107 0308 	add.w	r3, r7, #8
 800249a:	4619      	mov	r1, r3
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <MX_TIM2_Init+0x94>)
 800249e:	f001 fe45 	bl	800412c <HAL_TIM_ConfigClockSource>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024a8:	f000 f9d4 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024b4:	463b      	mov	r3, r7
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_TIM2_Init+0x94>)
 80024ba:	f002 f817 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024c4:	f000 f9c6 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000258 	.word	0x20000258

080024d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e8:	463b      	mov	r3, r7
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <MX_TIM3_Init+0x94>)
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <MX_TIM3_Init+0x98>)
 80024f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <MX_TIM3_Init+0x94>)
 80024f8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80024fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <MX_TIM3_Init+0x94>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <MX_TIM3_Init+0x94>)
 8002506:	f242 720f 	movw	r2, #9999	; 0x270f
 800250a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <MX_TIM3_Init+0x94>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <MX_TIM3_Init+0x94>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <MX_TIM3_Init+0x94>)
 800251a:	f001 fbe5 	bl	8003ce8 <HAL_TIM_Base_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002524:	f000 f996 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4619      	mov	r1, r3
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <MX_TIM3_Init+0x94>)
 8002536:	f001 fdf9 	bl	800412c <HAL_TIM_ConfigClockSource>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002540:	f000 f988 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800254c:	463b      	mov	r3, r7
 800254e:	4619      	mov	r1, r3
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_TIM3_Init+0x94>)
 8002552:	f001 ffcb 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800255c:	f000 f97a 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200002a0 	.word	0x200002a0
 800256c:	40000400 	.word	0x40000400

08002570 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	463b      	mov	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_TIM4_Init+0x94>)
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <MX_TIM4_Init+0x98>)
 8002590:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <MX_TIM4_Init+0x94>)
 8002594:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002598:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_TIM4_Init+0x94>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_TIM4_Init+0x94>)
 80025a2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80025a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_TIM4_Init+0x94>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_TIM4_Init+0x94>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <MX_TIM4_Init+0x94>)
 80025b6:	f001 fb97 	bl	8003ce8 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80025c0:	f000 f948 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	4619      	mov	r1, r3
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_TIM4_Init+0x94>)
 80025d2:	f001 fdab 	bl	800412c <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80025dc:	f000 f93a 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_TIM4_Init+0x94>)
 80025ee:	f001 ff7d 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025f8:	f000 f92c 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200002e8 	.word	0x200002e8
 8002608:	40000800 	.word	0x40000800

0800260c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <MX_USART2_UART_Init+0x50>)
 8002614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 8002618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800261c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <MX_USART2_UART_Init+0x4c>)
 8002644:	f001 ffc2 	bl	80045cc <HAL_UART_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800264e:	f000 f901 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000330 	.word	0x20000330
 800265c:	40004400 	.word	0x40004400

08002660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <MX_GPIO_Init+0x11c>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a40      	ldr	r2, [pc, #256]	; (800277c <MX_GPIO_Init+0x11c>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <MX_GPIO_Init+0x11c>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <MX_GPIO_Init+0x11c>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a3a      	ldr	r2, [pc, #232]	; (800277c <MX_GPIO_Init+0x11c>)
 8002692:	f043 0320 	orr.w	r3, r3, #32
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b38      	ldr	r3, [pc, #224]	; (800277c <MX_GPIO_Init+0x11c>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <MX_GPIO_Init+0x11c>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a34      	ldr	r2, [pc, #208]	; (800277c <MX_GPIO_Init+0x11c>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <MX_GPIO_Init+0x11c>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <MX_GPIO_Init+0x11c>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a2e      	ldr	r2, [pc, #184]	; (800277c <MX_GPIO_Init+0x11c>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <MX_GPIO_Init+0x11c>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dht11_Pin|ds18b20_Pin, GPIO_PIN_SET);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2103      	movs	r1, #3
 80026d8:	4829      	ldr	r0, [pc, #164]	; (8002780 <MX_GPIO_Init+0x120>)
 80026da:	f000 feba 	bl	8003452 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|Digit1_pin_Pin|A_pin_Pin|F_pin_Pin
 80026de:	2200      	movs	r2, #0
 80026e0:	f649 6180 	movw	r1, #40576	; 0x9e80
 80026e4:	4826      	ldr	r0, [pc, #152]	; (8002780 <MX_GPIO_Init+0x120>)
 80026e6:	f000 feb4 	bl	8003452 <HAL_GPIO_WritePin>
                          |Digit2_pin_Pin|Digit3_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW3_Pin|ROW2_Pin|ROW1_Pin|led_humi_dht_Pin
 80026ea:	2200      	movs	r2, #0
 80026ec:	f24f 71fb 	movw	r1, #63483	; 0xf7fb
 80026f0:	4824      	ldr	r0, [pc, #144]	; (8002784 <MX_GPIO_Init+0x124>)
 80026f2:	f000 feae 	bl	8003452 <HAL_GPIO_WritePin>
                          |led_temp_dht_Pin|led_temp_ds_Pin|led_warning_Pin|B_pin_Pin
                          |Digit4_pin_Pin|G_pin_Pin|C_pin_Pin|Dot_pin_Pin
                          |D_pin_Pin|E_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : but_temp_ds_Pin but_temp_dht_Pin but_humi_dht_Pin */
  GPIO_InitStruct.Pin = but_temp_ds_Pin|but_temp_dht_Pin|but_humi_dht_Pin;
 80026f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80026fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <MX_GPIO_Init+0x128>)
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002700:	2301      	movs	r3, #1
 8002702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4619      	mov	r1, r3
 800270a:	4820      	ldr	r0, [pc, #128]	; (800278c <MX_GPIO_Init+0x12c>)
 800270c:	f000 fd06 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : dht11_Pin ds18b20_Pin ROW4_Pin Digit1_pin_Pin
                           A_pin_Pin F_pin_Pin Digit2_pin_Pin Digit3_pin_Pin */
  GPIO_InitStruct.Pin = dht11_Pin|ds18b20_Pin|ROW4_Pin|Digit1_pin_Pin
 8002710:	f649 6383 	movw	r3, #40579	; 0x9e83
 8002714:	613b      	str	r3, [r7, #16]
                          |A_pin_Pin|F_pin_Pin|Digit2_pin_Pin|Digit3_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2302      	movs	r3, #2
 8002720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4619      	mov	r1, r3
 8002728:	4815      	ldr	r0, [pc, #84]	; (8002780 <MX_GPIO_Init+0x120>)
 800272a:	f000 fcf7 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN3_Pin COLUMN2_Pin COLUMN1_Pin */
  GPIO_InitStruct.Pin = COLUMN3_Pin|COLUMN2_Pin|COLUMN1_Pin;
 800272e:	2370      	movs	r3, #112	; 0x70
 8002730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002736:	2301      	movs	r3, #1
 8002738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	4619      	mov	r1, r3
 8002740:	480f      	ldr	r0, [pc, #60]	; (8002780 <MX_GPIO_Init+0x120>)
 8002742:	f000 fceb 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW3_Pin ROW2_Pin ROW1_Pin led_humi_dht_Pin
                           led_temp_dht_Pin led_temp_ds_Pin led_warning_Pin B_pin_Pin
                           Digit4_pin_Pin G_pin_Pin C_pin_Pin Dot_pin_Pin
                           D_pin_Pin E_pin_Pin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin|led_humi_dht_Pin
 8002746:	f24f 73fb 	movw	r3, #63483	; 0xf7fb
 800274a:	613b      	str	r3, [r7, #16]
                          |led_temp_dht_Pin|led_temp_ds_Pin|led_warning_Pin|B_pin_Pin
                          |Digit4_pin_Pin|G_pin_Pin|C_pin_Pin|Dot_pin_Pin
                          |D_pin_Pin|E_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274c:	2301      	movs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2302      	movs	r3, #2
 8002756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	4619      	mov	r1, r3
 800275e:	4809      	ldr	r0, [pc, #36]	; (8002784 <MX_GPIO_Init+0x124>)
 8002760:	f000 fcdc 	bl	800311c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	2028      	movs	r0, #40	; 0x28
 800276a:	f000 fbf0 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800276e:	2028      	movs	r0, #40	; 0x28
 8002770:	f000 fc09 	bl	8002f86 <HAL_NVIC_EnableIRQ>

}
 8002774:	bf00      	nop
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40010800 	.word	0x40010800
 8002784:	40010c00 	.word	0x40010c00
 8002788:	10110000 	.word	0x10110000
 800278c:	40011000 	.word	0x40011000

08002790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
		UNUSED(htim);
	/* NOTE : This function should not be modified, when the callback is needed,
			the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	*/
	if (htim->Instance == TIM3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10f      	bne.n	80027c2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		count_period++;
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80027aa:	6013      	str	r3, [r2, #0]
		if(count_period >= period)
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	db04      	blt.n	80027c2 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			count_period = 0;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
			read_sensor_task();
 80027be:	f7ff fac9 	bl	8001d54 <read_sensor_task>
		}
	}
	if (htim->Instance == TIM4)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10e      	bne.n	80027ea <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		printf("Out setting!\n");
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80027ce:	f003 fb5f 	bl	8005e90 <puts>
		getting_period = 0;
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
		getting_warning = 0;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
		getting_warning_humi = 0;
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim4);
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80027e6:	f001 fb6b 	bl	8003ec0 <HAL_TIM_Base_Stop_IT>
	}
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40000400 	.word	0x40000400
 80027f8:	200003a8 	.word	0x200003a8
 80027fc:	20000044 	.word	0x20000044
 8002800:	40000800 	.word	0x40000800
 8002804:	08009cac 	.word	0x08009cac
 8002808:	20000399 	.word	0x20000399
 800280c:	2000039a 	.word	0x2000039a
 8002810:	2000039b 	.word	0x2000039b
 8002814:	200002e8 	.word	0x200002e8

08002818 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
		UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
		   the HAL_GPIO_EXTI_Callback could be implemented in the user file
	*/
	button_set_mode_task(GPIO_Pin);
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd29 	bl	800227c <button_set_mode_task>
	set_up_led(getting);
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_GPIO_EXTI_Callback+0x24>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fa0a 	bl	8001c48 <set_up_led>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000398 	.word	0x20000398

08002840 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
		UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the HAL_UART_RxCpltCallback could be implemented in the user file
	*/
	uart_received_task();
 8002848:	f7ff fc38 	bl	80020bc <uart_received_task>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002858:	b672      	cpsid	i
}
 800285a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800285c:	e7fe      	b.n	800285c <Error_Handler+0x8>
	...

08002860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_MspInit+0x5c>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_MspInit+0x5c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6193      	str	r3, [r2, #24]
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_MspInit+0x5c>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_MspInit+0x5c>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_MspInit+0x5c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_MspInit+0x5c>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_MspInit+0x60>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_MspInit+0x60>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010000 	.word	0x40010000

080028c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d10c      	bne.n	80028f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	61d3      	str	r3, [r2, #28]
 80028e2:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028ee:	e032      	b.n	8002956 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_TIM_Base_MspInit+0xa0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d114      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4a18      	ldr	r2, [pc, #96]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	61d3      	str	r3, [r2, #28]
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2101      	movs	r1, #1
 8002916:	201d      	movs	r0, #29
 8002918:	f000 fb19 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800291c:	201d      	movs	r0, #29
 800291e:	f000 fb32 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 8002922:	e018      	b.n	8002956 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_TIM_Base_MspInit+0xa4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d113      	bne.n	8002956 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_TIM_Base_MspInit+0x9c>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	201e      	movs	r0, #30
 800294c:	f000 faff 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002950:	201e      	movs	r0, #30
 8002952:	f000 fb18 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800

0800296c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_UART_MspInit+0x98>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d137      	bne.n	80029fc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 8002992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002996:	61d3      	str	r3, [r2, #28]
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	6193      	str	r3, [r2, #24]
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029bc:	2304      	movs	r3, #4
 80029be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	4619      	mov	r1, r3
 80029ce:	480f      	ldr	r0, [pc, #60]	; (8002a0c <HAL_UART_MspInit+0xa0>)
 80029d0:	f000 fba4 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d4:	2308      	movs	r3, #8
 80029d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	4619      	mov	r1, r3
 80029e6:	4809      	ldr	r0, [pc, #36]	; (8002a0c <HAL_UART_MspInit+0xa0>)
 80029e8:	f000 fb98 	bl	800311c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2100      	movs	r1, #0
 80029f0:	2026      	movs	r0, #38	; 0x26
 80029f2:	f000 faac 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029f6:	2026      	movs	r0, #38	; 0x26
 80029f8:	f000 fac5 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40004400 	.word	0x40004400
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010800 	.word	0x40010800

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <NMI_Handler+0x4>

08002a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <HardFault_Handler+0x4>

08002a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <MemManage_Handler+0x4>

08002a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <BusFault_Handler+0x4>

08002a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <UsageFault_Handler+0x4>

08002a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a56:	f000 f963 	bl	8002d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <TIM3_IRQHandler+0x10>)
 8002a66:	f001 fa59 	bl	8003f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200002a0 	.word	0x200002a0

08002a74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <TIM4_IRQHandler+0x10>)
 8002a7a:	f001 fa4f 	bl	8003f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002e8 	.word	0x200002e8

08002a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <USART2_IRQHandler+0x10>)
 8002a8e:	f001 fead 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000330 	.word	0x20000330

08002a9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(but_temp_ds_Pin);
 8002aa0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002aa4:	f000 fcee 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(but_temp_dht_Pin);
 8002aa8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002aac:	f000 fcea 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(but_humi_dht_Pin);
 8002ab0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ab4:	f000 fce6 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return 1;
 8002ac0:	2301      	movs	r3, #1
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <_kill>:

int _kill(int pid, int sig)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ad4:	f002 fab6 	bl	8005044 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2216      	movs	r2, #22
 8002adc:	601a      	str	r2, [r3, #0]
  return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_exit>:

void _exit (int status)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002af2:	f04f 31ff 	mov.w	r1, #4294967295
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffe7 	bl	8002aca <_kill>
  while (1) {}    /* Make sure we hang here */
 8002afc:	e7fe      	b.n	8002afc <_exit+0x12>

08002afe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e00a      	b.n	8002b26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b10:	f3af 8000 	nop.w
 8002b14:	4601      	mov	r1, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	60ba      	str	r2, [r7, #8]
 8002b1c:	b2ca      	uxtb	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	dbf0      	blt.n	8002b10 <_read+0x12>
  }

  return len;
 8002b2e:	687b      	ldr	r3, [r7, #4]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e009      	b.n	8002b5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f866 	bl	8001c24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dbf1      	blt.n	8002b4a <_write+0x12>
  }
  return len;
 8002b66:	687b      	ldr	r3, [r7, #4]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_close>:

int _close(int file)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b96:	605a      	str	r2, [r3, #4]
  return 0;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <_isatty>:

int _isatty(int file)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <_sbrk+0x5c>)
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <_sbrk+0x60>)
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <_sbrk+0x64>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <_sbrk+0x68>)
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d207      	bcs.n	8002c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c00:	f002 fa20 	bl	8005044 <__errno>
 8002c04:	4603      	mov	r3, r0
 8002c06:	220c      	movs	r2, #12
 8002c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	e009      	b.n	8002c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <_sbrk+0x64>)
 8002c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20005000 	.word	0x20005000
 8002c30:	00000400 	.word	0x00000400
 8002c34:	200003b0 	.word	0x200003b0
 8002c38:	200003c8 	.word	0x200003c8

08002c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c48:	480c      	ldr	r0, [pc, #48]	; (8002c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c4a:	490d      	ldr	r1, [pc, #52]	; (8002c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c50:	e002      	b.n	8002c58 <LoopCopyDataInit>

08002c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c56:	3304      	adds	r3, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c5c:	d3f9      	bcc.n	8002c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c60:	4c0a      	ldr	r4, [pc, #40]	; (8002c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c64:	e001      	b.n	8002c6a <LoopFillZerobss>

08002c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c68:	3204      	adds	r2, #4

08002c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c6c:	d3fb      	bcc.n	8002c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c6e:	f7ff ffe5 	bl	8002c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c72:	f002 f9ed 	bl	8005050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c76:	f7ff fb3f 	bl	80022f8 <main>
  bx lr
 8002c7a:	4770      	bx	lr
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002c84:	0800a19c 	.word	0x0800a19c
  ldr r2, =_sbss
 8002c88:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002c8c:	200003c8 	.word	0x200003c8

08002c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC1_2_IRQHandler>
	...

08002c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_Init+0x28>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <HAL_Init+0x28>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f000 f947 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002caa:	200f      	movs	r0, #15
 8002cac:	f000 f808 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb0:	f7ff fdd6 	bl	8002860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x54>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x58>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f95f 	bl	8002fa2 <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f000 f927 	bl	8002f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d00:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_InitTick+0x5c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000050 	.word	0x20000050
 8002d18:	20000058 	.word	0x20000058
 8002d1c:	20000054 	.word	0x20000054

08002d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_IncTick+0x1c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_IncTick+0x20>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_IncTick+0x20>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000058 	.word	0x20000058
 8002d40:	200003b4 	.word	0x200003b4

08002d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <HAL_GetTick+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	200003b4 	.word	0x200003b4

08002d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff fff0 	bl	8002d44 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d005      	beq.n	8002d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_Delay+0x44>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d7e:	bf00      	nop
 8002d80:	f7ff ffe0 	bl	8002d44 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d8f7      	bhi.n	8002d80 <HAL_Delay+0x28>
  {
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000058 	.word	0x20000058

08002da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__NVIC_GetPriorityGrouping+0x18>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 0307 	and.w	r3, r3, #7
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db0b      	blt.n	8002e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4906      	ldr	r1, [pc, #24]	; (8002e38 <__NVIC_EnableIRQ+0x34>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	; (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	; (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f04:	d301      	bcc.n	8002f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <SysTick_Config+0x40>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f12:	210f      	movs	r1, #15
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f7ff ff90 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SysTick_Config+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <SysTick_Config+0x40>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff2d 	bl	8002da0 <__NVIC_SetPriorityGrouping>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f60:	f7ff ff42 	bl	8002de8 <__NVIC_GetPriorityGrouping>
 8002f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f7ff ff90 	bl	8002e90 <NVIC_EncodePriority>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff5f 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff35 	bl	8002e04 <__NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ffa2 	bl	8002ef4 <SysTick_Config>
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d008      	beq.n	8002fe2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e020      	b.n	8003024 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 020e 	bic.w	r2, r2, #14
 8002ff0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
	...

08003030 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003042:	2b02      	cmp	r3, #2
 8003044:	d005      	beq.n	8003052 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e051      	b.n	80030f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 020e 	bic.w	r2, r2, #14
 8003060:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_DMA_Abort_IT+0xd0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d029      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xa0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a20      	ldr	r2, [pc, #128]	; (8003104 <HAL_DMA_Abort_IT+0xd4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d022      	beq.n	80030cc <HAL_DMA_Abort_IT+0x9c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_DMA_Abort_IT+0xd8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d01a      	beq.n	80030c6 <HAL_DMA_Abort_IT+0x96>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <HAL_DMA_Abort_IT+0xdc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d012      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x90>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_DMA_Abort_IT+0xe0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00a      	beq.n	80030ba <HAL_DMA_Abort_IT+0x8a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <HAL_DMA_Abort_IT+0xe4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d102      	bne.n	80030b4 <HAL_DMA_Abort_IT+0x84>
 80030ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030b2:	e00e      	b.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 80030b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b8:	e00b      	b.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 80030ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030be:	e008      	b.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 80030c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c4:	e005      	b.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 80030c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ca:	e002      	b.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 80030cc:	2310      	movs	r3, #16
 80030ce:	e000      	b.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 80030d0:	2301      	movs	r3, #1
 80030d2:	4a11      	ldr	r2, [pc, #68]	; (8003118 <HAL_DMA_Abort_IT+0xe8>)
 80030d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
    } 
  }
  return status;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40020008 	.word	0x40020008
 8003104:	4002001c 	.word	0x4002001c
 8003108:	40020030 	.word	0x40020030
 800310c:	40020044 	.word	0x40020044
 8003110:	40020058 	.word	0x40020058
 8003114:	4002006c 	.word	0x4002006c
 8003118:	40020000 	.word	0x40020000

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b08b      	sub	sp, #44	; 0x2c
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	e169      	b.n	8003404 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003130:	2201      	movs	r2, #1
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	429a      	cmp	r2, r3
 800314a:	f040 8158 	bne.w	80033fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a9a      	ldr	r2, [pc, #616]	; (80033bc <HAL_GPIO_Init+0x2a0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d05e      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003158:	4a98      	ldr	r2, [pc, #608]	; (80033bc <HAL_GPIO_Init+0x2a0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d875      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 800315e:	4a98      	ldr	r2, [pc, #608]	; (80033c0 <HAL_GPIO_Init+0x2a4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d058      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003164:	4a96      	ldr	r2, [pc, #600]	; (80033c0 <HAL_GPIO_Init+0x2a4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d86f      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 800316a:	4a96      	ldr	r2, [pc, #600]	; (80033c4 <HAL_GPIO_Init+0x2a8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d052      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003170:	4a94      	ldr	r2, [pc, #592]	; (80033c4 <HAL_GPIO_Init+0x2a8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d869      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 8003176:	4a94      	ldr	r2, [pc, #592]	; (80033c8 <HAL_GPIO_Init+0x2ac>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d04c      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 800317c:	4a92      	ldr	r2, [pc, #584]	; (80033c8 <HAL_GPIO_Init+0x2ac>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d863      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 8003182:	4a92      	ldr	r2, [pc, #584]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d046      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
 8003188:	4a90      	ldr	r2, [pc, #576]	; (80033cc <HAL_GPIO_Init+0x2b0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d85d      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 800318e:	2b12      	cmp	r3, #18
 8003190:	d82a      	bhi.n	80031e8 <HAL_GPIO_Init+0xcc>
 8003192:	2b12      	cmp	r3, #18
 8003194:	d859      	bhi.n	800324a <HAL_GPIO_Init+0x12e>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_GPIO_Init+0x80>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	08003217 	.word	0x08003217
 80031a0:	080031f1 	.word	0x080031f1
 80031a4:	08003203 	.word	0x08003203
 80031a8:	08003245 	.word	0x08003245
 80031ac:	0800324b 	.word	0x0800324b
 80031b0:	0800324b 	.word	0x0800324b
 80031b4:	0800324b 	.word	0x0800324b
 80031b8:	0800324b 	.word	0x0800324b
 80031bc:	0800324b 	.word	0x0800324b
 80031c0:	0800324b 	.word	0x0800324b
 80031c4:	0800324b 	.word	0x0800324b
 80031c8:	0800324b 	.word	0x0800324b
 80031cc:	0800324b 	.word	0x0800324b
 80031d0:	0800324b 	.word	0x0800324b
 80031d4:	0800324b 	.word	0x0800324b
 80031d8:	0800324b 	.word	0x0800324b
 80031dc:	0800324b 	.word	0x0800324b
 80031e0:	080031f9 	.word	0x080031f9
 80031e4:	0800320d 	.word	0x0800320d
 80031e8:	4a79      	ldr	r2, [pc, #484]	; (80033d0 <HAL_GPIO_Init+0x2b4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ee:	e02c      	b.n	800324a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	623b      	str	r3, [r7, #32]
          break;
 80031f6:	e029      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	3304      	adds	r3, #4
 80031fe:	623b      	str	r3, [r7, #32]
          break;
 8003200:	e024      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	3308      	adds	r3, #8
 8003208:	623b      	str	r3, [r7, #32]
          break;
 800320a:	e01f      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	330c      	adds	r3, #12
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	e01a      	b.n	800324c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800321e:	2304      	movs	r3, #4
 8003220:	623b      	str	r3, [r7, #32]
          break;
 8003222:	e013      	b.n	800324c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800322c:	2308      	movs	r3, #8
 800322e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	611a      	str	r2, [r3, #16]
          break;
 8003236:	e009      	b.n	800324c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003238:	2308      	movs	r3, #8
 800323a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	615a      	str	r2, [r3, #20]
          break;
 8003242:	e003      	b.n	800324c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
          break;
 8003248:	e000      	b.n	800324c <HAL_GPIO_Init+0x130>
          break;
 800324a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2bff      	cmp	r3, #255	; 0xff
 8003250:	d801      	bhi.n	8003256 <HAL_GPIO_Init+0x13a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	e001      	b.n	800325a <HAL_GPIO_Init+0x13e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2bff      	cmp	r3, #255	; 0xff
 8003260:	d802      	bhi.n	8003268 <HAL_GPIO_Init+0x14c>
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x152>
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	3b08      	subs	r3, #8
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	210f      	movs	r1, #15
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	401a      	ands	r2, r3
 8003280:	6a39      	ldr	r1, [r7, #32]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	431a      	orrs	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80b1 	beq.w	80033fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800329c:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <HAL_GPIO_Init+0x2b8>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <HAL_GPIO_Init+0x2b8>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_GPIO_Init+0x2b8>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032b4:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_GPIO_Init+0x2bc>)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	220f      	movs	r2, #15
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a40      	ldr	r2, [pc, #256]	; (80033dc <HAL_GPIO_Init+0x2c0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <HAL_GPIO_Init+0x1ec>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3f      	ldr	r2, [pc, #252]	; (80033e0 <HAL_GPIO_Init+0x2c4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00d      	beq.n	8003304 <HAL_GPIO_Init+0x1e8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3e      	ldr	r2, [pc, #248]	; (80033e4 <HAL_GPIO_Init+0x2c8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <HAL_GPIO_Init+0x1e4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3d      	ldr	r2, [pc, #244]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_GPIO_Init+0x1e0>
 80032f8:	2303      	movs	r3, #3
 80032fa:	e006      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e004      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 8003300:	2302      	movs	r3, #2
 8003302:	e002      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_GPIO_Init+0x1ee>
 8003308:	2300      	movs	r3, #0
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	f002 0203 	and.w	r2, r2, #3
 8003310:	0092      	lsls	r2, r2, #2
 8003312:	4093      	lsls	r3, r2
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800331a:	492f      	ldr	r1, [pc, #188]	; (80033d8 <HAL_GPIO_Init+0x2bc>)
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	3302      	adds	r3, #2
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d006      	beq.n	8003342 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	492c      	ldr	r1, [pc, #176]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	43db      	mvns	r3, r3
 800334a:	4928      	ldr	r1, [pc, #160]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800334c:	4013      	ands	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4922      	ldr	r1, [pc, #136]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	43db      	mvns	r3, r3
 8003372:	491e      	ldr	r1, [pc, #120]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003374:	4013      	ands	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4918      	ldr	r1, [pc, #96]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
 8003390:	e006      	b.n	80033a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	43db      	mvns	r3, r3
 800339a:	4914      	ldr	r1, [pc, #80]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 800339c:	4013      	ands	r3, r2
 800339e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d021      	beq.n	80033f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
 80033b8:	e021      	b.n	80033fe <HAL_GPIO_Init+0x2e2>
 80033ba:	bf00      	nop
 80033bc:	10320000 	.word	0x10320000
 80033c0:	10310000 	.word	0x10310000
 80033c4:	10220000 	.word	0x10220000
 80033c8:	10210000 	.word	0x10210000
 80033cc:	10120000 	.word	0x10120000
 80033d0:	10110000 	.word	0x10110000
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40010800 	.word	0x40010800
 80033e0:	40010c00 	.word	0x40010c00
 80033e4:	40011000 	.word	0x40011000
 80033e8:	40011400 	.word	0x40011400
 80033ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_GPIO_Init+0x304>)
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	4909      	ldr	r1, [pc, #36]	; (8003420 <HAL_GPIO_Init+0x304>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	3301      	adds	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	f47f ae8e 	bne.w	8003130 <HAL_GPIO_Init+0x14>
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	372c      	adds	r7, #44	; 0x2c
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	40010400 	.word	0x40010400

08003424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e001      	b.n	8003446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	807b      	strh	r3, [r7, #2]
 800345e:	4613      	mov	r3, r2
 8003460:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003462:	787b      	ldrb	r3, [r7, #1]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800346e:	e003      	b.n	8003478 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	041a      	lsls	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	611a      	str	r2, [r3, #16]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
	...

08003484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f9b8 	bl	8002818 <HAL_GPIO_EXTI_Callback>
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e272      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d00c      	beq.n	80034fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e0:	4b8f      	ldr	r3, [pc, #572]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d112      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
 80034ec:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d10b      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x12c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d168      	bne.n	80035e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e24c      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x76>
 800351c:	4b80      	ldr	r3, [pc, #512]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7f      	ldr	r2, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e02e      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x98>
 8003532:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7a      	ldr	r2, [pc, #488]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a77      	ldr	r2, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0xbc>
 8003556:	4b72      	ldr	r3, [pc, #456]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a71      	ldr	r2, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 8003570:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a67      	ldr	r2, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7ff fbd8 	bl	8002d44 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7ff fbd4 	bl	8002d44 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e200      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xe4>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7ff fbc4 	bl	8002d44 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7ff fbc0 	bl	8002d44 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1ec      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x10c>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ee:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035fa:	4b49      	ldr	r3, [pc, #292]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
 8003606:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b43      	ldr	r3, [pc, #268]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1c0      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4939      	ldr	r1, [pc, #228]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7ff fb79 	bl	8002d44 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7ff fb75 	bl	8002d44 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1a1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4927      	ldr	r1, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7ff fb58 	bl	8002d44 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7ff fb54 	bl	8002d44 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e180      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03a      	beq.n	8003738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7ff fb38 	bl	8002d44 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7ff fb34 	bl	8002d44 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e160      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f000 fad8 	bl	8003cac <RCC_Delay>
 80036fc:	e01c      	b.n	8003738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7ff fb1e 	bl	8002d44 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	e00f      	b.n	800372c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7ff fb1a 	bl	8002d44 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d908      	bls.n	800372c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e146      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	42420000 	.word	0x42420000
 8003728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b92      	ldr	r3, [pc, #584]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e9      	bne.n	800370c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a6 	beq.w	8003892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4a87      	ldr	r2, [pc, #540]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	61d3      	str	r3, [r2, #28]
 8003762:	4b85      	ldr	r3, [pc, #532]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b7f      	ldr	r3, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7e      	ldr	r2, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7ff fadb 	bl	8002d44 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7ff fad7 	bl	8002d44 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e103      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b75      	ldr	r3, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x4c8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x312>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6213      	str	r3, [r2, #32]
 80037c4:	e02d      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x334>
 80037ce:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a69      	ldr	r2, [pc, #420]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b67      	ldr	r3, [pc, #412]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a66      	ldr	r2, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	e01c      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d10c      	bne.n	800380a <HAL_RCC_OscConfig+0x356>
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a60      	ldr	r2, [pc, #384]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6213      	str	r3, [r2, #32]
 8003808:	e00b      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a5a      	ldr	r2, [pc, #360]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a57      	ldr	r2, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d015      	beq.n	8003856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7ff fa8b 	bl	8002d44 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7ff fa87 	bl	8002d44 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0b1      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ee      	beq.n	8003832 <HAL_RCC_OscConfig+0x37e>
 8003854:	e014      	b.n	8003880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7ff fa75 	bl	8002d44 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7ff fa71 	bl	8002d44 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e09b      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	4b40      	ldr	r3, [pc, #256]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ee      	bne.n	800385e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8087 	beq.w	80039aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d061      	beq.n	800396c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d146      	bne.n	800393e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7ff fa45 	bl	8002d44 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7ff fa41 	bl	8002d44 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e06d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d0:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d108      	bne.n	80038f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4921      	ldr	r1, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a19      	ldr	r1, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	491b      	ldr	r1, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7ff fa15 	bl	8002d44 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7ff fa11 	bl	8002d44 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e03d      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x46a>
 800393c:	e035      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x4cc>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7ff f9fe 	bl	8002d44 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7ff f9fa 	bl	8002d44 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e026      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x498>
 800396a:	e01e      	b.n	80039aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e019      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
 8003980:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x500>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	429a      	cmp	r2, r3
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0d0      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4965      	ldr	r1, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d040      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e073      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4936      	ldr	r1, [pc, #216]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7ff f94c 	bl	8002d44 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7ff f948 	bl	8002d44 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e053      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d210      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4922      	ldr	r1, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f821 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1cc>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff f8aa 	bl	8002cc0 <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08009ccc 	.word	0x08009ccc
 8003b84:	20000050 	.word	0x20000050
 8003b88:	20000054 	.word	0x20000054

08003b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b490      	push	{r4, r7}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b92:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b94:	1d3c      	adds	r4, r7, #4
 8003b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b9c:	f240 2301 	movw	r3, #513	; 0x201
 8003ba0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	2300      	movs	r3, #0
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bb6:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x40>
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x46>
 8003bca:	e02b      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bce:	623b      	str	r3, [r7, #32]
      break;
 8003bd0:	e02b      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	0c9b      	lsrs	r3, r3, #18
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3328      	adds	r3, #40	; 0x28
 8003bdc:	443b      	add	r3, r7
 8003bde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003be2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d012      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0c5b      	lsrs	r3, r3, #17
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	3328      	adds	r3, #40	; 0x28
 8003bfa:	443b      	add	r3, r7
 8003bfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c06:	fb03 f202 	mul.w	r2, r3, r2
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	e004      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	623b      	str	r3, [r7, #32]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c26:	623b      	str	r3, [r7, #32]
      break;
 8003c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc90      	pop	{r4, r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	08009cbc 	.word	0x08009cbc
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	007a1200 	.word	0x007a1200
 8003c44:	003d0900 	.word	0x003d0900

08003c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	20000050 	.word	0x20000050

08003c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c60:	f7ff fff2 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4903      	ldr	r1, [pc, #12]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08009cdc 	.word	0x08009cdc

08003c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c88:	f7ff ffde 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	0adb      	lsrs	r3, r3, #11
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08009cdc 	.word	0x08009cdc

08003cac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <RCC_Delay+0x34>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <RCC_Delay+0x38>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0a5b      	lsrs	r3, r3, #9
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cc8:	bf00      	nop
  }
  while (Delay --);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e5a      	subs	r2, r3, #1
 8003cce:	60fa      	str	r2, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f9      	bne.n	8003cc8 <RCC_Delay+0x1c>
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	20000050 	.word	0x20000050
 8003ce4:	10624dd3 	.word	0x10624dd3

08003ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e041      	b.n	8003d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe fdd8 	bl	80028c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 fae8 	bl	80042fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d001      	beq.n	8003da0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e032      	b.n	8003e06 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIM_Base_Start+0x88>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x48>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x48>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_TIM_Base_Start+0x8c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_Base_Start+0x48>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_TIM_Base_Start+0x90>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d111      	bne.n	8003df4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d010      	beq.n	8003e04 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	e007      	b.n	8003e04 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d001      	beq.n	8003e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e03a      	b.n	8003eaa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_TIM_Base_Start_IT+0x98>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x58>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d009      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x58>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x58>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <HAL_TIM_Base_Start_IT+0xa0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d111      	bne.n	8003e98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d010      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e96:	e007      	b.n	8003ea8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800

08003ec0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_TIM_Base_Stop_IT+0x48>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	f240 4344 	movw	r3, #1092	; 0x444
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIM_Base_Stop_IT+0x48>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0202 	mvn.w	r2, #2
 8003f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9b1 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9a4 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f9b3 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0204 	mvn.w	r2, #4
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f987 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f97a 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f989 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d122      	bne.n	8004020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d11b      	bne.n	8004020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0208 	mvn.w	r2, #8
 8003ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f95d 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 800400c:	e005      	b.n	800401a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f950 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f95f 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b10      	cmp	r3, #16
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b10      	cmp	r3, #16
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0210 	mvn.w	r2, #16
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2208      	movs	r2, #8
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f933 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f926 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f935 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10e      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d107      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0201 	mvn.w	r2, #1
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fe fb78 	bl	8002790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b80      	cmp	r3, #128	; 0x80
 80040ac:	d10e      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b80      	cmp	r3, #128	; 0x80
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa77 	bl	80045ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8f9 	bl	80042ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b20      	cmp	r3, #32
 8004104:	d10e      	bne.n	8004124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b20      	cmp	r3, #32
 8004112:	d107      	bne.n	8004124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0220 	mvn.w	r2, #32
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa42 	bl	80045a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIM_ConfigClockSource+0x18>
 8004140:	2302      	movs	r3, #2
 8004142:	e0b3      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x180>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004162:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800416a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417c:	d03e      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0xd0>
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	f200 8087 	bhi.w	8004294 <HAL_TIM_ConfigClockSource+0x168>
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418a:	f000 8085 	beq.w	8004298 <HAL_TIM_ConfigClockSource+0x16c>
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004192:	d87f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
 8004194:	2b70      	cmp	r3, #112	; 0x70
 8004196:	d01a      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0xa2>
 8004198:	2b70      	cmp	r3, #112	; 0x70
 800419a:	d87b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
 800419c:	2b60      	cmp	r3, #96	; 0x60
 800419e:	d050      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x116>
 80041a0:	2b60      	cmp	r3, #96	; 0x60
 80041a2:	d877      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
 80041a4:	2b50      	cmp	r3, #80	; 0x50
 80041a6:	d03c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0xf6>
 80041a8:	2b50      	cmp	r3, #80	; 0x50
 80041aa:	d873      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d058      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x136>
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d86f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
 80041b4:	2b30      	cmp	r3, #48	; 0x30
 80041b6:	d064      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x156>
 80041b8:	2b30      	cmp	r3, #48	; 0x30
 80041ba:	d86b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d060      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x156>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d867      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x156>
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d05a      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041cc:	e062      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6899      	ldr	r1, [r3, #8]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f000 f966 	bl	80044ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
      break;
 80041fa:	e04e      	b.n	800429a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f000 f94f 	bl	80044ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421e:	609a      	str	r2, [r3, #8]
      break;
 8004220:	e03b      	b.n	800429a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	461a      	mov	r2, r3
 8004230:	f000 f8c6 	bl	80043c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2150      	movs	r1, #80	; 0x50
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f91d 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8004240:	e02b      	b.n	800429a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	461a      	mov	r2, r3
 8004250:	f000 f8e4 	bl	800441c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2160      	movs	r1, #96	; 0x60
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f90d 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8004260:	e01b      	b.n	800429a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6859      	ldr	r1, [r3, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	461a      	mov	r2, r3
 8004270:	f000 f8a6 	bl	80043c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f8fd 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8004280:	e00b      	b.n	800429a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 f8f4 	bl	800447a <TIM_ITRx_SetConfig>
        break;
 8004292:	e002      	b.n	800429a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004298:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d007      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a07      	ldr	r2, [pc, #28]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	615a      	str	r2, [r3, #20]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800

080043c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0201 	bic.w	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f023 030a 	bic.w	r3, r3, #10
 80043fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f023 0210 	bic.w	r2, r3, #16
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004446:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	031b      	lsls	r3, r3, #12
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	f043 0307 	orr.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b087      	sub	sp, #28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	021a      	lsls	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	609a      	str	r2, [r3, #8]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e046      	b.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a16      	ldr	r2, [pc, #88]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00e      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004550:	d009      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a12      	ldr	r2, [pc, #72]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10c      	bne.n	8004580 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4313      	orrs	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40000400 	.word	0x40000400
 80045a4:	40000800 	.word	0x40000800

080045a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e03f      	b.n	800465e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fe f9ba 	bl	800296c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2224      	movs	r2, #36	; 0x24
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800460e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fc85 	bl	8004f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08a      	sub	sp, #40	; 0x28
 800466a:	af02      	add	r7, sp, #8
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b20      	cmp	r3, #32
 8004684:	d17c      	bne.n	8004780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_UART_Transmit+0x2c>
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e075      	b.n	8004782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_UART_Transmit+0x3e>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e06e      	b.n	8004782 <HAL_UART_Transmit+0x11c>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2221      	movs	r2, #33	; 0x21
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ba:	f7fe fb43 	bl	8002d44 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	88fa      	ldrh	r2, [r7, #6]
 80046ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d108      	bne.n	80046e8 <HAL_UART_Transmit+0x82>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e003      	b.n	80046f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046f8:	e02a      	b.n	8004750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fa38 	bl	8004b7a <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e036      	b.n	8004782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	3302      	adds	r3, #2
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	e007      	b.n	8004742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	3301      	adds	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1cf      	bne.n	80046fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	2140      	movs	r1, #64	; 0x40
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fa08 	bl	8004b7a <UART_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e006      	b.n	8004782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d11d      	bne.n	80047e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Receive_IT+0x26>
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e016      	b.n	80047e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Receive_IT+0x38>
 80047be:	2302      	movs	r3, #2
 80047c0:	e00f      	b.n	80047e2 <HAL_UART_Receive_IT+0x58>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fa19 	bl	8004c0e <UART_Start_Receive_IT>
 80047dc:	4603      	mov	r3, r0
 80047de:	e000      	b.n	80047e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_UART_IRQHandler+0x52>
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fac9 	bl	8004dce <UART_Receive_IT>
      return;
 800483c:	e17b      	b.n	8004b36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80b1 	beq.w	80049a8 <HAL_UART_IRQHandler+0x1bc>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <HAL_UART_IRQHandler+0x70>
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80a6 	beq.w	80049a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_UART_IRQHandler+0x90>
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_UART_IRQHandler+0xb0>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f043 0202 	orr.w	r2, r3, #2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_UART_IRQHandler+0xd0>
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	f043 0204 	orr.w	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00f      	beq.n	80048e6 <HAL_UART_IRQHandler+0xfa>
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_UART_IRQHandler+0xee>
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f043 0208 	orr.w	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 811e 	beq.w	8004b2c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_UART_IRQHandler+0x11e>
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa62 	bl	8004dce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_UART_IRQHandler+0x146>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d031      	beq.n	8004996 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9a4 	bl	8004c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d023      	beq.n	800498e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004954:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	d013      	beq.n	8004986 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	4a76      	ldr	r2, [pc, #472]	; (8004b3c <HAL_UART_IRQHandler+0x350>)
 8004964:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fb60 	bl	8003030 <HAL_DMA_Abort_IT>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e00e      	b.n	80049a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8e3 	bl	8004b52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e00a      	b.n	80049a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8df 	bl	8004b52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e006      	b.n	80049a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8db 	bl	8004b52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049a2:	e0c3      	b.n	8004b2c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	bf00      	nop
    return;
 80049a6:	e0c1      	b.n	8004b2c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	f040 80a1 	bne.w	8004af4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 809b 	beq.w	8004af4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8095 	beq.w	8004af4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d04e      	beq.n	8004a8c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80049f8:	8a3b      	ldrh	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8098 	beq.w	8004b30 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a04:	8a3a      	ldrh	r2, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	f080 8092 	bcs.w	8004b30 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8a3a      	ldrh	r2, [r7, #16]
 8004a10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d02b      	beq.n	8004a74 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0210 	bic.w	r2, r2, #16
 8004a68:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe faa3 	bl	8002fba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f86d 	bl	8004b64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a8a:	e051      	b.n	8004b30 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d047      	beq.n	8004b34 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004aa4:	8a7b      	ldrh	r3, [r7, #18]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d044      	beq.n	8004b34 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ab8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0210 	bic.w	r2, r2, #16
 8004ae6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ae8:	8a7b      	ldrh	r3, [r7, #18]
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f839 	bl	8004b64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004af2:	e01f      	b.n	8004b34 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_UART_IRQHandler+0x324>
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8f9 	bl	8004d00 <UART_Transmit_IT>
    return;
 8004b0e:	e012      	b.n	8004b36 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <HAL_UART_IRQHandler+0x34a>
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f93a 	bl	8004d9e <UART_EndTransmit_IT>
    return;
 8004b2a:	e004      	b.n	8004b36 <HAL_UART_IRQHandler+0x34a>
    return;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b34:	bf00      	nop
  }
}
 8004b36:	3728      	adds	r7, #40	; 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	08004cd9 	.word	0x08004cd9

08004b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8a:	e02c      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d028      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9a:	f7fe f8d3 	bl	8002d44 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d21d      	bcs.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bb8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e00f      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d0c3      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2222      	movs	r2, #34	; 0x22
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c52:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d107      	bne.n	8004cc0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0210 	bic.w	r2, r2, #16
 8004cbe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff ff2d 	bl	8004b52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b21      	cmp	r3, #33	; 0x21
 8004d12:	d13e      	bne.n	8004d92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1c:	d114      	bne.n	8004d48 <UART_Transmit_IT+0x48>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d110      	bne.n	8004d48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	621a      	str	r2, [r3, #32]
 8004d46:	e008      	b.n	8004d5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	1c59      	adds	r1, r3, #1
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6211      	str	r1, [r2, #32]
 8004d52:	781a      	ldrb	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	4619      	mov	r1, r3
 8004d68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff febe 	bl	8004b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b22      	cmp	r3, #34	; 0x22
 8004de0:	f040 8099 	bne.w	8004f16 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d117      	bne.n	8004e1e <UART_Receive_IT+0x50>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d113      	bne.n	8004e1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	1c9a      	adds	r2, r3, #2
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1c:	e026      	b.n	8004e6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e30:	d007      	beq.n	8004e42 <UART_Receive_IT+0x74>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <UART_Receive_IT+0x82>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e008      	b.n	8004e62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d148      	bne.n	8004f12 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0220 	bic.w	r2, r2, #32
 8004e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d123      	bne.n	8004f08 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0210 	bic.w	r2, r2, #16
 8004ed4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d10a      	bne.n	8004efa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff fe2f 	bl	8004b64 <HAL_UARTEx_RxEventCallback>
 8004f06:	e002      	b.n	8004f0e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fd fc99 	bl	8002840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e002      	b.n	8004f18 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f5a:	f023 030c 	bic.w	r3, r3, #12
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2c      	ldr	r2, [pc, #176]	; (8005034 <UART_SetConfig+0x114>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f88:	f7fe fe7c 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	e002      	b.n	8004f96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fe fe64 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8004f94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <UART_SetConfig+0x118>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	0119      	lsls	r1, r3, #4
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009a      	lsls	r2, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <UART_SetConfig+0x118>)
 8004fce:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2064      	movs	r0, #100	; 0x64
 8004fd6:	fb00 f303 	mul.w	r3, r0, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	3332      	adds	r3, #50	; 0x32
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <UART_SetConfig+0x118>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fec:	4419      	add	r1, r3
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009a      	lsls	r2, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	fbb2 f2f3 	udiv	r2, r2, r3
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <UART_SetConfig+0x118>)
 8005006:	fba3 0302 	umull	r0, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2064      	movs	r0, #100	; 0x64
 800500e:	fb00 f303 	mul.w	r3, r0, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	3332      	adds	r3, #50	; 0x32
 8005018:	4a07      	ldr	r2, [pc, #28]	; (8005038 <UART_SetConfig+0x118>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	f003 020f 	and.w	r2, r3, #15
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	440a      	add	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40013800 	.word	0x40013800
 8005038:	51eb851f 	.word	0x51eb851f

0800503c <atoi>:
 800503c:	220a      	movs	r2, #10
 800503e:	2100      	movs	r1, #0
 8005040:	f001 bdf2 	b.w	8006c28 <strtol>

08005044 <__errno>:
 8005044:	4b01      	ldr	r3, [pc, #4]	; (800504c <__errno+0x8>)
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	2000005c 	.word	0x2000005c

08005050 <__libc_init_array>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	2600      	movs	r6, #0
 8005054:	4d0c      	ldr	r5, [pc, #48]	; (8005088 <__libc_init_array+0x38>)
 8005056:	4c0d      	ldr	r4, [pc, #52]	; (800508c <__libc_init_array+0x3c>)
 8005058:	1b64      	subs	r4, r4, r5
 800505a:	10a4      	asrs	r4, r4, #2
 800505c:	42a6      	cmp	r6, r4
 800505e:	d109      	bne.n	8005074 <__libc_init_array+0x24>
 8005060:	f004 fcfc 	bl	8009a5c <_init>
 8005064:	2600      	movs	r6, #0
 8005066:	4d0a      	ldr	r5, [pc, #40]	; (8005090 <__libc_init_array+0x40>)
 8005068:	4c0a      	ldr	r4, [pc, #40]	; (8005094 <__libc_init_array+0x44>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	42a6      	cmp	r6, r4
 8005070:	d105      	bne.n	800507e <__libc_init_array+0x2e>
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	f855 3b04 	ldr.w	r3, [r5], #4
 8005078:	4798      	blx	r3
 800507a:	3601      	adds	r6, #1
 800507c:	e7ee      	b.n	800505c <__libc_init_array+0xc>
 800507e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005082:	4798      	blx	r3
 8005084:	3601      	adds	r6, #1
 8005086:	e7f2      	b.n	800506e <__libc_init_array+0x1e>
 8005088:	0800a194 	.word	0x0800a194
 800508c:	0800a194 	.word	0x0800a194
 8005090:	0800a194 	.word	0x0800a194
 8005094:	0800a198 	.word	0x0800a198

08005098 <memset>:
 8005098:	4603      	mov	r3, r0
 800509a:	4402      	add	r2, r0
 800509c:	4293      	cmp	r3, r2
 800509e:	d100      	bne.n	80050a2 <memset+0xa>
 80050a0:	4770      	bx	lr
 80050a2:	f803 1b01 	strb.w	r1, [r3], #1
 80050a6:	e7f9      	b.n	800509c <memset+0x4>

080050a8 <__cvt>:
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ae:	461f      	mov	r7, r3
 80050b0:	bfbb      	ittet	lt
 80050b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80050b6:	461f      	movlt	r7, r3
 80050b8:	2300      	movge	r3, #0
 80050ba:	232d      	movlt	r3, #45	; 0x2d
 80050bc:	b088      	sub	sp, #32
 80050be:	4614      	mov	r4, r2
 80050c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050c4:	7013      	strb	r3, [r2, #0]
 80050c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050cc:	f023 0820 	bic.w	r8, r3, #32
 80050d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050d4:	d005      	beq.n	80050e2 <__cvt+0x3a>
 80050d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050da:	d100      	bne.n	80050de <__cvt+0x36>
 80050dc:	3501      	adds	r5, #1
 80050de:	2302      	movs	r3, #2
 80050e0:	e000      	b.n	80050e4 <__cvt+0x3c>
 80050e2:	2303      	movs	r3, #3
 80050e4:	aa07      	add	r2, sp, #28
 80050e6:	9204      	str	r2, [sp, #16]
 80050e8:	aa06      	add	r2, sp, #24
 80050ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050ee:	e9cd 3500 	strd	r3, r5, [sp]
 80050f2:	4622      	mov	r2, r4
 80050f4:	463b      	mov	r3, r7
 80050f6:	f001 feef 	bl	8006ed8 <_dtoa_r>
 80050fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050fe:	4606      	mov	r6, r0
 8005100:	d102      	bne.n	8005108 <__cvt+0x60>
 8005102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005104:	07db      	lsls	r3, r3, #31
 8005106:	d522      	bpl.n	800514e <__cvt+0xa6>
 8005108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800510c:	eb06 0905 	add.w	r9, r6, r5
 8005110:	d110      	bne.n	8005134 <__cvt+0x8c>
 8005112:	7833      	ldrb	r3, [r6, #0]
 8005114:	2b30      	cmp	r3, #48	; 0x30
 8005116:	d10a      	bne.n	800512e <__cvt+0x86>
 8005118:	2200      	movs	r2, #0
 800511a:	2300      	movs	r3, #0
 800511c:	4620      	mov	r0, r4
 800511e:	4639      	mov	r1, r7
 8005120:	f7fb fc4c 	bl	80009bc <__aeabi_dcmpeq>
 8005124:	b918      	cbnz	r0, 800512e <__cvt+0x86>
 8005126:	f1c5 0501 	rsb	r5, r5, #1
 800512a:	f8ca 5000 	str.w	r5, [sl]
 800512e:	f8da 3000 	ldr.w	r3, [sl]
 8005132:	4499      	add	r9, r3
 8005134:	2200      	movs	r2, #0
 8005136:	2300      	movs	r3, #0
 8005138:	4620      	mov	r0, r4
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb fc3e 	bl	80009bc <__aeabi_dcmpeq>
 8005140:	b108      	cbz	r0, 8005146 <__cvt+0x9e>
 8005142:	f8cd 901c 	str.w	r9, [sp, #28]
 8005146:	2230      	movs	r2, #48	; 0x30
 8005148:	9b07      	ldr	r3, [sp, #28]
 800514a:	454b      	cmp	r3, r9
 800514c:	d307      	bcc.n	800515e <__cvt+0xb6>
 800514e:	4630      	mov	r0, r6
 8005150:	9b07      	ldr	r3, [sp, #28]
 8005152:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005154:	1b9b      	subs	r3, r3, r6
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	b008      	add	sp, #32
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	9107      	str	r1, [sp, #28]
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e7f0      	b.n	8005148 <__cvt+0xa0>

08005166 <__exponent>:
 8005166:	4603      	mov	r3, r0
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	2900      	cmp	r1, #0
 800516c:	f803 2b02 	strb.w	r2, [r3], #2
 8005170:	bfb6      	itet	lt
 8005172:	222d      	movlt	r2, #45	; 0x2d
 8005174:	222b      	movge	r2, #43	; 0x2b
 8005176:	4249      	neglt	r1, r1
 8005178:	2909      	cmp	r1, #9
 800517a:	7042      	strb	r2, [r0, #1]
 800517c:	dd2b      	ble.n	80051d6 <__exponent+0x70>
 800517e:	f10d 0407 	add.w	r4, sp, #7
 8005182:	46a4      	mov	ip, r4
 8005184:	270a      	movs	r7, #10
 8005186:	fb91 f6f7 	sdiv	r6, r1, r7
 800518a:	460a      	mov	r2, r1
 800518c:	46a6      	mov	lr, r4
 800518e:	fb07 1516 	mls	r5, r7, r6, r1
 8005192:	2a63      	cmp	r2, #99	; 0x63
 8005194:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005198:	4631      	mov	r1, r6
 800519a:	f104 34ff 	add.w	r4, r4, #4294967295
 800519e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051a2:	dcf0      	bgt.n	8005186 <__exponent+0x20>
 80051a4:	3130      	adds	r1, #48	; 0x30
 80051a6:	f1ae 0502 	sub.w	r5, lr, #2
 80051aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051ae:	4629      	mov	r1, r5
 80051b0:	1c44      	adds	r4, r0, #1
 80051b2:	4561      	cmp	r1, ip
 80051b4:	d30a      	bcc.n	80051cc <__exponent+0x66>
 80051b6:	f10d 0209 	add.w	r2, sp, #9
 80051ba:	eba2 020e 	sub.w	r2, r2, lr
 80051be:	4565      	cmp	r5, ip
 80051c0:	bf88      	it	hi
 80051c2:	2200      	movhi	r2, #0
 80051c4:	4413      	add	r3, r2
 80051c6:	1a18      	subs	r0, r3, r0
 80051c8:	b003      	add	sp, #12
 80051ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051d4:	e7ed      	b.n	80051b2 <__exponent+0x4c>
 80051d6:	2330      	movs	r3, #48	; 0x30
 80051d8:	3130      	adds	r1, #48	; 0x30
 80051da:	7083      	strb	r3, [r0, #2]
 80051dc:	70c1      	strb	r1, [r0, #3]
 80051de:	1d03      	adds	r3, r0, #4
 80051e0:	e7f1      	b.n	80051c6 <__exponent+0x60>
	...

080051e4 <_printf_float>:
 80051e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	b091      	sub	sp, #68	; 0x44
 80051ea:	460c      	mov	r4, r1
 80051ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051f0:	4616      	mov	r6, r2
 80051f2:	461f      	mov	r7, r3
 80051f4:	4605      	mov	r5, r0
 80051f6:	f003 f977 	bl	80084e8 <_localeconv_r>
 80051fa:	6803      	ldr	r3, [r0, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005200:	f7fa ffb0 	bl	8000164 <strlen>
 8005204:	2300      	movs	r3, #0
 8005206:	930e      	str	r3, [sp, #56]	; 0x38
 8005208:	f8d8 3000 	ldr.w	r3, [r8]
 800520c:	900a      	str	r0, [sp, #40]	; 0x28
 800520e:	3307      	adds	r3, #7
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	f103 0208 	add.w	r2, r3, #8
 8005218:	f894 9018 	ldrb.w	r9, [r4, #24]
 800521c:	f8d4 b000 	ldr.w	fp, [r4]
 8005220:	f8c8 2000 	str.w	r2, [r8]
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800522c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005230:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005234:	930b      	str	r3, [sp, #44]	; 0x2c
 8005236:	f04f 32ff 	mov.w	r2, #4294967295
 800523a:	4640      	mov	r0, r8
 800523c:	4b9c      	ldr	r3, [pc, #624]	; (80054b0 <_printf_float+0x2cc>)
 800523e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005240:	f7fb fbee 	bl	8000a20 <__aeabi_dcmpun>
 8005244:	bb70      	cbnz	r0, 80052a4 <_printf_float+0xc0>
 8005246:	f04f 32ff 	mov.w	r2, #4294967295
 800524a:	4640      	mov	r0, r8
 800524c:	4b98      	ldr	r3, [pc, #608]	; (80054b0 <_printf_float+0x2cc>)
 800524e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005250:	f7fb fbc8 	bl	80009e4 <__aeabi_dcmple>
 8005254:	bb30      	cbnz	r0, 80052a4 <_printf_float+0xc0>
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	4640      	mov	r0, r8
 800525c:	4651      	mov	r1, sl
 800525e:	f7fb fbb7 	bl	80009d0 <__aeabi_dcmplt>
 8005262:	b110      	cbz	r0, 800526a <_printf_float+0x86>
 8005264:	232d      	movs	r3, #45	; 0x2d
 8005266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526a:	4b92      	ldr	r3, [pc, #584]	; (80054b4 <_printf_float+0x2d0>)
 800526c:	4892      	ldr	r0, [pc, #584]	; (80054b8 <_printf_float+0x2d4>)
 800526e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005272:	bf94      	ite	ls
 8005274:	4698      	movls	r8, r3
 8005276:	4680      	movhi	r8, r0
 8005278:	2303      	movs	r3, #3
 800527a:	f04f 0a00 	mov.w	sl, #0
 800527e:	6123      	str	r3, [r4, #16]
 8005280:	f02b 0304 	bic.w	r3, fp, #4
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	4633      	mov	r3, r6
 8005288:	4621      	mov	r1, r4
 800528a:	4628      	mov	r0, r5
 800528c:	9700      	str	r7, [sp, #0]
 800528e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005290:	f000 f9d4 	bl	800563c <_printf_common>
 8005294:	3001      	adds	r0, #1
 8005296:	f040 8090 	bne.w	80053ba <_printf_float+0x1d6>
 800529a:	f04f 30ff 	mov.w	r0, #4294967295
 800529e:	b011      	add	sp, #68	; 0x44
 80052a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a4:	4642      	mov	r2, r8
 80052a6:	4653      	mov	r3, sl
 80052a8:	4640      	mov	r0, r8
 80052aa:	4651      	mov	r1, sl
 80052ac:	f7fb fbb8 	bl	8000a20 <__aeabi_dcmpun>
 80052b0:	b148      	cbz	r0, 80052c6 <_printf_float+0xe2>
 80052b2:	f1ba 0f00 	cmp.w	sl, #0
 80052b6:	bfb8      	it	lt
 80052b8:	232d      	movlt	r3, #45	; 0x2d
 80052ba:	4880      	ldr	r0, [pc, #512]	; (80054bc <_printf_float+0x2d8>)
 80052bc:	bfb8      	it	lt
 80052be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052c2:	4b7f      	ldr	r3, [pc, #508]	; (80054c0 <_printf_float+0x2dc>)
 80052c4:	e7d3      	b.n	800526e <_printf_float+0x8a>
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	d142      	bne.n	8005356 <_printf_float+0x172>
 80052d0:	2306      	movs	r3, #6
 80052d2:	6063      	str	r3, [r4, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	9206      	str	r2, [sp, #24]
 80052d8:	aa0e      	add	r2, sp, #56	; 0x38
 80052da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052de:	aa0d      	add	r2, sp, #52	; 0x34
 80052e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052e4:	9203      	str	r2, [sp, #12]
 80052e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	4642      	mov	r2, r8
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	4628      	mov	r0, r5
 80052f8:	4653      	mov	r3, sl
 80052fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80052fc:	f7ff fed4 	bl	80050a8 <__cvt>
 8005300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005302:	4680      	mov	r8, r0
 8005304:	2947      	cmp	r1, #71	; 0x47
 8005306:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005308:	d108      	bne.n	800531c <_printf_float+0x138>
 800530a:	1cc8      	adds	r0, r1, #3
 800530c:	db02      	blt.n	8005314 <_printf_float+0x130>
 800530e:	6863      	ldr	r3, [r4, #4]
 8005310:	4299      	cmp	r1, r3
 8005312:	dd40      	ble.n	8005396 <_printf_float+0x1b2>
 8005314:	f1a9 0902 	sub.w	r9, r9, #2
 8005318:	fa5f f989 	uxtb.w	r9, r9
 800531c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005320:	d81f      	bhi.n	8005362 <_printf_float+0x17e>
 8005322:	464a      	mov	r2, r9
 8005324:	3901      	subs	r1, #1
 8005326:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800532a:	910d      	str	r1, [sp, #52]	; 0x34
 800532c:	f7ff ff1b 	bl	8005166 <__exponent>
 8005330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005332:	4682      	mov	sl, r0
 8005334:	1813      	adds	r3, r2, r0
 8005336:	2a01      	cmp	r2, #1
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	dc02      	bgt.n	8005342 <_printf_float+0x15e>
 800533c:	6822      	ldr	r2, [r4, #0]
 800533e:	07d2      	lsls	r2, r2, #31
 8005340:	d501      	bpl.n	8005346 <_printf_float+0x162>
 8005342:	3301      	adds	r3, #1
 8005344:	6123      	str	r3, [r4, #16]
 8005346:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800534a:	2b00      	cmp	r3, #0
 800534c:	d09b      	beq.n	8005286 <_printf_float+0xa2>
 800534e:	232d      	movs	r3, #45	; 0x2d
 8005350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005354:	e797      	b.n	8005286 <_printf_float+0xa2>
 8005356:	2947      	cmp	r1, #71	; 0x47
 8005358:	d1bc      	bne.n	80052d4 <_printf_float+0xf0>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ba      	bne.n	80052d4 <_printf_float+0xf0>
 800535e:	2301      	movs	r3, #1
 8005360:	e7b7      	b.n	80052d2 <_printf_float+0xee>
 8005362:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005366:	d118      	bne.n	800539a <_printf_float+0x1b6>
 8005368:	2900      	cmp	r1, #0
 800536a:	6863      	ldr	r3, [r4, #4]
 800536c:	dd0b      	ble.n	8005386 <_printf_float+0x1a2>
 800536e:	6121      	str	r1, [r4, #16]
 8005370:	b913      	cbnz	r3, 8005378 <_printf_float+0x194>
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	07d0      	lsls	r0, r2, #31
 8005376:	d502      	bpl.n	800537e <_printf_float+0x19a>
 8005378:	3301      	adds	r3, #1
 800537a:	440b      	add	r3, r1
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	f04f 0a00 	mov.w	sl, #0
 8005382:	65a1      	str	r1, [r4, #88]	; 0x58
 8005384:	e7df      	b.n	8005346 <_printf_float+0x162>
 8005386:	b913      	cbnz	r3, 800538e <_printf_float+0x1aa>
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	07d2      	lsls	r2, r2, #31
 800538c:	d501      	bpl.n	8005392 <_printf_float+0x1ae>
 800538e:	3302      	adds	r3, #2
 8005390:	e7f4      	b.n	800537c <_printf_float+0x198>
 8005392:	2301      	movs	r3, #1
 8005394:	e7f2      	b.n	800537c <_printf_float+0x198>
 8005396:	f04f 0967 	mov.w	r9, #103	; 0x67
 800539a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800539c:	4299      	cmp	r1, r3
 800539e:	db05      	blt.n	80053ac <_printf_float+0x1c8>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	6121      	str	r1, [r4, #16]
 80053a4:	07d8      	lsls	r0, r3, #31
 80053a6:	d5ea      	bpl.n	800537e <_printf_float+0x19a>
 80053a8:	1c4b      	adds	r3, r1, #1
 80053aa:	e7e7      	b.n	800537c <_printf_float+0x198>
 80053ac:	2900      	cmp	r1, #0
 80053ae:	bfcc      	ite	gt
 80053b0:	2201      	movgt	r2, #1
 80053b2:	f1c1 0202 	rsble	r2, r1, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	e7e0      	b.n	800537c <_printf_float+0x198>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	055a      	lsls	r2, r3, #21
 80053be:	d407      	bmi.n	80053d0 <_printf_float+0x1ec>
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	4642      	mov	r2, r8
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	d12b      	bne.n	8005426 <_printf_float+0x242>
 80053ce:	e764      	b.n	800529a <_printf_float+0xb6>
 80053d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053d4:	f240 80dd 	bls.w	8005592 <_printf_float+0x3ae>
 80053d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	f7fb faec 	bl	80009bc <__aeabi_dcmpeq>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d033      	beq.n	8005450 <_printf_float+0x26c>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	4a35      	ldr	r2, [pc, #212]	; (80054c4 <_printf_float+0x2e0>)
 80053f0:	47b8      	blx	r7
 80053f2:	3001      	adds	r0, #1
 80053f4:	f43f af51 	beq.w	800529a <_printf_float+0xb6>
 80053f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053fc:	429a      	cmp	r2, r3
 80053fe:	db02      	blt.n	8005406 <_printf_float+0x222>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	07d8      	lsls	r0, r3, #31
 8005404:	d50f      	bpl.n	8005426 <_printf_float+0x242>
 8005406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f af42 	beq.w	800529a <_printf_float+0xb6>
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	f104 091a 	add.w	r9, r4, #26
 800541e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005420:	3b01      	subs	r3, #1
 8005422:	4543      	cmp	r3, r8
 8005424:	dc09      	bgt.n	800543a <_printf_float+0x256>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	079b      	lsls	r3, r3, #30
 800542a:	f100 8102 	bmi.w	8005632 <_printf_float+0x44e>
 800542e:	68e0      	ldr	r0, [r4, #12]
 8005430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005432:	4298      	cmp	r0, r3
 8005434:	bfb8      	it	lt
 8005436:	4618      	movlt	r0, r3
 8005438:	e731      	b.n	800529e <_printf_float+0xba>
 800543a:	2301      	movs	r3, #1
 800543c:	464a      	mov	r2, r9
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	f43f af28 	beq.w	800529a <_printf_float+0xb6>
 800544a:	f108 0801 	add.w	r8, r8, #1
 800544e:	e7e6      	b.n	800541e <_printf_float+0x23a>
 8005450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005452:	2b00      	cmp	r3, #0
 8005454:	dc38      	bgt.n	80054c8 <_printf_float+0x2e4>
 8005456:	2301      	movs	r3, #1
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <_printf_float+0x2e0>)
 800545e:	47b8      	blx	r7
 8005460:	3001      	adds	r0, #1
 8005462:	f43f af1a 	beq.w	800529a <_printf_float+0xb6>
 8005466:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800546a:	4313      	orrs	r3, r2
 800546c:	d102      	bne.n	8005474 <_printf_float+0x290>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	07d9      	lsls	r1, r3, #31
 8005472:	d5d8      	bpl.n	8005426 <_printf_float+0x242>
 8005474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f af0b 	beq.w	800529a <_printf_float+0xb6>
 8005484:	f04f 0900 	mov.w	r9, #0
 8005488:	f104 0a1a 	add.w	sl, r4, #26
 800548c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800548e:	425b      	negs	r3, r3
 8005490:	454b      	cmp	r3, r9
 8005492:	dc01      	bgt.n	8005498 <_printf_float+0x2b4>
 8005494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005496:	e794      	b.n	80053c2 <_printf_float+0x1de>
 8005498:	2301      	movs	r3, #1
 800549a:	4652      	mov	r2, sl
 800549c:	4631      	mov	r1, r6
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	f43f aef9 	beq.w	800529a <_printf_float+0xb6>
 80054a8:	f109 0901 	add.w	r9, r9, #1
 80054ac:	e7ee      	b.n	800548c <_printf_float+0x2a8>
 80054ae:	bf00      	nop
 80054b0:	7fefffff 	.word	0x7fefffff
 80054b4:	08009ce8 	.word	0x08009ce8
 80054b8:	08009cec 	.word	0x08009cec
 80054bc:	08009cf4 	.word	0x08009cf4
 80054c0:	08009cf0 	.word	0x08009cf0
 80054c4:	08009cf8 	.word	0x08009cf8
 80054c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054cc:	429a      	cmp	r2, r3
 80054ce:	bfa8      	it	ge
 80054d0:	461a      	movge	r2, r3
 80054d2:	2a00      	cmp	r2, #0
 80054d4:	4691      	mov	r9, r2
 80054d6:	dc37      	bgt.n	8005548 <_printf_float+0x364>
 80054d8:	f04f 0b00 	mov.w	fp, #0
 80054dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054e0:	f104 021a 	add.w	r2, r4, #26
 80054e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054e8:	ebaa 0309 	sub.w	r3, sl, r9
 80054ec:	455b      	cmp	r3, fp
 80054ee:	dc33      	bgt.n	8005558 <_printf_float+0x374>
 80054f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054f4:	429a      	cmp	r2, r3
 80054f6:	db3b      	blt.n	8005570 <_printf_float+0x38c>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	07da      	lsls	r2, r3, #31
 80054fc:	d438      	bmi.n	8005570 <_printf_float+0x38c>
 80054fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005500:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005502:	eba3 020a 	sub.w	r2, r3, sl
 8005506:	eba3 0901 	sub.w	r9, r3, r1
 800550a:	4591      	cmp	r9, r2
 800550c:	bfa8      	it	ge
 800550e:	4691      	movge	r9, r2
 8005510:	f1b9 0f00 	cmp.w	r9, #0
 8005514:	dc34      	bgt.n	8005580 <_printf_float+0x39c>
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800551e:	f104 0a1a 	add.w	sl, r4, #26
 8005522:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	eba3 0309 	sub.w	r3, r3, r9
 800552c:	4543      	cmp	r3, r8
 800552e:	f77f af7a 	ble.w	8005426 <_printf_float+0x242>
 8005532:	2301      	movs	r3, #1
 8005534:	4652      	mov	r2, sl
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	f43f aeac 	beq.w	800529a <_printf_float+0xb6>
 8005542:	f108 0801 	add.w	r8, r8, #1
 8005546:	e7ec      	b.n	8005522 <_printf_float+0x33e>
 8005548:	4613      	mov	r3, r2
 800554a:	4631      	mov	r1, r6
 800554c:	4642      	mov	r2, r8
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	d1c0      	bne.n	80054d8 <_printf_float+0x2f4>
 8005556:	e6a0      	b.n	800529a <_printf_float+0xb6>
 8005558:	2301      	movs	r3, #1
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f ae99 	beq.w	800529a <_printf_float+0xb6>
 8005568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800556a:	f10b 0b01 	add.w	fp, fp, #1
 800556e:	e7b9      	b.n	80054e4 <_printf_float+0x300>
 8005570:	4631      	mov	r1, r6
 8005572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	d1bf      	bne.n	80054fe <_printf_float+0x31a>
 800557e:	e68c      	b.n	800529a <_printf_float+0xb6>
 8005580:	464b      	mov	r3, r9
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	eb08 020a 	add.w	r2, r8, sl
 800558a:	47b8      	blx	r7
 800558c:	3001      	adds	r0, #1
 800558e:	d1c2      	bne.n	8005516 <_printf_float+0x332>
 8005590:	e683      	b.n	800529a <_printf_float+0xb6>
 8005592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005594:	2a01      	cmp	r2, #1
 8005596:	dc01      	bgt.n	800559c <_printf_float+0x3b8>
 8005598:	07db      	lsls	r3, r3, #31
 800559a:	d537      	bpl.n	800560c <_printf_float+0x428>
 800559c:	2301      	movs	r3, #1
 800559e:	4642      	mov	r2, r8
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f ae77 	beq.w	800529a <_printf_float+0xb6>
 80055ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f ae6f 	beq.w	800529a <_printf_float+0xb6>
 80055bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055c0:	2200      	movs	r2, #0
 80055c2:	2300      	movs	r3, #0
 80055c4:	f7fb f9fa 	bl	80009bc <__aeabi_dcmpeq>
 80055c8:	b9d8      	cbnz	r0, 8005602 <_printf_float+0x41e>
 80055ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055cc:	f108 0201 	add.w	r2, r8, #1
 80055d0:	3b01      	subs	r3, #1
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	d10e      	bne.n	80055fa <_printf_float+0x416>
 80055dc:	e65d      	b.n	800529a <_printf_float+0xb6>
 80055de:	2301      	movs	r3, #1
 80055e0:	464a      	mov	r2, r9
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f ae56 	beq.w	800529a <_printf_float+0xb6>
 80055ee:	f108 0801 	add.w	r8, r8, #1
 80055f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055f4:	3b01      	subs	r3, #1
 80055f6:	4543      	cmp	r3, r8
 80055f8:	dcf1      	bgt.n	80055de <_printf_float+0x3fa>
 80055fa:	4653      	mov	r3, sl
 80055fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005600:	e6e0      	b.n	80053c4 <_printf_float+0x1e0>
 8005602:	f04f 0800 	mov.w	r8, #0
 8005606:	f104 091a 	add.w	r9, r4, #26
 800560a:	e7f2      	b.n	80055f2 <_printf_float+0x40e>
 800560c:	2301      	movs	r3, #1
 800560e:	4642      	mov	r2, r8
 8005610:	e7df      	b.n	80055d2 <_printf_float+0x3ee>
 8005612:	2301      	movs	r3, #1
 8005614:	464a      	mov	r2, r9
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	f43f ae3c 	beq.w	800529a <_printf_float+0xb6>
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	68e3      	ldr	r3, [r4, #12]
 8005628:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800562a:	1a5b      	subs	r3, r3, r1
 800562c:	4543      	cmp	r3, r8
 800562e:	dcf0      	bgt.n	8005612 <_printf_float+0x42e>
 8005630:	e6fd      	b.n	800542e <_printf_float+0x24a>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	f104 0919 	add.w	r9, r4, #25
 800563a:	e7f4      	b.n	8005626 <_printf_float+0x442>

0800563c <_printf_common>:
 800563c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005640:	4616      	mov	r6, r2
 8005642:	4699      	mov	r9, r3
 8005644:	688a      	ldr	r2, [r1, #8]
 8005646:	690b      	ldr	r3, [r1, #16]
 8005648:	4607      	mov	r7, r0
 800564a:	4293      	cmp	r3, r2
 800564c:	bfb8      	it	lt
 800564e:	4613      	movlt	r3, r2
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005656:	460c      	mov	r4, r1
 8005658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800565c:	b10a      	cbz	r2, 8005662 <_printf_common+0x26>
 800565e:	3301      	adds	r3, #1
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	0699      	lsls	r1, r3, #26
 8005666:	bf42      	ittt	mi
 8005668:	6833      	ldrmi	r3, [r6, #0]
 800566a:	3302      	addmi	r3, #2
 800566c:	6033      	strmi	r3, [r6, #0]
 800566e:	6825      	ldr	r5, [r4, #0]
 8005670:	f015 0506 	ands.w	r5, r5, #6
 8005674:	d106      	bne.n	8005684 <_printf_common+0x48>
 8005676:	f104 0a19 	add.w	sl, r4, #25
 800567a:	68e3      	ldr	r3, [r4, #12]
 800567c:	6832      	ldr	r2, [r6, #0]
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	42ab      	cmp	r3, r5
 8005682:	dc28      	bgt.n	80056d6 <_printf_common+0x9a>
 8005684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005688:	1e13      	subs	r3, r2, #0
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	bf18      	it	ne
 800568e:	2301      	movne	r3, #1
 8005690:	0692      	lsls	r2, r2, #26
 8005692:	d42d      	bmi.n	80056f0 <_printf_common+0xb4>
 8005694:	4649      	mov	r1, r9
 8005696:	4638      	mov	r0, r7
 8005698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800569c:	47c0      	blx	r8
 800569e:	3001      	adds	r0, #1
 80056a0:	d020      	beq.n	80056e4 <_printf_common+0xa8>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	68e5      	ldr	r5, [r4, #12]
 80056a6:	f003 0306 	and.w	r3, r3, #6
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	bf18      	it	ne
 80056ae:	2500      	movne	r5, #0
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	f04f 0600 	mov.w	r6, #0
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	bf08      	it	eq
 80056ba:	1aad      	subeq	r5, r5, r2
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	bf08      	it	eq
 80056c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c4:	4293      	cmp	r3, r2
 80056c6:	bfc4      	itt	gt
 80056c8:	1a9b      	subgt	r3, r3, r2
 80056ca:	18ed      	addgt	r5, r5, r3
 80056cc:	341a      	adds	r4, #26
 80056ce:	42b5      	cmp	r5, r6
 80056d0:	d11a      	bne.n	8005708 <_printf_common+0xcc>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e008      	b.n	80056e8 <_printf_common+0xac>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4652      	mov	r2, sl
 80056da:	4649      	mov	r1, r9
 80056dc:	4638      	mov	r0, r7
 80056de:	47c0      	blx	r8
 80056e0:	3001      	adds	r0, #1
 80056e2:	d103      	bne.n	80056ec <_printf_common+0xb0>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	3501      	adds	r5, #1
 80056ee:	e7c4      	b.n	800567a <_printf_common+0x3e>
 80056f0:	2030      	movs	r0, #48	; 0x30
 80056f2:	18e1      	adds	r1, r4, r3
 80056f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056fe:	4422      	add	r2, r4
 8005700:	3302      	adds	r3, #2
 8005702:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005706:	e7c5      	b.n	8005694 <_printf_common+0x58>
 8005708:	2301      	movs	r3, #1
 800570a:	4622      	mov	r2, r4
 800570c:	4649      	mov	r1, r9
 800570e:	4638      	mov	r0, r7
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d0e6      	beq.n	80056e4 <_printf_common+0xa8>
 8005716:	3601      	adds	r6, #1
 8005718:	e7d9      	b.n	80056ce <_printf_common+0x92>
	...

0800571c <_printf_i>:
 800571c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	7e0f      	ldrb	r7, [r1, #24]
 8005722:	4691      	mov	r9, r2
 8005724:	2f78      	cmp	r7, #120	; 0x78
 8005726:	4680      	mov	r8, r0
 8005728:	460c      	mov	r4, r1
 800572a:	469a      	mov	sl, r3
 800572c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800572e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005732:	d807      	bhi.n	8005744 <_printf_i+0x28>
 8005734:	2f62      	cmp	r7, #98	; 0x62
 8005736:	d80a      	bhi.n	800574e <_printf_i+0x32>
 8005738:	2f00      	cmp	r7, #0
 800573a:	f000 80d9 	beq.w	80058f0 <_printf_i+0x1d4>
 800573e:	2f58      	cmp	r7, #88	; 0x58
 8005740:	f000 80a4 	beq.w	800588c <_printf_i+0x170>
 8005744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800574c:	e03a      	b.n	80057c4 <_printf_i+0xa8>
 800574e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005752:	2b15      	cmp	r3, #21
 8005754:	d8f6      	bhi.n	8005744 <_printf_i+0x28>
 8005756:	a101      	add	r1, pc, #4	; (adr r1, 800575c <_printf_i+0x40>)
 8005758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057c9 	.word	0x080057c9
 8005764:	08005745 	.word	0x08005745
 8005768:	08005745 	.word	0x08005745
 800576c:	08005745 	.word	0x08005745
 8005770:	08005745 	.word	0x08005745
 8005774:	080057c9 	.word	0x080057c9
 8005778:	08005745 	.word	0x08005745
 800577c:	08005745 	.word	0x08005745
 8005780:	08005745 	.word	0x08005745
 8005784:	08005745 	.word	0x08005745
 8005788:	080058d7 	.word	0x080058d7
 800578c:	080057f9 	.word	0x080057f9
 8005790:	080058b9 	.word	0x080058b9
 8005794:	08005745 	.word	0x08005745
 8005798:	08005745 	.word	0x08005745
 800579c:	080058f9 	.word	0x080058f9
 80057a0:	08005745 	.word	0x08005745
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	08005745 	.word	0x08005745
 80057ac:	08005745 	.word	0x08005745
 80057b0:	080058c1 	.word	0x080058c1
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	1d1a      	adds	r2, r3, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	602a      	str	r2, [r5, #0]
 80057bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0a4      	b.n	8005912 <_printf_i+0x1f6>
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	6829      	ldr	r1, [r5, #0]
 80057cc:	0606      	lsls	r6, r0, #24
 80057ce:	f101 0304 	add.w	r3, r1, #4
 80057d2:	d50a      	bpl.n	80057ea <_printf_i+0xce>
 80057d4:	680e      	ldr	r6, [r1, #0]
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	2e00      	cmp	r6, #0
 80057da:	da03      	bge.n	80057e4 <_printf_i+0xc8>
 80057dc:	232d      	movs	r3, #45	; 0x2d
 80057de:	4276      	negs	r6, r6
 80057e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e4:	230a      	movs	r3, #10
 80057e6:	485e      	ldr	r0, [pc, #376]	; (8005960 <_printf_i+0x244>)
 80057e8:	e019      	b.n	800581e <_printf_i+0x102>
 80057ea:	680e      	ldr	r6, [r1, #0]
 80057ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	bf18      	it	ne
 80057f4:	b236      	sxthne	r6, r6
 80057f6:	e7ef      	b.n	80057d8 <_printf_i+0xbc>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	1d19      	adds	r1, r3, #4
 80057fe:	6029      	str	r1, [r5, #0]
 8005800:	0601      	lsls	r1, r0, #24
 8005802:	d501      	bpl.n	8005808 <_printf_i+0xec>
 8005804:	681e      	ldr	r6, [r3, #0]
 8005806:	e002      	b.n	800580e <_printf_i+0xf2>
 8005808:	0646      	lsls	r6, r0, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0xe8>
 800580c:	881e      	ldrh	r6, [r3, #0]
 800580e:	2f6f      	cmp	r7, #111	; 0x6f
 8005810:	bf0c      	ite	eq
 8005812:	2308      	moveq	r3, #8
 8005814:	230a      	movne	r3, #10
 8005816:	4852      	ldr	r0, [pc, #328]	; (8005960 <_printf_i+0x244>)
 8005818:	2100      	movs	r1, #0
 800581a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800581e:	6865      	ldr	r5, [r4, #4]
 8005820:	2d00      	cmp	r5, #0
 8005822:	bfa8      	it	ge
 8005824:	6821      	ldrge	r1, [r4, #0]
 8005826:	60a5      	str	r5, [r4, #8]
 8005828:	bfa4      	itt	ge
 800582a:	f021 0104 	bicge.w	r1, r1, #4
 800582e:	6021      	strge	r1, [r4, #0]
 8005830:	b90e      	cbnz	r6, 8005836 <_printf_i+0x11a>
 8005832:	2d00      	cmp	r5, #0
 8005834:	d04d      	beq.n	80058d2 <_printf_i+0x1b6>
 8005836:	4615      	mov	r5, r2
 8005838:	fbb6 f1f3 	udiv	r1, r6, r3
 800583c:	fb03 6711 	mls	r7, r3, r1, r6
 8005840:	5dc7      	ldrb	r7, [r0, r7]
 8005842:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005846:	4637      	mov	r7, r6
 8005848:	42bb      	cmp	r3, r7
 800584a:	460e      	mov	r6, r1
 800584c:	d9f4      	bls.n	8005838 <_printf_i+0x11c>
 800584e:	2b08      	cmp	r3, #8
 8005850:	d10b      	bne.n	800586a <_printf_i+0x14e>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	07de      	lsls	r6, r3, #31
 8005856:	d508      	bpl.n	800586a <_printf_i+0x14e>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	6861      	ldr	r1, [r4, #4]
 800585c:	4299      	cmp	r1, r3
 800585e:	bfde      	ittt	le
 8005860:	2330      	movle	r3, #48	; 0x30
 8005862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800586a:	1b52      	subs	r2, r2, r5
 800586c:	6122      	str	r2, [r4, #16]
 800586e:	464b      	mov	r3, r9
 8005870:	4621      	mov	r1, r4
 8005872:	4640      	mov	r0, r8
 8005874:	f8cd a000 	str.w	sl, [sp]
 8005878:	aa03      	add	r2, sp, #12
 800587a:	f7ff fedf 	bl	800563c <_printf_common>
 800587e:	3001      	adds	r0, #1
 8005880:	d14c      	bne.n	800591c <_printf_i+0x200>
 8005882:	f04f 30ff 	mov.w	r0, #4294967295
 8005886:	b004      	add	sp, #16
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	4834      	ldr	r0, [pc, #208]	; (8005960 <_printf_i+0x244>)
 800588e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005892:	6829      	ldr	r1, [r5, #0]
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	f851 6b04 	ldr.w	r6, [r1], #4
 800589a:	6029      	str	r1, [r5, #0]
 800589c:	061d      	lsls	r5, r3, #24
 800589e:	d514      	bpl.n	80058ca <_printf_i+0x1ae>
 80058a0:	07df      	lsls	r7, r3, #31
 80058a2:	bf44      	itt	mi
 80058a4:	f043 0320 	orrmi.w	r3, r3, #32
 80058a8:	6023      	strmi	r3, [r4, #0]
 80058aa:	b91e      	cbnz	r6, 80058b4 <_printf_i+0x198>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	f023 0320 	bic.w	r3, r3, #32
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	2310      	movs	r3, #16
 80058b6:	e7af      	b.n	8005818 <_printf_i+0xfc>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f043 0320 	orr.w	r3, r3, #32
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	2378      	movs	r3, #120	; 0x78
 80058c2:	4828      	ldr	r0, [pc, #160]	; (8005964 <_printf_i+0x248>)
 80058c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058c8:	e7e3      	b.n	8005892 <_printf_i+0x176>
 80058ca:	0659      	lsls	r1, r3, #25
 80058cc:	bf48      	it	mi
 80058ce:	b2b6      	uxthmi	r6, r6
 80058d0:	e7e6      	b.n	80058a0 <_printf_i+0x184>
 80058d2:	4615      	mov	r5, r2
 80058d4:	e7bb      	b.n	800584e <_printf_i+0x132>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	6826      	ldr	r6, [r4, #0]
 80058da:	1d18      	adds	r0, r3, #4
 80058dc:	6961      	ldr	r1, [r4, #20]
 80058de:	6028      	str	r0, [r5, #0]
 80058e0:	0635      	lsls	r5, r6, #24
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	d501      	bpl.n	80058ea <_printf_i+0x1ce>
 80058e6:	6019      	str	r1, [r3, #0]
 80058e8:	e002      	b.n	80058f0 <_printf_i+0x1d4>
 80058ea:	0670      	lsls	r0, r6, #25
 80058ec:	d5fb      	bpl.n	80058e6 <_printf_i+0x1ca>
 80058ee:	8019      	strh	r1, [r3, #0]
 80058f0:	2300      	movs	r3, #0
 80058f2:	4615      	mov	r5, r2
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	e7ba      	b.n	800586e <_printf_i+0x152>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	2100      	movs	r1, #0
 80058fc:	1d1a      	adds	r2, r3, #4
 80058fe:	602a      	str	r2, [r5, #0]
 8005900:	681d      	ldr	r5, [r3, #0]
 8005902:	6862      	ldr	r2, [r4, #4]
 8005904:	4628      	mov	r0, r5
 8005906:	f002 fe75 	bl	80085f4 <memchr>
 800590a:	b108      	cbz	r0, 8005910 <_printf_i+0x1f4>
 800590c:	1b40      	subs	r0, r0, r5
 800590e:	6060      	str	r0, [r4, #4]
 8005910:	6863      	ldr	r3, [r4, #4]
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	2300      	movs	r3, #0
 8005916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800591a:	e7a8      	b.n	800586e <_printf_i+0x152>
 800591c:	462a      	mov	r2, r5
 800591e:	4649      	mov	r1, r9
 8005920:	4640      	mov	r0, r8
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	47d0      	blx	sl
 8005926:	3001      	adds	r0, #1
 8005928:	d0ab      	beq.n	8005882 <_printf_i+0x166>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	079b      	lsls	r3, r3, #30
 800592e:	d413      	bmi.n	8005958 <_printf_i+0x23c>
 8005930:	68e0      	ldr	r0, [r4, #12]
 8005932:	9b03      	ldr	r3, [sp, #12]
 8005934:	4298      	cmp	r0, r3
 8005936:	bfb8      	it	lt
 8005938:	4618      	movlt	r0, r3
 800593a:	e7a4      	b.n	8005886 <_printf_i+0x16a>
 800593c:	2301      	movs	r3, #1
 800593e:	4632      	mov	r2, r6
 8005940:	4649      	mov	r1, r9
 8005942:	4640      	mov	r0, r8
 8005944:	47d0      	blx	sl
 8005946:	3001      	adds	r0, #1
 8005948:	d09b      	beq.n	8005882 <_printf_i+0x166>
 800594a:	3501      	adds	r5, #1
 800594c:	68e3      	ldr	r3, [r4, #12]
 800594e:	9903      	ldr	r1, [sp, #12]
 8005950:	1a5b      	subs	r3, r3, r1
 8005952:	42ab      	cmp	r3, r5
 8005954:	dcf2      	bgt.n	800593c <_printf_i+0x220>
 8005956:	e7eb      	b.n	8005930 <_printf_i+0x214>
 8005958:	2500      	movs	r5, #0
 800595a:	f104 0619 	add.w	r6, r4, #25
 800595e:	e7f5      	b.n	800594c <_printf_i+0x230>
 8005960:	08009cfa 	.word	0x08009cfa
 8005964:	08009d0b 	.word	0x08009d0b

08005968 <_scanf_float>:
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	b087      	sub	sp, #28
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	688b      	ldr	r3, [r1, #8]
 8005972:	4617      	mov	r7, r2
 8005974:	1e5a      	subs	r2, r3, #1
 8005976:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800597a:	bf85      	ittet	hi
 800597c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005980:	195b      	addhi	r3, r3, r5
 8005982:	2300      	movls	r3, #0
 8005984:	9302      	strhi	r3, [sp, #8]
 8005986:	bf88      	it	hi
 8005988:	f240 135d 	movwhi	r3, #349	; 0x15d
 800598c:	468b      	mov	fp, r1
 800598e:	f04f 0500 	mov.w	r5, #0
 8005992:	bf8c      	ite	hi
 8005994:	608b      	strhi	r3, [r1, #8]
 8005996:	9302      	strls	r3, [sp, #8]
 8005998:	680b      	ldr	r3, [r1, #0]
 800599a:	4680      	mov	r8, r0
 800599c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80059a0:	f84b 3b1c 	str.w	r3, [fp], #28
 80059a4:	460c      	mov	r4, r1
 80059a6:	465e      	mov	r6, fp
 80059a8:	46aa      	mov	sl, r5
 80059aa:	46a9      	mov	r9, r5
 80059ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80059b0:	9501      	str	r5, [sp, #4]
 80059b2:	68a2      	ldr	r2, [r4, #8]
 80059b4:	b152      	cbz	r2, 80059cc <_scanf_float+0x64>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b4e      	cmp	r3, #78	; 0x4e
 80059bc:	d864      	bhi.n	8005a88 <_scanf_float+0x120>
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d83c      	bhi.n	8005a3c <_scanf_float+0xd4>
 80059c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80059c6:	b2c8      	uxtb	r0, r1
 80059c8:	280e      	cmp	r0, #14
 80059ca:	d93a      	bls.n	8005a42 <_scanf_float+0xda>
 80059cc:	f1b9 0f00 	cmp.w	r9, #0
 80059d0:	d003      	beq.n	80059da <_scanf_float+0x72>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059de:	f1ba 0f01 	cmp.w	sl, #1
 80059e2:	f200 8113 	bhi.w	8005c0c <_scanf_float+0x2a4>
 80059e6:	455e      	cmp	r6, fp
 80059e8:	f200 8105 	bhi.w	8005bf6 <_scanf_float+0x28e>
 80059ec:	2501      	movs	r5, #1
 80059ee:	4628      	mov	r0, r5
 80059f0:	b007      	add	sp, #28
 80059f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80059fa:	2a0d      	cmp	r2, #13
 80059fc:	d8e6      	bhi.n	80059cc <_scanf_float+0x64>
 80059fe:	a101      	add	r1, pc, #4	; (adr r1, 8005a04 <_scanf_float+0x9c>)
 8005a00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a04:	08005b43 	.word	0x08005b43
 8005a08:	080059cd 	.word	0x080059cd
 8005a0c:	080059cd 	.word	0x080059cd
 8005a10:	080059cd 	.word	0x080059cd
 8005a14:	08005ba3 	.word	0x08005ba3
 8005a18:	08005b7b 	.word	0x08005b7b
 8005a1c:	080059cd 	.word	0x080059cd
 8005a20:	080059cd 	.word	0x080059cd
 8005a24:	08005b51 	.word	0x08005b51
 8005a28:	080059cd 	.word	0x080059cd
 8005a2c:	080059cd 	.word	0x080059cd
 8005a30:	080059cd 	.word	0x080059cd
 8005a34:	080059cd 	.word	0x080059cd
 8005a38:	08005b09 	.word	0x08005b09
 8005a3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a40:	e7db      	b.n	80059fa <_scanf_float+0x92>
 8005a42:	290e      	cmp	r1, #14
 8005a44:	d8c2      	bhi.n	80059cc <_scanf_float+0x64>
 8005a46:	a001      	add	r0, pc, #4	; (adr r0, 8005a4c <_scanf_float+0xe4>)
 8005a48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a4c:	08005afb 	.word	0x08005afb
 8005a50:	080059cd 	.word	0x080059cd
 8005a54:	08005afb 	.word	0x08005afb
 8005a58:	08005b8f 	.word	0x08005b8f
 8005a5c:	080059cd 	.word	0x080059cd
 8005a60:	08005aa9 	.word	0x08005aa9
 8005a64:	08005ae5 	.word	0x08005ae5
 8005a68:	08005ae5 	.word	0x08005ae5
 8005a6c:	08005ae5 	.word	0x08005ae5
 8005a70:	08005ae5 	.word	0x08005ae5
 8005a74:	08005ae5 	.word	0x08005ae5
 8005a78:	08005ae5 	.word	0x08005ae5
 8005a7c:	08005ae5 	.word	0x08005ae5
 8005a80:	08005ae5 	.word	0x08005ae5
 8005a84:	08005ae5 	.word	0x08005ae5
 8005a88:	2b6e      	cmp	r3, #110	; 0x6e
 8005a8a:	d809      	bhi.n	8005aa0 <_scanf_float+0x138>
 8005a8c:	2b60      	cmp	r3, #96	; 0x60
 8005a8e:	d8b2      	bhi.n	80059f6 <_scanf_float+0x8e>
 8005a90:	2b54      	cmp	r3, #84	; 0x54
 8005a92:	d077      	beq.n	8005b84 <_scanf_float+0x21c>
 8005a94:	2b59      	cmp	r3, #89	; 0x59
 8005a96:	d199      	bne.n	80059cc <_scanf_float+0x64>
 8005a98:	2d07      	cmp	r5, #7
 8005a9a:	d197      	bne.n	80059cc <_scanf_float+0x64>
 8005a9c:	2508      	movs	r5, #8
 8005a9e:	e029      	b.n	8005af4 <_scanf_float+0x18c>
 8005aa0:	2b74      	cmp	r3, #116	; 0x74
 8005aa2:	d06f      	beq.n	8005b84 <_scanf_float+0x21c>
 8005aa4:	2b79      	cmp	r3, #121	; 0x79
 8005aa6:	e7f6      	b.n	8005a96 <_scanf_float+0x12e>
 8005aa8:	6821      	ldr	r1, [r4, #0]
 8005aaa:	05c8      	lsls	r0, r1, #23
 8005aac:	d51a      	bpl.n	8005ae4 <_scanf_float+0x17c>
 8005aae:	9b02      	ldr	r3, [sp, #8]
 8005ab0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ab4:	6021      	str	r1, [r4, #0]
 8005ab6:	f109 0901 	add.w	r9, r9, #1
 8005aba:	b11b      	cbz	r3, 8005ac4 <_scanf_float+0x15c>
 8005abc:	3b01      	subs	r3, #1
 8005abe:	3201      	adds	r2, #1
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	60a2      	str	r2, [r4, #8]
 8005ac4:	68a3      	ldr	r3, [r4, #8]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	60a3      	str	r3, [r4, #8]
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	3301      	adds	r3, #1
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	f340 8084 	ble.w	8005be4 <_scanf_float+0x27c>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	e766      	b.n	80059b2 <_scanf_float+0x4a>
 8005ae4:	eb1a 0f05 	cmn.w	sl, r5
 8005ae8:	f47f af70 	bne.w	80059cc <_scanf_float+0x64>
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	f806 3b01 	strb.w	r3, [r6], #1
 8005af8:	e7e4      	b.n	8005ac4 <_scanf_float+0x15c>
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	0610      	lsls	r0, r2, #24
 8005afe:	f57f af65 	bpl.w	80059cc <_scanf_float+0x64>
 8005b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b06:	e7f4      	b.n	8005af2 <_scanf_float+0x18a>
 8005b08:	f1ba 0f00 	cmp.w	sl, #0
 8005b0c:	d10e      	bne.n	8005b2c <_scanf_float+0x1c4>
 8005b0e:	f1b9 0f00 	cmp.w	r9, #0
 8005b12:	d10e      	bne.n	8005b32 <_scanf_float+0x1ca>
 8005b14:	6822      	ldr	r2, [r4, #0]
 8005b16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b1e:	d108      	bne.n	8005b32 <_scanf_float+0x1ca>
 8005b20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b24:	f04f 0a01 	mov.w	sl, #1
 8005b28:	6022      	str	r2, [r4, #0]
 8005b2a:	e7e3      	b.n	8005af4 <_scanf_float+0x18c>
 8005b2c:	f1ba 0f02 	cmp.w	sl, #2
 8005b30:	d055      	beq.n	8005bde <_scanf_float+0x276>
 8005b32:	2d01      	cmp	r5, #1
 8005b34:	d002      	beq.n	8005b3c <_scanf_float+0x1d4>
 8005b36:	2d04      	cmp	r5, #4
 8005b38:	f47f af48 	bne.w	80059cc <_scanf_float+0x64>
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	b2ed      	uxtb	r5, r5
 8005b40:	e7d8      	b.n	8005af4 <_scanf_float+0x18c>
 8005b42:	f1ba 0f01 	cmp.w	sl, #1
 8005b46:	f47f af41 	bne.w	80059cc <_scanf_float+0x64>
 8005b4a:	f04f 0a02 	mov.w	sl, #2
 8005b4e:	e7d1      	b.n	8005af4 <_scanf_float+0x18c>
 8005b50:	b97d      	cbnz	r5, 8005b72 <_scanf_float+0x20a>
 8005b52:	f1b9 0f00 	cmp.w	r9, #0
 8005b56:	f47f af3c 	bne.w	80059d2 <_scanf_float+0x6a>
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b64:	f47f af39 	bne.w	80059da <_scanf_float+0x72>
 8005b68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b6c:	2501      	movs	r5, #1
 8005b6e:	6022      	str	r2, [r4, #0]
 8005b70:	e7c0      	b.n	8005af4 <_scanf_float+0x18c>
 8005b72:	2d03      	cmp	r5, #3
 8005b74:	d0e2      	beq.n	8005b3c <_scanf_float+0x1d4>
 8005b76:	2d05      	cmp	r5, #5
 8005b78:	e7de      	b.n	8005b38 <_scanf_float+0x1d0>
 8005b7a:	2d02      	cmp	r5, #2
 8005b7c:	f47f af26 	bne.w	80059cc <_scanf_float+0x64>
 8005b80:	2503      	movs	r5, #3
 8005b82:	e7b7      	b.n	8005af4 <_scanf_float+0x18c>
 8005b84:	2d06      	cmp	r5, #6
 8005b86:	f47f af21 	bne.w	80059cc <_scanf_float+0x64>
 8005b8a:	2507      	movs	r5, #7
 8005b8c:	e7b2      	b.n	8005af4 <_scanf_float+0x18c>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	0591      	lsls	r1, r2, #22
 8005b92:	f57f af1b 	bpl.w	80059cc <_scanf_float+0x64>
 8005b96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ba0:	e7a8      	b.n	8005af4 <_scanf_float+0x18c>
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005bac:	d006      	beq.n	8005bbc <_scanf_float+0x254>
 8005bae:	0550      	lsls	r0, r2, #21
 8005bb0:	f57f af0c 	bpl.w	80059cc <_scanf_float+0x64>
 8005bb4:	f1b9 0f00 	cmp.w	r9, #0
 8005bb8:	f43f af0f 	beq.w	80059da <_scanf_float+0x72>
 8005bbc:	0591      	lsls	r1, r2, #22
 8005bbe:	bf58      	it	pl
 8005bc0:	9901      	ldrpl	r1, [sp, #4]
 8005bc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bc6:	bf58      	it	pl
 8005bc8:	eba9 0101 	subpl.w	r1, r9, r1
 8005bcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	bf58      	it	pl
 8005bd6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005bda:	6022      	str	r2, [r4, #0]
 8005bdc:	e78a      	b.n	8005af4 <_scanf_float+0x18c>
 8005bde:	f04f 0a03 	mov.w	sl, #3
 8005be2:	e787      	b.n	8005af4 <_scanf_float+0x18c>
 8005be4:	4639      	mov	r1, r7
 8005be6:	4640      	mov	r0, r8
 8005be8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bec:	4798      	blx	r3
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f43f aedf 	beq.w	80059b2 <_scanf_float+0x4a>
 8005bf4:	e6ea      	b.n	80059cc <_scanf_float+0x64>
 8005bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bfa:	463a      	mov	r2, r7
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c02:	4798      	blx	r3
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	e6ec      	b.n	80059e6 <_scanf_float+0x7e>
 8005c0c:	1e6b      	subs	r3, r5, #1
 8005c0e:	2b06      	cmp	r3, #6
 8005c10:	d825      	bhi.n	8005c5e <_scanf_float+0x2f6>
 8005c12:	2d02      	cmp	r5, #2
 8005c14:	d836      	bhi.n	8005c84 <_scanf_float+0x31c>
 8005c16:	455e      	cmp	r6, fp
 8005c18:	f67f aee8 	bls.w	80059ec <_scanf_float+0x84>
 8005c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c20:	463a      	mov	r2, r7
 8005c22:	4640      	mov	r0, r8
 8005c24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c28:	4798      	blx	r3
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	e7f1      	b.n	8005c16 <_scanf_float+0x2ae>
 8005c32:	9802      	ldr	r0, [sp, #8]
 8005c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	9002      	str	r0, [sp, #8]
 8005c40:	4640      	mov	r0, r8
 8005c42:	4798      	blx	r3
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c4e:	fa5f fa8a 	uxtb.w	sl, sl
 8005c52:	f1ba 0f02 	cmp.w	sl, #2
 8005c56:	d1ec      	bne.n	8005c32 <_scanf_float+0x2ca>
 8005c58:	3d03      	subs	r5, #3
 8005c5a:	b2ed      	uxtb	r5, r5
 8005c5c:	1b76      	subs	r6, r6, r5
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	05da      	lsls	r2, r3, #23
 8005c62:	d52f      	bpl.n	8005cc4 <_scanf_float+0x35c>
 8005c64:	055b      	lsls	r3, r3, #21
 8005c66:	d510      	bpl.n	8005c8a <_scanf_float+0x322>
 8005c68:	455e      	cmp	r6, fp
 8005c6a:	f67f aebf 	bls.w	80059ec <_scanf_float+0x84>
 8005c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c72:	463a      	mov	r2, r7
 8005c74:	4640      	mov	r0, r8
 8005c76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c7a:	4798      	blx	r3
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	6123      	str	r3, [r4, #16]
 8005c82:	e7f1      	b.n	8005c68 <_scanf_float+0x300>
 8005c84:	46aa      	mov	sl, r5
 8005c86:	9602      	str	r6, [sp, #8]
 8005c88:	e7df      	b.n	8005c4a <_scanf_float+0x2e2>
 8005c8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c8e:	6923      	ldr	r3, [r4, #16]
 8005c90:	2965      	cmp	r1, #101	; 0x65
 8005c92:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c96:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	d00c      	beq.n	8005cb8 <_scanf_float+0x350>
 8005c9e:	2945      	cmp	r1, #69	; 0x45
 8005ca0:	d00a      	beq.n	8005cb8 <_scanf_float+0x350>
 8005ca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ca6:	463a      	mov	r2, r7
 8005ca8:	4640      	mov	r0, r8
 8005caa:	4798      	blx	r3
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	1eb5      	subs	r5, r6, #2
 8005cb6:	6123      	str	r3, [r4, #16]
 8005cb8:	463a      	mov	r2, r7
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cc0:	4798      	blx	r3
 8005cc2:	462e      	mov	r6, r5
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	f015 0510 	ands.w	r5, r5, #16
 8005cca:	d155      	bne.n	8005d78 <_scanf_float+0x410>
 8005ccc:	7035      	strb	r5, [r6, #0]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd8:	d11b      	bne.n	8005d12 <_scanf_float+0x3aa>
 8005cda:	9b01      	ldr	r3, [sp, #4]
 8005cdc:	454b      	cmp	r3, r9
 8005cde:	eba3 0209 	sub.w	r2, r3, r9
 8005ce2:	d123      	bne.n	8005d2c <_scanf_float+0x3c4>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4659      	mov	r1, fp
 8005ce8:	4640      	mov	r0, r8
 8005cea:	f000 ff19 	bl	8006b20 <_strtod_r>
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	f012 0f02 	tst.w	r2, #2
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	d021      	beq.n	8005d42 <_scanf_float+0x3da>
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	600a      	str	r2, [r1, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	e9c3 6700 	strd	r6, r7, [r3]
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60e3      	str	r3, [r4, #12]
 8005d10:	e66d      	b.n	80059ee <_scanf_float+0x86>
 8005d12:	9b04      	ldr	r3, [sp, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0e5      	beq.n	8005ce4 <_scanf_float+0x37c>
 8005d18:	9905      	ldr	r1, [sp, #20]
 8005d1a:	230a      	movs	r3, #10
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	4640      	mov	r0, r8
 8005d20:	3101      	adds	r1, #1
 8005d22:	f000 ff7f 	bl	8006c24 <_strtol_r>
 8005d26:	9b04      	ldr	r3, [sp, #16]
 8005d28:	9e05      	ldr	r6, [sp, #20]
 8005d2a:	1ac2      	subs	r2, r0, r3
 8005d2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d30:	429e      	cmp	r6, r3
 8005d32:	bf28      	it	cs
 8005d34:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4910      	ldr	r1, [pc, #64]	; (8005d7c <_scanf_float+0x414>)
 8005d3c:	f000 f8b4 	bl	8005ea8 <siprintf>
 8005d40:	e7d0      	b.n	8005ce4 <_scanf_float+0x37c>
 8005d42:	f012 0f04 	tst.w	r2, #4
 8005d46:	f103 0204 	add.w	r2, r3, #4
 8005d4a:	d1d9      	bne.n	8005d00 <_scanf_float+0x398>
 8005d4c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005d50:	f8cc 2000 	str.w	r2, [ip]
 8005d54:	f8d3 8000 	ldr.w	r8, [r3]
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	f7fa fe60 	bl	8000a20 <__aeabi_dcmpun>
 8005d60:	b128      	cbz	r0, 8005d6e <_scanf_float+0x406>
 8005d62:	4807      	ldr	r0, [pc, #28]	; (8005d80 <_scanf_float+0x418>)
 8005d64:	f000 f89c 	bl	8005ea0 <nanf>
 8005d68:	f8c8 0000 	str.w	r0, [r8]
 8005d6c:	e7cd      	b.n	8005d0a <_scanf_float+0x3a2>
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa feb3 	bl	8000adc <__aeabi_d2f>
 8005d76:	e7f7      	b.n	8005d68 <_scanf_float+0x400>
 8005d78:	2500      	movs	r5, #0
 8005d7a:	e638      	b.n	80059ee <_scanf_float+0x86>
 8005d7c:	08009d1c 	.word	0x08009d1c
 8005d80:	0800a190 	.word	0x0800a190

08005d84 <iprintf>:
 8005d84:	b40f      	push	{r0, r1, r2, r3}
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <iprintf+0x2c>)
 8005d88:	b513      	push	{r0, r1, r4, lr}
 8005d8a:	681c      	ldr	r4, [r3, #0]
 8005d8c:	b124      	cbz	r4, 8005d98 <iprintf+0x14>
 8005d8e:	69a3      	ldr	r3, [r4, #24]
 8005d90:	b913      	cbnz	r3, 8005d98 <iprintf+0x14>
 8005d92:	4620      	mov	r0, r4
 8005d94:	f001 ffa4 	bl	8007ce0 <__sinit>
 8005d98:	ab05      	add	r3, sp, #20
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	9a04      	ldr	r2, [sp, #16]
 8005d9e:	68a1      	ldr	r1, [r4, #8]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	f003 fb6f 	bl	8009484 <_vfiprintf_r>
 8005da6:	b002      	add	sp, #8
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	b004      	add	sp, #16
 8005dae:	4770      	bx	lr
 8005db0:	2000005c 	.word	0x2000005c

08005db4 <_puts_r>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	460e      	mov	r6, r1
 8005db8:	4605      	mov	r5, r0
 8005dba:	b118      	cbz	r0, 8005dc4 <_puts_r+0x10>
 8005dbc:	6983      	ldr	r3, [r0, #24]
 8005dbe:	b90b      	cbnz	r3, 8005dc4 <_puts_r+0x10>
 8005dc0:	f001 ff8e 	bl	8007ce0 <__sinit>
 8005dc4:	69ab      	ldr	r3, [r5, #24]
 8005dc6:	68ac      	ldr	r4, [r5, #8]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <_puts_r+0x1c>
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f001 ff88 	bl	8007ce0 <__sinit>
 8005dd0:	4b2c      	ldr	r3, [pc, #176]	; (8005e84 <_puts_r+0xd0>)
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d120      	bne.n	8005e18 <_puts_r+0x64>
 8005dd6:	686c      	ldr	r4, [r5, #4]
 8005dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dda:	07db      	lsls	r3, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_puts_r+0x36>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	0598      	lsls	r0, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_puts_r+0x36>
 8005de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de6:	f002 fb84 	bl	80084f2 <__retarget_lock_acquire_recursive>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	0719      	lsls	r1, r3, #28
 8005dee:	d51d      	bpl.n	8005e2c <_puts_r+0x78>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	b1db      	cbz	r3, 8005e2c <_puts_r+0x78>
 8005df4:	3e01      	subs	r6, #1
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	60a3      	str	r3, [r4, #8]
 8005e00:	bb39      	cbnz	r1, 8005e52 <_puts_r+0x9e>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da38      	bge.n	8005e78 <_puts_r+0xc4>
 8005e06:	4622      	mov	r2, r4
 8005e08:	210a      	movs	r1, #10
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f000 ff16 	bl	8006c3c <__swbuf_r>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d011      	beq.n	8005e38 <_puts_r+0x84>
 8005e14:	250a      	movs	r5, #10
 8005e16:	e011      	b.n	8005e3c <_puts_r+0x88>
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <_puts_r+0xd4>)
 8005e1a:	429c      	cmp	r4, r3
 8005e1c:	d101      	bne.n	8005e22 <_puts_r+0x6e>
 8005e1e:	68ac      	ldr	r4, [r5, #8]
 8005e20:	e7da      	b.n	8005dd8 <_puts_r+0x24>
 8005e22:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <_puts_r+0xd8>)
 8005e24:	429c      	cmp	r4, r3
 8005e26:	bf08      	it	eq
 8005e28:	68ec      	ldreq	r4, [r5, #12]
 8005e2a:	e7d5      	b.n	8005dd8 <_puts_r+0x24>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 ff56 	bl	8006ce0 <__swsetup_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d0dd      	beq.n	8005df4 <_puts_r+0x40>
 8005e38:	f04f 35ff 	mov.w	r5, #4294967295
 8005e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e3e:	07da      	lsls	r2, r3, #31
 8005e40:	d405      	bmi.n	8005e4e <_puts_r+0x9a>
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	059b      	lsls	r3, r3, #22
 8005e46:	d402      	bmi.n	8005e4e <_puts_r+0x9a>
 8005e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e4a:	f002 fb53 	bl	80084f4 <__retarget_lock_release_recursive>
 8005e4e:	4628      	mov	r0, r5
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da04      	bge.n	8005e60 <_puts_r+0xac>
 8005e56:	69a2      	ldr	r2, [r4, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	dc06      	bgt.n	8005e6a <_puts_r+0xb6>
 8005e5c:	290a      	cmp	r1, #10
 8005e5e:	d004      	beq.n	8005e6a <_puts_r+0xb6>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	6022      	str	r2, [r4, #0]
 8005e66:	7019      	strb	r1, [r3, #0]
 8005e68:	e7c5      	b.n	8005df6 <_puts_r+0x42>
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 fee5 	bl	8006c3c <__swbuf_r>
 8005e72:	3001      	adds	r0, #1
 8005e74:	d1bf      	bne.n	8005df6 <_puts_r+0x42>
 8005e76:	e7df      	b.n	8005e38 <_puts_r+0x84>
 8005e78:	250a      	movs	r5, #10
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	6022      	str	r2, [r4, #0]
 8005e80:	701d      	strb	r5, [r3, #0]
 8005e82:	e7db      	b.n	8005e3c <_puts_r+0x88>
 8005e84:	08009f2c 	.word	0x08009f2c
 8005e88:	08009f4c 	.word	0x08009f4c
 8005e8c:	08009f0c 	.word	0x08009f0c

08005e90 <puts>:
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <puts+0xc>)
 8005e92:	4601      	mov	r1, r0
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	f7ff bf8d 	b.w	8005db4 <_puts_r>
 8005e9a:	bf00      	nop
 8005e9c:	2000005c 	.word	0x2000005c

08005ea0 <nanf>:
 8005ea0:	4800      	ldr	r0, [pc, #0]	; (8005ea4 <nanf+0x4>)
 8005ea2:	4770      	bx	lr
 8005ea4:	7fc00000 	.word	0x7fc00000

08005ea8 <siprintf>:
 8005ea8:	b40e      	push	{r1, r2, r3}
 8005eaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005eae:	b500      	push	{lr}
 8005eb0:	b09c      	sub	sp, #112	; 0x70
 8005eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8005eb4:	9002      	str	r0, [sp, #8]
 8005eb6:	9006      	str	r0, [sp, #24]
 8005eb8:	9107      	str	r1, [sp, #28]
 8005eba:	9104      	str	r1, [sp, #16]
 8005ebc:	4808      	ldr	r0, [pc, #32]	; (8005ee0 <siprintf+0x38>)
 8005ebe:	4909      	ldr	r1, [pc, #36]	; (8005ee4 <siprintf+0x3c>)
 8005ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec4:	9105      	str	r1, [sp, #20]
 8005ec6:	6800      	ldr	r0, [r0, #0]
 8005ec8:	a902      	add	r1, sp, #8
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	f003 f9b2 	bl	8009234 <_svfiprintf_r>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	9b02      	ldr	r3, [sp, #8]
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	b01c      	add	sp, #112	; 0x70
 8005ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005edc:	b003      	add	sp, #12
 8005ede:	4770      	bx	lr
 8005ee0:	2000005c 	.word	0x2000005c
 8005ee4:	ffff0208 	.word	0xffff0208

08005ee8 <strncpy>:
 8005ee8:	4603      	mov	r3, r0
 8005eea:	b510      	push	{r4, lr}
 8005eec:	3901      	subs	r1, #1
 8005eee:	b132      	cbz	r2, 8005efe <strncpy+0x16>
 8005ef0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	f803 4b01 	strb.w	r4, [r3], #1
 8005efa:	2c00      	cmp	r4, #0
 8005efc:	d1f7      	bne.n	8005eee <strncpy+0x6>
 8005efe:	2100      	movs	r1, #0
 8005f00:	441a      	add	r2, r3
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d100      	bne.n	8005f08 <strncpy+0x20>
 8005f06:	bd10      	pop	{r4, pc}
 8005f08:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0c:	e7f9      	b.n	8005f02 <strncpy+0x1a>

08005f0e <sulp>:
 8005f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f12:	460f      	mov	r7, r1
 8005f14:	4690      	mov	r8, r2
 8005f16:	f002 fef9 	bl	8008d0c <__ulp>
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	f1b8 0f00 	cmp.w	r8, #0
 8005f22:	d011      	beq.n	8005f48 <sulp+0x3a>
 8005f24:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005f28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	dd0b      	ble.n	8005f48 <sulp+0x3a>
 8005f30:	2400      	movs	r4, #0
 8005f32:	051b      	lsls	r3, r3, #20
 8005f34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f38:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	462b      	mov	r3, r5
 8005f40:	f7fa fad4 	bl	80004ec <__aeabi_dmul>
 8005f44:	4604      	mov	r4, r0
 8005f46:	460d      	mov	r5, r1
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f50 <_strtod_l>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	469b      	mov	fp, r3
 8005f56:	2300      	movs	r3, #0
 8005f58:	b09f      	sub	sp, #124	; 0x7c
 8005f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f5c:	4b9e      	ldr	r3, [pc, #632]	; (80061d8 <_strtod_l+0x288>)
 8005f5e:	4682      	mov	sl, r0
 8005f60:	681f      	ldr	r7, [r3, #0]
 8005f62:	460e      	mov	r6, r1
 8005f64:	4638      	mov	r0, r7
 8005f66:	9215      	str	r2, [sp, #84]	; 0x54
 8005f68:	f7fa f8fc 	bl	8000164 <strlen>
 8005f6c:	f04f 0800 	mov.w	r8, #0
 8005f70:	4604      	mov	r4, r0
 8005f72:	f04f 0900 	mov.w	r9, #0
 8005f76:	9619      	str	r6, [sp, #100]	; 0x64
 8005f78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	2a2b      	cmp	r2, #43	; 0x2b
 8005f7e:	d04c      	beq.n	800601a <_strtod_l+0xca>
 8005f80:	d83a      	bhi.n	8005ff8 <_strtod_l+0xa8>
 8005f82:	2a0d      	cmp	r2, #13
 8005f84:	d833      	bhi.n	8005fee <_strtod_l+0x9e>
 8005f86:	2a08      	cmp	r2, #8
 8005f88:	d833      	bhi.n	8005ff2 <_strtod_l+0xa2>
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	d03d      	beq.n	800600a <_strtod_l+0xba>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	930a      	str	r3, [sp, #40]	; 0x28
 8005f92:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005f94:	782b      	ldrb	r3, [r5, #0]
 8005f96:	2b30      	cmp	r3, #48	; 0x30
 8005f98:	f040 80aa 	bne.w	80060f0 <_strtod_l+0x1a0>
 8005f9c:	786b      	ldrb	r3, [r5, #1]
 8005f9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fa2:	2b58      	cmp	r3, #88	; 0x58
 8005fa4:	d166      	bne.n	8006074 <_strtod_l+0x124>
 8005fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa8:	4650      	mov	r0, sl
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	ab1a      	add	r3, sp, #104	; 0x68
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	4a8a      	ldr	r2, [pc, #552]	; (80061dc <_strtod_l+0x28c>)
 8005fb2:	f8cd b008 	str.w	fp, [sp, #8]
 8005fb6:	ab1b      	add	r3, sp, #108	; 0x6c
 8005fb8:	a919      	add	r1, sp, #100	; 0x64
 8005fba:	f001 ff97 	bl	8007eec <__gethex>
 8005fbe:	f010 0607 	ands.w	r6, r0, #7
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	d005      	beq.n	8005fd2 <_strtod_l+0x82>
 8005fc6:	2e06      	cmp	r6, #6
 8005fc8:	d129      	bne.n	800601e <_strtod_l+0xce>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	3501      	adds	r5, #1
 8005fce:	9519      	str	r5, [sp, #100]	; 0x64
 8005fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 858a 	bne.w	8006aee <_strtod_l+0xb9e>
 8005fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fdc:	b1d3      	cbz	r3, 8006014 <_strtod_l+0xc4>
 8005fde:	4642      	mov	r2, r8
 8005fe0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	b01f      	add	sp, #124	; 0x7c
 8005fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fee:	2a20      	cmp	r2, #32
 8005ff0:	d1cd      	bne.n	8005f8e <_strtod_l+0x3e>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	9319      	str	r3, [sp, #100]	; 0x64
 8005ff6:	e7bf      	b.n	8005f78 <_strtod_l+0x28>
 8005ff8:	2a2d      	cmp	r2, #45	; 0x2d
 8005ffa:	d1c8      	bne.n	8005f8e <_strtod_l+0x3e>
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	920a      	str	r2, [sp, #40]	; 0x28
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	9219      	str	r2, [sp, #100]	; 0x64
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1c3      	bne.n	8005f92 <_strtod_l+0x42>
 800600a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800600c:	9619      	str	r6, [sp, #100]	; 0x64
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 856b 	bne.w	8006aea <_strtod_l+0xb9a>
 8006014:	4642      	mov	r2, r8
 8006016:	464b      	mov	r3, r9
 8006018:	e7e4      	b.n	8005fe4 <_strtod_l+0x94>
 800601a:	2200      	movs	r2, #0
 800601c:	e7ef      	b.n	8005ffe <_strtod_l+0xae>
 800601e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006020:	b13a      	cbz	r2, 8006032 <_strtod_l+0xe2>
 8006022:	2135      	movs	r1, #53	; 0x35
 8006024:	a81c      	add	r0, sp, #112	; 0x70
 8006026:	f002 ff75 	bl	8008f14 <__copybits>
 800602a:	4650      	mov	r0, sl
 800602c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800602e:	f002 fb3d 	bl	80086ac <_Bfree>
 8006032:	3e01      	subs	r6, #1
 8006034:	2e04      	cmp	r6, #4
 8006036:	d806      	bhi.n	8006046 <_strtod_l+0xf6>
 8006038:	e8df f006 	tbb	[pc, r6]
 800603c:	1714030a 	.word	0x1714030a
 8006040:	0a          	.byte	0x0a
 8006041:	00          	.byte	0x00
 8006042:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006046:	0721      	lsls	r1, r4, #28
 8006048:	d5c3      	bpl.n	8005fd2 <_strtod_l+0x82>
 800604a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800604e:	e7c0      	b.n	8005fd2 <_strtod_l+0x82>
 8006050:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006052:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006056:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800605a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800605e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006062:	e7f0      	b.n	8006046 <_strtod_l+0xf6>
 8006064:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80061e0 <_strtod_l+0x290>
 8006068:	e7ed      	b.n	8006046 <_strtod_l+0xf6>
 800606a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800606e:	f04f 38ff 	mov.w	r8, #4294967295
 8006072:	e7e8      	b.n	8006046 <_strtod_l+0xf6>
 8006074:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	9219      	str	r2, [sp, #100]	; 0x64
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b30      	cmp	r3, #48	; 0x30
 800607e:	d0f9      	beq.n	8006074 <_strtod_l+0x124>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0a6      	beq.n	8005fd2 <_strtod_l+0x82>
 8006084:	2301      	movs	r3, #1
 8006086:	9307      	str	r3, [sp, #28]
 8006088:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800608a:	220a      	movs	r2, #10
 800608c:	9308      	str	r3, [sp, #32]
 800608e:	2300      	movs	r3, #0
 8006090:	469b      	mov	fp, r3
 8006092:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006096:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006098:	7805      	ldrb	r5, [r0, #0]
 800609a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800609e:	b2d9      	uxtb	r1, r3
 80060a0:	2909      	cmp	r1, #9
 80060a2:	d927      	bls.n	80060f4 <_strtod_l+0x1a4>
 80060a4:	4622      	mov	r2, r4
 80060a6:	4639      	mov	r1, r7
 80060a8:	f003 fb75 	bl	8009796 <strncmp>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d033      	beq.n	8006118 <_strtod_l+0x1c8>
 80060b0:	2000      	movs	r0, #0
 80060b2:	462a      	mov	r2, r5
 80060b4:	465c      	mov	r4, fp
 80060b6:	4603      	mov	r3, r0
 80060b8:	9004      	str	r0, [sp, #16]
 80060ba:	2a65      	cmp	r2, #101	; 0x65
 80060bc:	d001      	beq.n	80060c2 <_strtod_l+0x172>
 80060be:	2a45      	cmp	r2, #69	; 0x45
 80060c0:	d114      	bne.n	80060ec <_strtod_l+0x19c>
 80060c2:	b91c      	cbnz	r4, 80060cc <_strtod_l+0x17c>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	4302      	orrs	r2, r0
 80060c8:	d09f      	beq.n	800600a <_strtod_l+0xba>
 80060ca:	2400      	movs	r4, #0
 80060cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80060ce:	1c72      	adds	r2, r6, #1
 80060d0:	9219      	str	r2, [sp, #100]	; 0x64
 80060d2:	7872      	ldrb	r2, [r6, #1]
 80060d4:	2a2b      	cmp	r2, #43	; 0x2b
 80060d6:	d079      	beq.n	80061cc <_strtod_l+0x27c>
 80060d8:	2a2d      	cmp	r2, #45	; 0x2d
 80060da:	f000 8083 	beq.w	80061e4 <_strtod_l+0x294>
 80060de:	2700      	movs	r7, #0
 80060e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80060e4:	2909      	cmp	r1, #9
 80060e6:	f240 8083 	bls.w	80061f0 <_strtod_l+0x2a0>
 80060ea:	9619      	str	r6, [sp, #100]	; 0x64
 80060ec:	2500      	movs	r5, #0
 80060ee:	e09f      	b.n	8006230 <_strtod_l+0x2e0>
 80060f0:	2300      	movs	r3, #0
 80060f2:	e7c8      	b.n	8006086 <_strtod_l+0x136>
 80060f4:	f1bb 0f08 	cmp.w	fp, #8
 80060f8:	bfd5      	itete	le
 80060fa:	9906      	ldrle	r1, [sp, #24]
 80060fc:	9905      	ldrgt	r1, [sp, #20]
 80060fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8006102:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006106:	f100 0001 	add.w	r0, r0, #1
 800610a:	bfd4      	ite	le
 800610c:	9306      	strle	r3, [sp, #24]
 800610e:	9305      	strgt	r3, [sp, #20]
 8006110:	f10b 0b01 	add.w	fp, fp, #1
 8006114:	9019      	str	r0, [sp, #100]	; 0x64
 8006116:	e7be      	b.n	8006096 <_strtod_l+0x146>
 8006118:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800611a:	191a      	adds	r2, r3, r4
 800611c:	9219      	str	r2, [sp, #100]	; 0x64
 800611e:	5d1a      	ldrb	r2, [r3, r4]
 8006120:	f1bb 0f00 	cmp.w	fp, #0
 8006124:	d036      	beq.n	8006194 <_strtod_l+0x244>
 8006126:	465c      	mov	r4, fp
 8006128:	9004      	str	r0, [sp, #16]
 800612a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800612e:	2b09      	cmp	r3, #9
 8006130:	d912      	bls.n	8006158 <_strtod_l+0x208>
 8006132:	2301      	movs	r3, #1
 8006134:	e7c1      	b.n	80060ba <_strtod_l+0x16a>
 8006136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006138:	3001      	adds	r0, #1
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	9219      	str	r2, [sp, #100]	; 0x64
 800613e:	785a      	ldrb	r2, [r3, #1]
 8006140:	2a30      	cmp	r2, #48	; 0x30
 8006142:	d0f8      	beq.n	8006136 <_strtod_l+0x1e6>
 8006144:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006148:	2b08      	cmp	r3, #8
 800614a:	f200 84d5 	bhi.w	8006af8 <_strtod_l+0xba8>
 800614e:	9004      	str	r0, [sp, #16]
 8006150:	2000      	movs	r0, #0
 8006152:	4604      	mov	r4, r0
 8006154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006156:	9308      	str	r3, [sp, #32]
 8006158:	3a30      	subs	r2, #48	; 0x30
 800615a:	f100 0301 	add.w	r3, r0, #1
 800615e:	d013      	beq.n	8006188 <_strtod_l+0x238>
 8006160:	9904      	ldr	r1, [sp, #16]
 8006162:	1905      	adds	r5, r0, r4
 8006164:	4419      	add	r1, r3
 8006166:	9104      	str	r1, [sp, #16]
 8006168:	4623      	mov	r3, r4
 800616a:	210a      	movs	r1, #10
 800616c:	42ab      	cmp	r3, r5
 800616e:	d113      	bne.n	8006198 <_strtod_l+0x248>
 8006170:	1823      	adds	r3, r4, r0
 8006172:	2b08      	cmp	r3, #8
 8006174:	f104 0401 	add.w	r4, r4, #1
 8006178:	4404      	add	r4, r0
 800617a:	dc1b      	bgt.n	80061b4 <_strtod_l+0x264>
 800617c:	230a      	movs	r3, #10
 800617e:	9906      	ldr	r1, [sp, #24]
 8006180:	fb03 2301 	mla	r3, r3, r1, r2
 8006184:	9306      	str	r3, [sp, #24]
 8006186:	2300      	movs	r3, #0
 8006188:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800618a:	4618      	mov	r0, r3
 800618c:	1c51      	adds	r1, r2, #1
 800618e:	9119      	str	r1, [sp, #100]	; 0x64
 8006190:	7852      	ldrb	r2, [r2, #1]
 8006192:	e7ca      	b.n	800612a <_strtod_l+0x1da>
 8006194:	4658      	mov	r0, fp
 8006196:	e7d3      	b.n	8006140 <_strtod_l+0x1f0>
 8006198:	2b08      	cmp	r3, #8
 800619a:	dc04      	bgt.n	80061a6 <_strtod_l+0x256>
 800619c:	9f06      	ldr	r7, [sp, #24]
 800619e:	434f      	muls	r7, r1
 80061a0:	9706      	str	r7, [sp, #24]
 80061a2:	3301      	adds	r3, #1
 80061a4:	e7e2      	b.n	800616c <_strtod_l+0x21c>
 80061a6:	1c5f      	adds	r7, r3, #1
 80061a8:	2f10      	cmp	r7, #16
 80061aa:	bfde      	ittt	le
 80061ac:	9f05      	ldrle	r7, [sp, #20]
 80061ae:	434f      	mulle	r7, r1
 80061b0:	9705      	strle	r7, [sp, #20]
 80061b2:	e7f6      	b.n	80061a2 <_strtod_l+0x252>
 80061b4:	2c10      	cmp	r4, #16
 80061b6:	bfdf      	itttt	le
 80061b8:	230a      	movle	r3, #10
 80061ba:	9905      	ldrle	r1, [sp, #20]
 80061bc:	fb03 2301 	mlale	r3, r3, r1, r2
 80061c0:	9305      	strle	r3, [sp, #20]
 80061c2:	e7e0      	b.n	8006186 <_strtod_l+0x236>
 80061c4:	2300      	movs	r3, #0
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	2301      	movs	r3, #1
 80061ca:	e77b      	b.n	80060c4 <_strtod_l+0x174>
 80061cc:	2700      	movs	r7, #0
 80061ce:	1cb2      	adds	r2, r6, #2
 80061d0:	9219      	str	r2, [sp, #100]	; 0x64
 80061d2:	78b2      	ldrb	r2, [r6, #2]
 80061d4:	e784      	b.n	80060e0 <_strtod_l+0x190>
 80061d6:	bf00      	nop
 80061d8:	08009fd4 	.word	0x08009fd4
 80061dc:	08009d24 	.word	0x08009d24
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	2701      	movs	r7, #1
 80061e6:	e7f2      	b.n	80061ce <_strtod_l+0x27e>
 80061e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061ea:	1c51      	adds	r1, r2, #1
 80061ec:	9119      	str	r1, [sp, #100]	; 0x64
 80061ee:	7852      	ldrb	r2, [r2, #1]
 80061f0:	2a30      	cmp	r2, #48	; 0x30
 80061f2:	d0f9      	beq.n	80061e8 <_strtod_l+0x298>
 80061f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80061f8:	2908      	cmp	r1, #8
 80061fa:	f63f af77 	bhi.w	80060ec <_strtod_l+0x19c>
 80061fe:	f04f 0e0a 	mov.w	lr, #10
 8006202:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006206:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006208:	9209      	str	r2, [sp, #36]	; 0x24
 800620a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800620c:	1c51      	adds	r1, r2, #1
 800620e:	9119      	str	r1, [sp, #100]	; 0x64
 8006210:	7852      	ldrb	r2, [r2, #1]
 8006212:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006216:	2d09      	cmp	r5, #9
 8006218:	d935      	bls.n	8006286 <_strtod_l+0x336>
 800621a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800621c:	1b49      	subs	r1, r1, r5
 800621e:	2908      	cmp	r1, #8
 8006220:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006224:	dc02      	bgt.n	800622c <_strtod_l+0x2dc>
 8006226:	4565      	cmp	r5, ip
 8006228:	bfa8      	it	ge
 800622a:	4665      	movge	r5, ip
 800622c:	b107      	cbz	r7, 8006230 <_strtod_l+0x2e0>
 800622e:	426d      	negs	r5, r5
 8006230:	2c00      	cmp	r4, #0
 8006232:	d14c      	bne.n	80062ce <_strtod_l+0x37e>
 8006234:	9907      	ldr	r1, [sp, #28]
 8006236:	4301      	orrs	r1, r0
 8006238:	f47f aecb 	bne.w	8005fd2 <_strtod_l+0x82>
 800623c:	2b00      	cmp	r3, #0
 800623e:	f47f aee4 	bne.w	800600a <_strtod_l+0xba>
 8006242:	2a69      	cmp	r2, #105	; 0x69
 8006244:	d026      	beq.n	8006294 <_strtod_l+0x344>
 8006246:	dc23      	bgt.n	8006290 <_strtod_l+0x340>
 8006248:	2a49      	cmp	r2, #73	; 0x49
 800624a:	d023      	beq.n	8006294 <_strtod_l+0x344>
 800624c:	2a4e      	cmp	r2, #78	; 0x4e
 800624e:	f47f aedc 	bne.w	800600a <_strtod_l+0xba>
 8006252:	499d      	ldr	r1, [pc, #628]	; (80064c8 <_strtod_l+0x578>)
 8006254:	a819      	add	r0, sp, #100	; 0x64
 8006256:	f002 f897 	bl	8008388 <__match>
 800625a:	2800      	cmp	r0, #0
 800625c:	f43f aed5 	beq.w	800600a <_strtod_l+0xba>
 8006260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b28      	cmp	r3, #40	; 0x28
 8006266:	d12c      	bne.n	80062c2 <_strtod_l+0x372>
 8006268:	4998      	ldr	r1, [pc, #608]	; (80064cc <_strtod_l+0x57c>)
 800626a:	aa1c      	add	r2, sp, #112	; 0x70
 800626c:	a819      	add	r0, sp, #100	; 0x64
 800626e:	f002 f89f 	bl	80083b0 <__hexnan>
 8006272:	2805      	cmp	r0, #5
 8006274:	d125      	bne.n	80062c2 <_strtod_l+0x372>
 8006276:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006278:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800627c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006280:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006284:	e6a5      	b.n	8005fd2 <_strtod_l+0x82>
 8006286:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800628a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800628e:	e7bc      	b.n	800620a <_strtod_l+0x2ba>
 8006290:	2a6e      	cmp	r2, #110	; 0x6e
 8006292:	e7dc      	b.n	800624e <_strtod_l+0x2fe>
 8006294:	498e      	ldr	r1, [pc, #568]	; (80064d0 <_strtod_l+0x580>)
 8006296:	a819      	add	r0, sp, #100	; 0x64
 8006298:	f002 f876 	bl	8008388 <__match>
 800629c:	2800      	cmp	r0, #0
 800629e:	f43f aeb4 	beq.w	800600a <_strtod_l+0xba>
 80062a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062a4:	498b      	ldr	r1, [pc, #556]	; (80064d4 <_strtod_l+0x584>)
 80062a6:	3b01      	subs	r3, #1
 80062a8:	a819      	add	r0, sp, #100	; 0x64
 80062aa:	9319      	str	r3, [sp, #100]	; 0x64
 80062ac:	f002 f86c 	bl	8008388 <__match>
 80062b0:	b910      	cbnz	r0, 80062b8 <_strtod_l+0x368>
 80062b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062b4:	3301      	adds	r3, #1
 80062b6:	9319      	str	r3, [sp, #100]	; 0x64
 80062b8:	f04f 0800 	mov.w	r8, #0
 80062bc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80064d8 <_strtod_l+0x588>
 80062c0:	e687      	b.n	8005fd2 <_strtod_l+0x82>
 80062c2:	4886      	ldr	r0, [pc, #536]	; (80064dc <_strtod_l+0x58c>)
 80062c4:	f003 fa0e 	bl	80096e4 <nan>
 80062c8:	4680      	mov	r8, r0
 80062ca:	4689      	mov	r9, r1
 80062cc:	e681      	b.n	8005fd2 <_strtod_l+0x82>
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	f1bb 0f00 	cmp.w	fp, #0
 80062d4:	bf08      	it	eq
 80062d6:	46a3      	moveq	fp, r4
 80062d8:	1aeb      	subs	r3, r5, r3
 80062da:	2c10      	cmp	r4, #16
 80062dc:	9806      	ldr	r0, [sp, #24]
 80062de:	4626      	mov	r6, r4
 80062e0:	9307      	str	r3, [sp, #28]
 80062e2:	bfa8      	it	ge
 80062e4:	2610      	movge	r6, #16
 80062e6:	f7fa f887 	bl	80003f8 <__aeabi_ui2d>
 80062ea:	2c09      	cmp	r4, #9
 80062ec:	4680      	mov	r8, r0
 80062ee:	4689      	mov	r9, r1
 80062f0:	dd13      	ble.n	800631a <_strtod_l+0x3ca>
 80062f2:	4b7b      	ldr	r3, [pc, #492]	; (80064e0 <_strtod_l+0x590>)
 80062f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062fc:	f7fa f8f6 	bl	80004ec <__aeabi_dmul>
 8006300:	4680      	mov	r8, r0
 8006302:	9805      	ldr	r0, [sp, #20]
 8006304:	4689      	mov	r9, r1
 8006306:	f7fa f877 	bl	80003f8 <__aeabi_ui2d>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7f9 ff35 	bl	8000180 <__adddf3>
 8006316:	4680      	mov	r8, r0
 8006318:	4689      	mov	r9, r1
 800631a:	2c0f      	cmp	r4, #15
 800631c:	dc36      	bgt.n	800638c <_strtod_l+0x43c>
 800631e:	9b07      	ldr	r3, [sp, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f43f ae56 	beq.w	8005fd2 <_strtod_l+0x82>
 8006326:	dd22      	ble.n	800636e <_strtod_l+0x41e>
 8006328:	2b16      	cmp	r3, #22
 800632a:	dc09      	bgt.n	8006340 <_strtod_l+0x3f0>
 800632c:	496c      	ldr	r1, [pc, #432]	; (80064e0 <_strtod_l+0x590>)
 800632e:	4642      	mov	r2, r8
 8006330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006334:	464b      	mov	r3, r9
 8006336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800633a:	f7fa f8d7 	bl	80004ec <__aeabi_dmul>
 800633e:	e7c3      	b.n	80062c8 <_strtod_l+0x378>
 8006340:	9a07      	ldr	r2, [sp, #28]
 8006342:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006346:	4293      	cmp	r3, r2
 8006348:	db20      	blt.n	800638c <_strtod_l+0x43c>
 800634a:	4d65      	ldr	r5, [pc, #404]	; (80064e0 <_strtod_l+0x590>)
 800634c:	f1c4 040f 	rsb	r4, r4, #15
 8006350:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006354:	4642      	mov	r2, r8
 8006356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635a:	464b      	mov	r3, r9
 800635c:	f7fa f8c6 	bl	80004ec <__aeabi_dmul>
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	1b1c      	subs	r4, r3, r4
 8006364:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800636c:	e7e5      	b.n	800633a <_strtod_l+0x3ea>
 800636e:	9b07      	ldr	r3, [sp, #28]
 8006370:	3316      	adds	r3, #22
 8006372:	db0b      	blt.n	800638c <_strtod_l+0x43c>
 8006374:	9b04      	ldr	r3, [sp, #16]
 8006376:	4640      	mov	r0, r8
 8006378:	1b5d      	subs	r5, r3, r5
 800637a:	4b59      	ldr	r3, [pc, #356]	; (80064e0 <_strtod_l+0x590>)
 800637c:	4649      	mov	r1, r9
 800637e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006382:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006386:	f7fa f9db 	bl	8000740 <__aeabi_ddiv>
 800638a:	e79d      	b.n	80062c8 <_strtod_l+0x378>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	1ba6      	subs	r6, r4, r6
 8006390:	441e      	add	r6, r3
 8006392:	2e00      	cmp	r6, #0
 8006394:	dd74      	ble.n	8006480 <_strtod_l+0x530>
 8006396:	f016 030f 	ands.w	r3, r6, #15
 800639a:	d00a      	beq.n	80063b2 <_strtod_l+0x462>
 800639c:	4950      	ldr	r1, [pc, #320]	; (80064e0 <_strtod_l+0x590>)
 800639e:	4642      	mov	r2, r8
 80063a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a8:	464b      	mov	r3, r9
 80063aa:	f7fa f89f 	bl	80004ec <__aeabi_dmul>
 80063ae:	4680      	mov	r8, r0
 80063b0:	4689      	mov	r9, r1
 80063b2:	f036 060f 	bics.w	r6, r6, #15
 80063b6:	d052      	beq.n	800645e <_strtod_l+0x50e>
 80063b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80063bc:	dd27      	ble.n	800640e <_strtod_l+0x4be>
 80063be:	f04f 0b00 	mov.w	fp, #0
 80063c2:	f8cd b010 	str.w	fp, [sp, #16]
 80063c6:	f8cd b020 	str.w	fp, [sp, #32]
 80063ca:	f8cd b018 	str.w	fp, [sp, #24]
 80063ce:	2322      	movs	r3, #34	; 0x22
 80063d0:	f04f 0800 	mov.w	r8, #0
 80063d4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80064d8 <_strtod_l+0x588>
 80063d8:	f8ca 3000 	str.w	r3, [sl]
 80063dc:	9b08      	ldr	r3, [sp, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f43f adf7 	beq.w	8005fd2 <_strtod_l+0x82>
 80063e4:	4650      	mov	r0, sl
 80063e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063e8:	f002 f960 	bl	80086ac <_Bfree>
 80063ec:	4650      	mov	r0, sl
 80063ee:	9906      	ldr	r1, [sp, #24]
 80063f0:	f002 f95c 	bl	80086ac <_Bfree>
 80063f4:	4650      	mov	r0, sl
 80063f6:	9904      	ldr	r1, [sp, #16]
 80063f8:	f002 f958 	bl	80086ac <_Bfree>
 80063fc:	4650      	mov	r0, sl
 80063fe:	9908      	ldr	r1, [sp, #32]
 8006400:	f002 f954 	bl	80086ac <_Bfree>
 8006404:	4659      	mov	r1, fp
 8006406:	4650      	mov	r0, sl
 8006408:	f002 f950 	bl	80086ac <_Bfree>
 800640c:	e5e1      	b.n	8005fd2 <_strtod_l+0x82>
 800640e:	4b35      	ldr	r3, [pc, #212]	; (80064e4 <_strtod_l+0x594>)
 8006410:	4640      	mov	r0, r8
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	2300      	movs	r3, #0
 8006416:	4649      	mov	r1, r9
 8006418:	461f      	mov	r7, r3
 800641a:	1136      	asrs	r6, r6, #4
 800641c:	2e01      	cmp	r6, #1
 800641e:	dc21      	bgt.n	8006464 <_strtod_l+0x514>
 8006420:	b10b      	cbz	r3, 8006426 <_strtod_l+0x4d6>
 8006422:	4680      	mov	r8, r0
 8006424:	4689      	mov	r9, r1
 8006426:	4b2f      	ldr	r3, [pc, #188]	; (80064e4 <_strtod_l+0x594>)
 8006428:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800642c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006430:	4642      	mov	r2, r8
 8006432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006436:	464b      	mov	r3, r9
 8006438:	f7fa f858 	bl	80004ec <__aeabi_dmul>
 800643c:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <_strtod_l+0x588>)
 800643e:	460a      	mov	r2, r1
 8006440:	400b      	ands	r3, r1
 8006442:	4929      	ldr	r1, [pc, #164]	; (80064e8 <_strtod_l+0x598>)
 8006444:	4680      	mov	r8, r0
 8006446:	428b      	cmp	r3, r1
 8006448:	d8b9      	bhi.n	80063be <_strtod_l+0x46e>
 800644a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800644e:	428b      	cmp	r3, r1
 8006450:	bf86      	itte	hi
 8006452:	f04f 38ff 	movhi.w	r8, #4294967295
 8006456:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80064ec <_strtod_l+0x59c>
 800645a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800645e:	2300      	movs	r3, #0
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	e07f      	b.n	8006564 <_strtod_l+0x614>
 8006464:	07f2      	lsls	r2, r6, #31
 8006466:	d505      	bpl.n	8006474 <_strtod_l+0x524>
 8006468:	9b05      	ldr	r3, [sp, #20]
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f83d 	bl	80004ec <__aeabi_dmul>
 8006472:	2301      	movs	r3, #1
 8006474:	9a05      	ldr	r2, [sp, #20]
 8006476:	3701      	adds	r7, #1
 8006478:	3208      	adds	r2, #8
 800647a:	1076      	asrs	r6, r6, #1
 800647c:	9205      	str	r2, [sp, #20]
 800647e:	e7cd      	b.n	800641c <_strtod_l+0x4cc>
 8006480:	d0ed      	beq.n	800645e <_strtod_l+0x50e>
 8006482:	4276      	negs	r6, r6
 8006484:	f016 020f 	ands.w	r2, r6, #15
 8006488:	d00a      	beq.n	80064a0 <_strtod_l+0x550>
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <_strtod_l+0x590>)
 800648c:	4640      	mov	r0, r8
 800648e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006492:	4649      	mov	r1, r9
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f7fa f952 	bl	8000740 <__aeabi_ddiv>
 800649c:	4680      	mov	r8, r0
 800649e:	4689      	mov	r9, r1
 80064a0:	1136      	asrs	r6, r6, #4
 80064a2:	d0dc      	beq.n	800645e <_strtod_l+0x50e>
 80064a4:	2e1f      	cmp	r6, #31
 80064a6:	dd23      	ble.n	80064f0 <_strtod_l+0x5a0>
 80064a8:	f04f 0b00 	mov.w	fp, #0
 80064ac:	f8cd b010 	str.w	fp, [sp, #16]
 80064b0:	f8cd b020 	str.w	fp, [sp, #32]
 80064b4:	f8cd b018 	str.w	fp, [sp, #24]
 80064b8:	2322      	movs	r3, #34	; 0x22
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	f04f 0900 	mov.w	r9, #0
 80064c2:	f8ca 3000 	str.w	r3, [sl]
 80064c6:	e789      	b.n	80063dc <_strtod_l+0x48c>
 80064c8:	08009cf5 	.word	0x08009cf5
 80064cc:	08009d38 	.word	0x08009d38
 80064d0:	08009ced 	.word	0x08009ced
 80064d4:	08009e7c 	.word	0x08009e7c
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	0800a190 	.word	0x0800a190
 80064e0:	0800a070 	.word	0x0800a070
 80064e4:	0800a048 	.word	0x0800a048
 80064e8:	7ca00000 	.word	0x7ca00000
 80064ec:	7fefffff 	.word	0x7fefffff
 80064f0:	f016 0310 	ands.w	r3, r6, #16
 80064f4:	bf18      	it	ne
 80064f6:	236a      	movne	r3, #106	; 0x6a
 80064f8:	4640      	mov	r0, r8
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	4649      	mov	r1, r9
 80064fe:	2300      	movs	r3, #0
 8006500:	4fb0      	ldr	r7, [pc, #704]	; (80067c4 <_strtod_l+0x874>)
 8006502:	07f2      	lsls	r2, r6, #31
 8006504:	d504      	bpl.n	8006510 <_strtod_l+0x5c0>
 8006506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650a:	f7f9 ffef 	bl	80004ec <__aeabi_dmul>
 800650e:	2301      	movs	r3, #1
 8006510:	1076      	asrs	r6, r6, #1
 8006512:	f107 0708 	add.w	r7, r7, #8
 8006516:	d1f4      	bne.n	8006502 <_strtod_l+0x5b2>
 8006518:	b10b      	cbz	r3, 800651e <_strtod_l+0x5ce>
 800651a:	4680      	mov	r8, r0
 800651c:	4689      	mov	r9, r1
 800651e:	9b05      	ldr	r3, [sp, #20]
 8006520:	b1c3      	cbz	r3, 8006554 <_strtod_l+0x604>
 8006522:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006526:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800652a:	2b00      	cmp	r3, #0
 800652c:	4649      	mov	r1, r9
 800652e:	dd11      	ble.n	8006554 <_strtod_l+0x604>
 8006530:	2b1f      	cmp	r3, #31
 8006532:	f340 8127 	ble.w	8006784 <_strtod_l+0x834>
 8006536:	2b34      	cmp	r3, #52	; 0x34
 8006538:	bfd8      	it	le
 800653a:	f04f 33ff 	movle.w	r3, #4294967295
 800653e:	f04f 0800 	mov.w	r8, #0
 8006542:	bfcf      	iteee	gt
 8006544:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006548:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800654c:	fa03 f202 	lslle.w	r2, r3, r2
 8006550:	ea02 0901 	andle.w	r9, r2, r1
 8006554:	2200      	movs	r2, #0
 8006556:	2300      	movs	r3, #0
 8006558:	4640      	mov	r0, r8
 800655a:	4649      	mov	r1, r9
 800655c:	f7fa fa2e 	bl	80009bc <__aeabi_dcmpeq>
 8006560:	2800      	cmp	r0, #0
 8006562:	d1a1      	bne.n	80064a8 <_strtod_l+0x558>
 8006564:	9b06      	ldr	r3, [sp, #24]
 8006566:	465a      	mov	r2, fp
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4650      	mov	r0, sl
 800656c:	4623      	mov	r3, r4
 800656e:	9908      	ldr	r1, [sp, #32]
 8006570:	f002 f904 	bl	800877c <__s2b>
 8006574:	9008      	str	r0, [sp, #32]
 8006576:	2800      	cmp	r0, #0
 8006578:	f43f af21 	beq.w	80063be <_strtod_l+0x46e>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	f04f 0b00 	mov.w	fp, #0
 8006582:	1b5d      	subs	r5, r3, r5
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	f8cd b010 	str.w	fp, [sp, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfb4      	ite	lt
 800658e:	462b      	movlt	r3, r5
 8006590:	2300      	movge	r3, #0
 8006592:	930e      	str	r3, [sp, #56]	; 0x38
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800659a:	9314      	str	r3, [sp, #80]	; 0x50
 800659c:	9b08      	ldr	r3, [sp, #32]
 800659e:	4650      	mov	r0, sl
 80065a0:	6859      	ldr	r1, [r3, #4]
 80065a2:	f002 f843 	bl	800862c <_Balloc>
 80065a6:	9006      	str	r0, [sp, #24]
 80065a8:	2800      	cmp	r0, #0
 80065aa:	f43f af10 	beq.w	80063ce <_strtod_l+0x47e>
 80065ae:	9b08      	ldr	r3, [sp, #32]
 80065b0:	300c      	adds	r0, #12
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	f103 010c 	add.w	r1, r3, #12
 80065b8:	3202      	adds	r2, #2
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	f002 f828 	bl	8008610 <memcpy>
 80065c0:	ab1c      	add	r3, sp, #112	; 0x70
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	4650      	mov	r0, sl
 80065ce:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80065d2:	f002 fc15 	bl	8008e00 <__d2b>
 80065d6:	901a      	str	r0, [sp, #104]	; 0x68
 80065d8:	2800      	cmp	r0, #0
 80065da:	f43f aef8 	beq.w	80063ce <_strtod_l+0x47e>
 80065de:	2101      	movs	r1, #1
 80065e0:	4650      	mov	r0, sl
 80065e2:	f002 f963 	bl	80088ac <__i2b>
 80065e6:	4603      	mov	r3, r0
 80065e8:	9004      	str	r0, [sp, #16]
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f43f aeef 	beq.w	80063ce <_strtod_l+0x47e>
 80065f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80065f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	bfab      	itete	ge
 80065f8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80065fa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80065fc:	18ee      	addge	r6, r5, r3
 80065fe:	1b5c      	sublt	r4, r3, r5
 8006600:	9b05      	ldr	r3, [sp, #20]
 8006602:	bfa8      	it	ge
 8006604:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006606:	eba5 0503 	sub.w	r5, r5, r3
 800660a:	4415      	add	r5, r2
 800660c:	4b6e      	ldr	r3, [pc, #440]	; (80067c8 <_strtod_l+0x878>)
 800660e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006612:	bfb8      	it	lt
 8006614:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006616:	429d      	cmp	r5, r3
 8006618:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800661c:	f280 80c4 	bge.w	80067a8 <_strtod_l+0x858>
 8006620:	1b5b      	subs	r3, r3, r5
 8006622:	2b1f      	cmp	r3, #31
 8006624:	f04f 0701 	mov.w	r7, #1
 8006628:	eba2 0203 	sub.w	r2, r2, r3
 800662c:	f300 80b1 	bgt.w	8006792 <_strtod_l+0x842>
 8006630:	2500      	movs	r5, #0
 8006632:	fa07 f303 	lsl.w	r3, r7, r3
 8006636:	930f      	str	r3, [sp, #60]	; 0x3c
 8006638:	18b7      	adds	r7, r6, r2
 800663a:	9b05      	ldr	r3, [sp, #20]
 800663c:	42be      	cmp	r6, r7
 800663e:	4414      	add	r4, r2
 8006640:	441c      	add	r4, r3
 8006642:	4633      	mov	r3, r6
 8006644:	bfa8      	it	ge
 8006646:	463b      	movge	r3, r7
 8006648:	42a3      	cmp	r3, r4
 800664a:	bfa8      	it	ge
 800664c:	4623      	movge	r3, r4
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfc2      	ittt	gt
 8006652:	1aff      	subgt	r7, r7, r3
 8006654:	1ae4      	subgt	r4, r4, r3
 8006656:	1af6      	subgt	r6, r6, r3
 8006658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665a:	2b00      	cmp	r3, #0
 800665c:	dd17      	ble.n	800668e <_strtod_l+0x73e>
 800665e:	461a      	mov	r2, r3
 8006660:	4650      	mov	r0, sl
 8006662:	9904      	ldr	r1, [sp, #16]
 8006664:	f002 f9e0 	bl	8008a28 <__pow5mult>
 8006668:	9004      	str	r0, [sp, #16]
 800666a:	2800      	cmp	r0, #0
 800666c:	f43f aeaf 	beq.w	80063ce <_strtod_l+0x47e>
 8006670:	4601      	mov	r1, r0
 8006672:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006674:	4650      	mov	r0, sl
 8006676:	f002 f92f 	bl	80088d8 <__multiply>
 800667a:	9009      	str	r0, [sp, #36]	; 0x24
 800667c:	2800      	cmp	r0, #0
 800667e:	f43f aea6 	beq.w	80063ce <_strtod_l+0x47e>
 8006682:	4650      	mov	r0, sl
 8006684:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006686:	f002 f811 	bl	80086ac <_Bfree>
 800668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668c:	931a      	str	r3, [sp, #104]	; 0x68
 800668e:	2f00      	cmp	r7, #0
 8006690:	f300 808e 	bgt.w	80067b0 <_strtod_l+0x860>
 8006694:	9b07      	ldr	r3, [sp, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	dd08      	ble.n	80066ac <_strtod_l+0x75c>
 800669a:	4650      	mov	r0, sl
 800669c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800669e:	9906      	ldr	r1, [sp, #24]
 80066a0:	f002 f9c2 	bl	8008a28 <__pow5mult>
 80066a4:	9006      	str	r0, [sp, #24]
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f43f ae91 	beq.w	80063ce <_strtod_l+0x47e>
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	dd08      	ble.n	80066c2 <_strtod_l+0x772>
 80066b0:	4622      	mov	r2, r4
 80066b2:	4650      	mov	r0, sl
 80066b4:	9906      	ldr	r1, [sp, #24]
 80066b6:	f002 fa11 	bl	8008adc <__lshift>
 80066ba:	9006      	str	r0, [sp, #24]
 80066bc:	2800      	cmp	r0, #0
 80066be:	f43f ae86 	beq.w	80063ce <_strtod_l+0x47e>
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	dd08      	ble.n	80066d8 <_strtod_l+0x788>
 80066c6:	4632      	mov	r2, r6
 80066c8:	4650      	mov	r0, sl
 80066ca:	9904      	ldr	r1, [sp, #16]
 80066cc:	f002 fa06 	bl	8008adc <__lshift>
 80066d0:	9004      	str	r0, [sp, #16]
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f43f ae7b 	beq.w	80063ce <_strtod_l+0x47e>
 80066d8:	4650      	mov	r0, sl
 80066da:	9a06      	ldr	r2, [sp, #24]
 80066dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066de:	f002 fa89 	bl	8008bf4 <__mdiff>
 80066e2:	4683      	mov	fp, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f43f ae72 	beq.w	80063ce <_strtod_l+0x47e>
 80066ea:	2400      	movs	r4, #0
 80066ec:	68c3      	ldr	r3, [r0, #12]
 80066ee:	9904      	ldr	r1, [sp, #16]
 80066f0:	60c4      	str	r4, [r0, #12]
 80066f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f4:	f002 fa62 	bl	8008bbc <__mcmp>
 80066f8:	42a0      	cmp	r0, r4
 80066fa:	da6b      	bge.n	80067d4 <_strtod_l+0x884>
 80066fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066fe:	ea53 0308 	orrs.w	r3, r3, r8
 8006702:	f040 8091 	bne.w	8006828 <_strtod_l+0x8d8>
 8006706:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 808c 	bne.w	8006828 <_strtod_l+0x8d8>
 8006710:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006714:	0d1b      	lsrs	r3, r3, #20
 8006716:	051b      	lsls	r3, r3, #20
 8006718:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800671c:	f240 8084 	bls.w	8006828 <_strtod_l+0x8d8>
 8006720:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006724:	b91b      	cbnz	r3, 800672e <_strtod_l+0x7de>
 8006726:	f8db 3010 	ldr.w	r3, [fp, #16]
 800672a:	2b01      	cmp	r3, #1
 800672c:	dd7c      	ble.n	8006828 <_strtod_l+0x8d8>
 800672e:	4659      	mov	r1, fp
 8006730:	2201      	movs	r2, #1
 8006732:	4650      	mov	r0, sl
 8006734:	f002 f9d2 	bl	8008adc <__lshift>
 8006738:	9904      	ldr	r1, [sp, #16]
 800673a:	4683      	mov	fp, r0
 800673c:	f002 fa3e 	bl	8008bbc <__mcmp>
 8006740:	2800      	cmp	r0, #0
 8006742:	dd71      	ble.n	8006828 <_strtod_l+0x8d8>
 8006744:	9905      	ldr	r1, [sp, #20]
 8006746:	464b      	mov	r3, r9
 8006748:	4a20      	ldr	r2, [pc, #128]	; (80067cc <_strtod_l+0x87c>)
 800674a:	2900      	cmp	r1, #0
 800674c:	f000 808c 	beq.w	8006868 <_strtod_l+0x918>
 8006750:	ea02 0109 	and.w	r1, r2, r9
 8006754:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006758:	f300 8086 	bgt.w	8006868 <_strtod_l+0x918>
 800675c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006760:	f77f aeaa 	ble.w	80064b8 <_strtod_l+0x568>
 8006764:	4640      	mov	r0, r8
 8006766:	4649      	mov	r1, r9
 8006768:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <_strtod_l+0x880>)
 800676a:	2200      	movs	r2, #0
 800676c:	f7f9 febe 	bl	80004ec <__aeabi_dmul>
 8006770:	460b      	mov	r3, r1
 8006772:	4303      	orrs	r3, r0
 8006774:	bf08      	it	eq
 8006776:	2322      	moveq	r3, #34	; 0x22
 8006778:	4680      	mov	r8, r0
 800677a:	4689      	mov	r9, r1
 800677c:	bf08      	it	eq
 800677e:	f8ca 3000 	streq.w	r3, [sl]
 8006782:	e62f      	b.n	80063e4 <_strtod_l+0x494>
 8006784:	f04f 32ff 	mov.w	r2, #4294967295
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	ea03 0808 	and.w	r8, r3, r8
 8006790:	e6e0      	b.n	8006554 <_strtod_l+0x604>
 8006792:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006796:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800679a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800679e:	35e2      	adds	r5, #226	; 0xe2
 80067a0:	fa07 f505 	lsl.w	r5, r7, r5
 80067a4:	970f      	str	r7, [sp, #60]	; 0x3c
 80067a6:	e747      	b.n	8006638 <_strtod_l+0x6e8>
 80067a8:	2301      	movs	r3, #1
 80067aa:	2500      	movs	r5, #0
 80067ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ae:	e743      	b.n	8006638 <_strtod_l+0x6e8>
 80067b0:	463a      	mov	r2, r7
 80067b2:	4650      	mov	r0, sl
 80067b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067b6:	f002 f991 	bl	8008adc <__lshift>
 80067ba:	901a      	str	r0, [sp, #104]	; 0x68
 80067bc:	2800      	cmp	r0, #0
 80067be:	f47f af69 	bne.w	8006694 <_strtod_l+0x744>
 80067c2:	e604      	b.n	80063ce <_strtod_l+0x47e>
 80067c4:	08009d50 	.word	0x08009d50
 80067c8:	fffffc02 	.word	0xfffffc02
 80067cc:	7ff00000 	.word	0x7ff00000
 80067d0:	39500000 	.word	0x39500000
 80067d4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067d8:	d165      	bne.n	80068a6 <_strtod_l+0x956>
 80067da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067e0:	b35a      	cbz	r2, 800683a <_strtod_l+0x8ea>
 80067e2:	4a99      	ldr	r2, [pc, #612]	; (8006a48 <_strtod_l+0xaf8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d12b      	bne.n	8006840 <_strtod_l+0x8f0>
 80067e8:	9b05      	ldr	r3, [sp, #20]
 80067ea:	4641      	mov	r1, r8
 80067ec:	b303      	cbz	r3, 8006830 <_strtod_l+0x8e0>
 80067ee:	464a      	mov	r2, r9
 80067f0:	4b96      	ldr	r3, [pc, #600]	; (8006a4c <_strtod_l+0xafc>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	d81b      	bhi.n	8006836 <_strtod_l+0x8e6>
 80067fe:	0d1b      	lsrs	r3, r3, #20
 8006800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	4299      	cmp	r1, r3
 800680a:	d119      	bne.n	8006840 <_strtod_l+0x8f0>
 800680c:	4b90      	ldr	r3, [pc, #576]	; (8006a50 <_strtod_l+0xb00>)
 800680e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006810:	429a      	cmp	r2, r3
 8006812:	d102      	bne.n	800681a <_strtod_l+0x8ca>
 8006814:	3101      	adds	r1, #1
 8006816:	f43f adda 	beq.w	80063ce <_strtod_l+0x47e>
 800681a:	f04f 0800 	mov.w	r8, #0
 800681e:	4b8b      	ldr	r3, [pc, #556]	; (8006a4c <_strtod_l+0xafc>)
 8006820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006822:	401a      	ands	r2, r3
 8006824:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006828:	9b05      	ldr	r3, [sp, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d19a      	bne.n	8006764 <_strtod_l+0x814>
 800682e:	e5d9      	b.n	80063e4 <_strtod_l+0x494>
 8006830:	f04f 33ff 	mov.w	r3, #4294967295
 8006834:	e7e8      	b.n	8006808 <_strtod_l+0x8b8>
 8006836:	4613      	mov	r3, r2
 8006838:	e7e6      	b.n	8006808 <_strtod_l+0x8b8>
 800683a:	ea53 0308 	orrs.w	r3, r3, r8
 800683e:	d081      	beq.n	8006744 <_strtod_l+0x7f4>
 8006840:	b1e5      	cbz	r5, 800687c <_strtod_l+0x92c>
 8006842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006844:	421d      	tst	r5, r3
 8006846:	d0ef      	beq.n	8006828 <_strtod_l+0x8d8>
 8006848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	9a05      	ldr	r2, [sp, #20]
 8006850:	b1c3      	cbz	r3, 8006884 <_strtod_l+0x934>
 8006852:	f7ff fb5c 	bl	8005f0e <sulp>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800685e:	f7f9 fc8f 	bl	8000180 <__adddf3>
 8006862:	4680      	mov	r8, r0
 8006864:	4689      	mov	r9, r1
 8006866:	e7df      	b.n	8006828 <_strtod_l+0x8d8>
 8006868:	4013      	ands	r3, r2
 800686a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800686e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006872:	f04f 38ff 	mov.w	r8, #4294967295
 8006876:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800687a:	e7d5      	b.n	8006828 <_strtod_l+0x8d8>
 800687c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800687e:	ea13 0f08 	tst.w	r3, r8
 8006882:	e7e0      	b.n	8006846 <_strtod_l+0x8f6>
 8006884:	f7ff fb43 	bl	8005f0e <sulp>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006890:	f7f9 fc74 	bl	800017c <__aeabi_dsub>
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	4680      	mov	r8, r0
 800689a:	4689      	mov	r9, r1
 800689c:	f7fa f88e 	bl	80009bc <__aeabi_dcmpeq>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d0c1      	beq.n	8006828 <_strtod_l+0x8d8>
 80068a4:	e608      	b.n	80064b8 <_strtod_l+0x568>
 80068a6:	4658      	mov	r0, fp
 80068a8:	9904      	ldr	r1, [sp, #16]
 80068aa:	f002 fb05 	bl	8008eb8 <__ratio>
 80068ae:	2200      	movs	r2, #0
 80068b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068b4:	4606      	mov	r6, r0
 80068b6:	460f      	mov	r7, r1
 80068b8:	f7fa f894 	bl	80009e4 <__aeabi_dcmple>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d070      	beq.n	80069a2 <_strtod_l+0xa52>
 80068c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d042      	beq.n	800694c <_strtod_l+0x9fc>
 80068c6:	2600      	movs	r6, #0
 80068c8:	4f62      	ldr	r7, [pc, #392]	; (8006a54 <_strtod_l+0xb04>)
 80068ca:	4d62      	ldr	r5, [pc, #392]	; (8006a54 <_strtod_l+0xb04>)
 80068cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	0d1b      	lsrs	r3, r3, #20
 80068d4:	051b      	lsls	r3, r3, #20
 80068d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068da:	4b5f      	ldr	r3, [pc, #380]	; (8006a58 <_strtod_l+0xb08>)
 80068dc:	429a      	cmp	r2, r3
 80068de:	f040 80c3 	bne.w	8006a68 <_strtod_l+0xb18>
 80068e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e4:	4640      	mov	r0, r8
 80068e6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80068ea:	4649      	mov	r1, r9
 80068ec:	f002 fa0e 	bl	8008d0c <__ulp>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7f9 fdf8 	bl	80004ec <__aeabi_dmul>
 80068fc:	4642      	mov	r2, r8
 80068fe:	464b      	mov	r3, r9
 8006900:	f7f9 fc3e 	bl	8000180 <__adddf3>
 8006904:	460b      	mov	r3, r1
 8006906:	4951      	ldr	r1, [pc, #324]	; (8006a4c <_strtod_l+0xafc>)
 8006908:	4a54      	ldr	r2, [pc, #336]	; (8006a5c <_strtod_l+0xb0c>)
 800690a:	4019      	ands	r1, r3
 800690c:	4291      	cmp	r1, r2
 800690e:	4680      	mov	r8, r0
 8006910:	d95d      	bls.n	80069ce <_strtod_l+0xa7e>
 8006912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006914:	4b4e      	ldr	r3, [pc, #312]	; (8006a50 <_strtod_l+0xb00>)
 8006916:	429a      	cmp	r2, r3
 8006918:	d103      	bne.n	8006922 <_strtod_l+0x9d2>
 800691a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800691c:	3301      	adds	r3, #1
 800691e:	f43f ad56 	beq.w	80063ce <_strtod_l+0x47e>
 8006922:	f04f 38ff 	mov.w	r8, #4294967295
 8006926:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006a50 <_strtod_l+0xb00>
 800692a:	4650      	mov	r0, sl
 800692c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800692e:	f001 febd 	bl	80086ac <_Bfree>
 8006932:	4650      	mov	r0, sl
 8006934:	9906      	ldr	r1, [sp, #24]
 8006936:	f001 feb9 	bl	80086ac <_Bfree>
 800693a:	4650      	mov	r0, sl
 800693c:	9904      	ldr	r1, [sp, #16]
 800693e:	f001 feb5 	bl	80086ac <_Bfree>
 8006942:	4659      	mov	r1, fp
 8006944:	4650      	mov	r0, sl
 8006946:	f001 feb1 	bl	80086ac <_Bfree>
 800694a:	e627      	b.n	800659c <_strtod_l+0x64c>
 800694c:	f1b8 0f00 	cmp.w	r8, #0
 8006950:	d119      	bne.n	8006986 <_strtod_l+0xa36>
 8006952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006958:	b9e3      	cbnz	r3, 8006994 <_strtod_l+0xa44>
 800695a:	2200      	movs	r2, #0
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	4b3c      	ldr	r3, [pc, #240]	; (8006a54 <_strtod_l+0xb04>)
 8006962:	f7fa f835 	bl	80009d0 <__aeabi_dcmplt>
 8006966:	b9c8      	cbnz	r0, 800699c <_strtod_l+0xa4c>
 8006968:	2200      	movs	r2, #0
 800696a:	4630      	mov	r0, r6
 800696c:	4639      	mov	r1, r7
 800696e:	4b3c      	ldr	r3, [pc, #240]	; (8006a60 <_strtod_l+0xb10>)
 8006970:	f7f9 fdbc 	bl	80004ec <__aeabi_dmul>
 8006974:	4604      	mov	r4, r0
 8006976:	460d      	mov	r5, r1
 8006978:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800697c:	9416      	str	r4, [sp, #88]	; 0x58
 800697e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006980:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006984:	e7a2      	b.n	80068cc <_strtod_l+0x97c>
 8006986:	f1b8 0f01 	cmp.w	r8, #1
 800698a:	d103      	bne.n	8006994 <_strtod_l+0xa44>
 800698c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	f43f ad92 	beq.w	80064b8 <_strtod_l+0x568>
 8006994:	2600      	movs	r6, #0
 8006996:	2400      	movs	r4, #0
 8006998:	4f32      	ldr	r7, [pc, #200]	; (8006a64 <_strtod_l+0xb14>)
 800699a:	e796      	b.n	80068ca <_strtod_l+0x97a>
 800699c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800699e:	4d30      	ldr	r5, [pc, #192]	; (8006a60 <_strtod_l+0xb10>)
 80069a0:	e7ea      	b.n	8006978 <_strtod_l+0xa28>
 80069a2:	4b2f      	ldr	r3, [pc, #188]	; (8006a60 <_strtod_l+0xb10>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	4630      	mov	r0, r6
 80069a8:	4639      	mov	r1, r7
 80069aa:	f7f9 fd9f 	bl	80004ec <__aeabi_dmul>
 80069ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	b933      	cbnz	r3, 80069c4 <_strtod_l+0xa74>
 80069b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ba:	9010      	str	r0, [sp, #64]	; 0x40
 80069bc:	9311      	str	r3, [sp, #68]	; 0x44
 80069be:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069c2:	e783      	b.n	80068cc <_strtod_l+0x97c>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80069cc:	e7f7      	b.n	80069be <_strtod_l+0xa6e>
 80069ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80069d2:	9b05      	ldr	r3, [sp, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1a8      	bne.n	800692a <_strtod_l+0x9da>
 80069d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069de:	0d1b      	lsrs	r3, r3, #20
 80069e0:	051b      	lsls	r3, r3, #20
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d1a1      	bne.n	800692a <_strtod_l+0x9da>
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa fbc1 	bl	8001170 <__aeabi_d2lz>
 80069ee:	f7f9 fd4f 	bl	8000490 <__aeabi_l2d>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 fbbf 	bl	800017c <__aeabi_dsub>
 80069fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a04:	ea43 0308 	orr.w	r3, r3, r8
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	d066      	beq.n	8006ade <_strtod_l+0xb8e>
 8006a10:	a309      	add	r3, pc, #36	; (adr r3, 8006a38 <_strtod_l+0xae8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 ffdb 	bl	80009d0 <__aeabi_dcmplt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f47f ace2 	bne.w	80063e4 <_strtod_l+0x494>
 8006a20:	a307      	add	r3, pc, #28	; (adr r3, 8006a40 <_strtod_l+0xaf0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7f9 ffef 	bl	8000a0c <__aeabi_dcmpgt>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f43f af7b 	beq.w	800692a <_strtod_l+0x9da>
 8006a34:	e4d6      	b.n	80063e4 <_strtod_l+0x494>
 8006a36:	bf00      	nop
 8006a38:	94a03595 	.word	0x94a03595
 8006a3c:	3fdfffff 	.word	0x3fdfffff
 8006a40:	35afe535 	.word	0x35afe535
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	000fffff 	.word	0x000fffff
 8006a4c:	7ff00000 	.word	0x7ff00000
 8006a50:	7fefffff 	.word	0x7fefffff
 8006a54:	3ff00000 	.word	0x3ff00000
 8006a58:	7fe00000 	.word	0x7fe00000
 8006a5c:	7c9fffff 	.word	0x7c9fffff
 8006a60:	3fe00000 	.word	0x3fe00000
 8006a64:	bff00000 	.word	0xbff00000
 8006a68:	9b05      	ldr	r3, [sp, #20]
 8006a6a:	b313      	cbz	r3, 8006ab2 <_strtod_l+0xb62>
 8006a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a72:	d81e      	bhi.n	8006ab2 <_strtod_l+0xb62>
 8006a74:	a326      	add	r3, pc, #152	; (adr r3, 8006b10 <_strtod_l+0xbc0>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7f9 ffb1 	bl	80009e4 <__aeabi_dcmple>
 8006a82:	b190      	cbz	r0, 8006aaa <_strtod_l+0xb5a>
 8006a84:	4629      	mov	r1, r5
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7fa f808 	bl	8000a9c <__aeabi_d2uiz>
 8006a8c:	2801      	cmp	r0, #1
 8006a8e:	bf38      	it	cc
 8006a90:	2001      	movcc	r0, #1
 8006a92:	f7f9 fcb1 	bl	80003f8 <__aeabi_ui2d>
 8006a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a98:	4604      	mov	r4, r0
 8006a9a:	460d      	mov	r5, r1
 8006a9c:	b9d3      	cbnz	r3, 8006ad4 <_strtod_l+0xb84>
 8006a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006aa2:	9012      	str	r0, [sp, #72]	; 0x48
 8006aa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006aa6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006aaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006ab0:	1a9f      	subs	r7, r3, r2
 8006ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ab6:	f002 f929 	bl	8008d0c <__ulp>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4630      	mov	r0, r6
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	f7f9 fd13 	bl	80004ec <__aeabi_dmul>
 8006ac6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006aca:	f7f9 fb59 	bl	8000180 <__adddf3>
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4689      	mov	r9, r1
 8006ad2:	e77e      	b.n	80069d2 <_strtod_l+0xa82>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006adc:	e7e3      	b.n	8006aa6 <_strtod_l+0xb56>
 8006ade:	a30e      	add	r3, pc, #56	; (adr r3, 8006b18 <_strtod_l+0xbc8>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 ff74 	bl	80009d0 <__aeabi_dcmplt>
 8006ae8:	e7a1      	b.n	8006a2e <_strtod_l+0xade>
 8006aea:	2300      	movs	r3, #0
 8006aec:	930a      	str	r3, [sp, #40]	; 0x28
 8006aee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006af0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	f7ff ba71 	b.w	8005fda <_strtod_l+0x8a>
 8006af8:	2a65      	cmp	r2, #101	; 0x65
 8006afa:	f43f ab63 	beq.w	80061c4 <_strtod_l+0x274>
 8006afe:	2a45      	cmp	r2, #69	; 0x45
 8006b00:	f43f ab60 	beq.w	80061c4 <_strtod_l+0x274>
 8006b04:	2301      	movs	r3, #1
 8006b06:	f7ff bb95 	b.w	8006234 <_strtod_l+0x2e4>
 8006b0a:	bf00      	nop
 8006b0c:	f3af 8000 	nop.w
 8006b10:	ffc00000 	.word	0xffc00000
 8006b14:	41dfffff 	.word	0x41dfffff
 8006b18:	94a03595 	.word	0x94a03595
 8006b1c:	3fcfffff 	.word	0x3fcfffff

08006b20 <_strtod_r>:
 8006b20:	4b01      	ldr	r3, [pc, #4]	; (8006b28 <_strtod_r+0x8>)
 8006b22:	f7ff ba15 	b.w	8005f50 <_strtod_l>
 8006b26:	bf00      	nop
 8006b28:	200000c4 	.word	0x200000c4

08006b2c <_strtol_l.constprop.0>:
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b32:	4680      	mov	r8, r0
 8006b34:	d001      	beq.n	8006b3a <_strtol_l.constprop.0+0xe>
 8006b36:	2b24      	cmp	r3, #36	; 0x24
 8006b38:	d906      	bls.n	8006b48 <_strtol_l.constprop.0+0x1c>
 8006b3a:	f7fe fa83 	bl	8005044 <__errno>
 8006b3e:	2316      	movs	r3, #22
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	2000      	movs	r0, #0
 8006b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b48:	460d      	mov	r5, r1
 8006b4a:	4f35      	ldr	r7, [pc, #212]	; (8006c20 <_strtol_l.constprop.0+0xf4>)
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b52:	5de6      	ldrb	r6, [r4, r7]
 8006b54:	f016 0608 	ands.w	r6, r6, #8
 8006b58:	d1f8      	bne.n	8006b4c <_strtol_l.constprop.0+0x20>
 8006b5a:	2c2d      	cmp	r4, #45	; 0x2d
 8006b5c:	d12f      	bne.n	8006bbe <_strtol_l.constprop.0+0x92>
 8006b5e:	2601      	movs	r6, #1
 8006b60:	782c      	ldrb	r4, [r5, #0]
 8006b62:	1c85      	adds	r5, r0, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d057      	beq.n	8006c18 <_strtol_l.constprop.0+0xec>
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d109      	bne.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006b6c:	2c30      	cmp	r4, #48	; 0x30
 8006b6e:	d107      	bne.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006b70:	7828      	ldrb	r0, [r5, #0]
 8006b72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006b76:	2858      	cmp	r0, #88	; 0x58
 8006b78:	d149      	bne.n	8006c0e <_strtol_l.constprop.0+0xe2>
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	786c      	ldrb	r4, [r5, #1]
 8006b7e:	3502      	adds	r5, #2
 8006b80:	2700      	movs	r7, #0
 8006b82:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006b86:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006b8a:	fbbe f9f3 	udiv	r9, lr, r3
 8006b8e:	4638      	mov	r0, r7
 8006b90:	fb03 ea19 	mls	sl, r3, r9, lr
 8006b94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006b98:	f1bc 0f09 	cmp.w	ip, #9
 8006b9c:	d814      	bhi.n	8006bc8 <_strtol_l.constprop.0+0x9c>
 8006b9e:	4664      	mov	r4, ip
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	dd22      	ble.n	8006bea <_strtol_l.constprop.0+0xbe>
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	db1d      	blt.n	8006be4 <_strtol_l.constprop.0+0xb8>
 8006ba8:	4581      	cmp	r9, r0
 8006baa:	d31b      	bcc.n	8006be4 <_strtol_l.constprop.0+0xb8>
 8006bac:	d101      	bne.n	8006bb2 <_strtol_l.constprop.0+0x86>
 8006bae:	45a2      	cmp	sl, r4
 8006bb0:	db18      	blt.n	8006be4 <_strtol_l.constprop.0+0xb8>
 8006bb2:	2701      	movs	r7, #1
 8006bb4:	fb00 4003 	mla	r0, r0, r3, r4
 8006bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bbc:	e7ea      	b.n	8006b94 <_strtol_l.constprop.0+0x68>
 8006bbe:	2c2b      	cmp	r4, #43	; 0x2b
 8006bc0:	bf04      	itt	eq
 8006bc2:	782c      	ldrbeq	r4, [r5, #0]
 8006bc4:	1c85      	addeq	r5, r0, #2
 8006bc6:	e7cd      	b.n	8006b64 <_strtol_l.constprop.0+0x38>
 8006bc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006bcc:	f1bc 0f19 	cmp.w	ip, #25
 8006bd0:	d801      	bhi.n	8006bd6 <_strtol_l.constprop.0+0xaa>
 8006bd2:	3c37      	subs	r4, #55	; 0x37
 8006bd4:	e7e4      	b.n	8006ba0 <_strtol_l.constprop.0+0x74>
 8006bd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006bda:	f1bc 0f19 	cmp.w	ip, #25
 8006bde:	d804      	bhi.n	8006bea <_strtol_l.constprop.0+0xbe>
 8006be0:	3c57      	subs	r4, #87	; 0x57
 8006be2:	e7dd      	b.n	8006ba0 <_strtol_l.constprop.0+0x74>
 8006be4:	f04f 37ff 	mov.w	r7, #4294967295
 8006be8:	e7e6      	b.n	8006bb8 <_strtol_l.constprop.0+0x8c>
 8006bea:	2f00      	cmp	r7, #0
 8006bec:	da07      	bge.n	8006bfe <_strtol_l.constprop.0+0xd2>
 8006bee:	2322      	movs	r3, #34	; 0x22
 8006bf0:	4670      	mov	r0, lr
 8006bf2:	f8c8 3000 	str.w	r3, [r8]
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	d0a4      	beq.n	8006b44 <_strtol_l.constprop.0+0x18>
 8006bfa:	1e69      	subs	r1, r5, #1
 8006bfc:	e005      	b.n	8006c0a <_strtol_l.constprop.0+0xde>
 8006bfe:	b106      	cbz	r6, 8006c02 <_strtol_l.constprop.0+0xd6>
 8006c00:	4240      	negs	r0, r0
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d09e      	beq.n	8006b44 <_strtol_l.constprop.0+0x18>
 8006c06:	2f00      	cmp	r7, #0
 8006c08:	d1f7      	bne.n	8006bfa <_strtol_l.constprop.0+0xce>
 8006c0a:	6011      	str	r1, [r2, #0]
 8006c0c:	e79a      	b.n	8006b44 <_strtol_l.constprop.0+0x18>
 8006c0e:	2430      	movs	r4, #48	; 0x30
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1b5      	bne.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006c14:	2308      	movs	r3, #8
 8006c16:	e7b3      	b.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006c18:	2c30      	cmp	r4, #48	; 0x30
 8006c1a:	d0a9      	beq.n	8006b70 <_strtol_l.constprop.0+0x44>
 8006c1c:	230a      	movs	r3, #10
 8006c1e:	e7af      	b.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006c20:	08009d79 	.word	0x08009d79

08006c24 <_strtol_r>:
 8006c24:	f7ff bf82 	b.w	8006b2c <_strtol_l.constprop.0>

08006c28 <strtol>:
 8006c28:	4613      	mov	r3, r2
 8006c2a:	460a      	mov	r2, r1
 8006c2c:	4601      	mov	r1, r0
 8006c2e:	4802      	ldr	r0, [pc, #8]	; (8006c38 <strtol+0x10>)
 8006c30:	6800      	ldr	r0, [r0, #0]
 8006c32:	f7ff bf7b 	b.w	8006b2c <_strtol_l.constprop.0>
 8006c36:	bf00      	nop
 8006c38:	2000005c 	.word	0x2000005c

08006c3c <__swbuf_r>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	460e      	mov	r6, r1
 8006c40:	4614      	mov	r4, r2
 8006c42:	4605      	mov	r5, r0
 8006c44:	b118      	cbz	r0, 8006c4e <__swbuf_r+0x12>
 8006c46:	6983      	ldr	r3, [r0, #24]
 8006c48:	b90b      	cbnz	r3, 8006c4e <__swbuf_r+0x12>
 8006c4a:	f001 f849 	bl	8007ce0 <__sinit>
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <__swbuf_r+0x98>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	d12b      	bne.n	8006cac <__swbuf_r+0x70>
 8006c54:	686c      	ldr	r4, [r5, #4]
 8006c56:	69a3      	ldr	r3, [r4, #24]
 8006c58:	60a3      	str	r3, [r4, #8]
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	071a      	lsls	r2, r3, #28
 8006c5e:	d52f      	bpl.n	8006cc0 <__swbuf_r+0x84>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b36b      	cbz	r3, 8006cc0 <__swbuf_r+0x84>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	6820      	ldr	r0, [r4, #0]
 8006c68:	b2f6      	uxtb	r6, r6
 8006c6a:	1ac0      	subs	r0, r0, r3
 8006c6c:	6963      	ldr	r3, [r4, #20]
 8006c6e:	4637      	mov	r7, r6
 8006c70:	4283      	cmp	r3, r0
 8006c72:	dc04      	bgt.n	8006c7e <__swbuf_r+0x42>
 8006c74:	4621      	mov	r1, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 ff9e 	bl	8007bb8 <_fflush_r>
 8006c7c:	bb30      	cbnz	r0, 8006ccc <__swbuf_r+0x90>
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	3001      	adds	r0, #1
 8006c82:	3b01      	subs	r3, #1
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	6022      	str	r2, [r4, #0]
 8006c8c:	701e      	strb	r6, [r3, #0]
 8006c8e:	6963      	ldr	r3, [r4, #20]
 8006c90:	4283      	cmp	r3, r0
 8006c92:	d004      	beq.n	8006c9e <__swbuf_r+0x62>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	07db      	lsls	r3, r3, #31
 8006c98:	d506      	bpl.n	8006ca8 <__swbuf_r+0x6c>
 8006c9a:	2e0a      	cmp	r6, #10
 8006c9c:	d104      	bne.n	8006ca8 <__swbuf_r+0x6c>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f000 ff89 	bl	8007bb8 <_fflush_r>
 8006ca6:	b988      	cbnz	r0, 8006ccc <__swbuf_r+0x90>
 8006ca8:	4638      	mov	r0, r7
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <__swbuf_r+0x9c>)
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	d101      	bne.n	8006cb6 <__swbuf_r+0x7a>
 8006cb2:	68ac      	ldr	r4, [r5, #8]
 8006cb4:	e7cf      	b.n	8006c56 <__swbuf_r+0x1a>
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <__swbuf_r+0xa0>)
 8006cb8:	429c      	cmp	r4, r3
 8006cba:	bf08      	it	eq
 8006cbc:	68ec      	ldreq	r4, [r5, #12]
 8006cbe:	e7ca      	b.n	8006c56 <__swbuf_r+0x1a>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f80c 	bl	8006ce0 <__swsetup_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d0cb      	beq.n	8006c64 <__swbuf_r+0x28>
 8006ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd0:	e7ea      	b.n	8006ca8 <__swbuf_r+0x6c>
 8006cd2:	bf00      	nop
 8006cd4:	08009f2c 	.word	0x08009f2c
 8006cd8:	08009f4c 	.word	0x08009f4c
 8006cdc:	08009f0c 	.word	0x08009f0c

08006ce0 <__swsetup_r>:
 8006ce0:	4b32      	ldr	r3, [pc, #200]	; (8006dac <__swsetup_r+0xcc>)
 8006ce2:	b570      	push	{r4, r5, r6, lr}
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	b125      	cbz	r5, 8006cf6 <__swsetup_r+0x16>
 8006cec:	69ab      	ldr	r3, [r5, #24]
 8006cee:	b913      	cbnz	r3, 8006cf6 <__swsetup_r+0x16>
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f000 fff5 	bl	8007ce0 <__sinit>
 8006cf6:	4b2e      	ldr	r3, [pc, #184]	; (8006db0 <__swsetup_r+0xd0>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	d10f      	bne.n	8006d1c <__swsetup_r+0x3c>
 8006cfc:	686c      	ldr	r4, [r5, #4]
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d04:	0719      	lsls	r1, r3, #28
 8006d06:	d42c      	bmi.n	8006d62 <__swsetup_r+0x82>
 8006d08:	06dd      	lsls	r5, r3, #27
 8006d0a:	d411      	bmi.n	8006d30 <__swsetup_r+0x50>
 8006d0c:	2309      	movs	r3, #9
 8006d0e:	6033      	str	r3, [r6, #0]
 8006d10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	e03e      	b.n	8006d9a <__swsetup_r+0xba>
 8006d1c:	4b25      	ldr	r3, [pc, #148]	; (8006db4 <__swsetup_r+0xd4>)
 8006d1e:	429c      	cmp	r4, r3
 8006d20:	d101      	bne.n	8006d26 <__swsetup_r+0x46>
 8006d22:	68ac      	ldr	r4, [r5, #8]
 8006d24:	e7eb      	b.n	8006cfe <__swsetup_r+0x1e>
 8006d26:	4b24      	ldr	r3, [pc, #144]	; (8006db8 <__swsetup_r+0xd8>)
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	bf08      	it	eq
 8006d2c:	68ec      	ldreq	r4, [r5, #12]
 8006d2e:	e7e6      	b.n	8006cfe <__swsetup_r+0x1e>
 8006d30:	0758      	lsls	r0, r3, #29
 8006d32:	d512      	bpl.n	8006d5a <__swsetup_r+0x7a>
 8006d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d36:	b141      	cbz	r1, 8006d4a <__swsetup_r+0x6a>
 8006d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	d002      	beq.n	8006d46 <__swsetup_r+0x66>
 8006d40:	4630      	mov	r0, r6
 8006d42:	f002 f93f 	bl	8008fc4 <_free_r>
 8006d46:	2300      	movs	r3, #0
 8006d48:	6363      	str	r3, [r4, #52]	; 0x34
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d50:	81a3      	strh	r3, [r4, #12]
 8006d52:	2300      	movs	r3, #0
 8006d54:	6063      	str	r3, [r4, #4]
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f043 0308 	orr.w	r3, r3, #8
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	b94b      	cbnz	r3, 8006d7a <__swsetup_r+0x9a>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d70:	d003      	beq.n	8006d7a <__swsetup_r+0x9a>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4630      	mov	r0, r6
 8006d76:	f001 fbe3 	bl	8008540 <__smakebuf_r>
 8006d7a:	89a0      	ldrh	r0, [r4, #12]
 8006d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d80:	f010 0301 	ands.w	r3, r0, #1
 8006d84:	d00a      	beq.n	8006d9c <__swsetup_r+0xbc>
 8006d86:	2300      	movs	r3, #0
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	6963      	ldr	r3, [r4, #20]
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	61a3      	str	r3, [r4, #24]
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	b943      	cbnz	r3, 8006da6 <__swsetup_r+0xc6>
 8006d94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d98:	d1ba      	bne.n	8006d10 <__swsetup_r+0x30>
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	0781      	lsls	r1, r0, #30
 8006d9e:	bf58      	it	pl
 8006da0:	6963      	ldrpl	r3, [r4, #20]
 8006da2:	60a3      	str	r3, [r4, #8]
 8006da4:	e7f4      	b.n	8006d90 <__swsetup_r+0xb0>
 8006da6:	2000      	movs	r0, #0
 8006da8:	e7f7      	b.n	8006d9a <__swsetup_r+0xba>
 8006daa:	bf00      	nop
 8006dac:	2000005c 	.word	0x2000005c
 8006db0:	08009f2c 	.word	0x08009f2c
 8006db4:	08009f4c 	.word	0x08009f4c
 8006db8:	08009f0c 	.word	0x08009f0c

08006dbc <quorem>:
 8006dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc0:	6903      	ldr	r3, [r0, #16]
 8006dc2:	690c      	ldr	r4, [r1, #16]
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	f2c0 8082 	blt.w	8006ed0 <quorem+0x114>
 8006dcc:	3c01      	subs	r4, #1
 8006dce:	f100 0514 	add.w	r5, r0, #20
 8006dd2:	f101 0814 	add.w	r8, r1, #20
 8006dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006de4:	3301      	adds	r3, #1
 8006de6:	429a      	cmp	r2, r3
 8006de8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006df0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006df4:	d331      	bcc.n	8006e5a <quorem+0x9e>
 8006df6:	f04f 0e00 	mov.w	lr, #0
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	46ac      	mov	ip, r5
 8006dfe:	46f2      	mov	sl, lr
 8006e00:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e04:	b293      	uxth	r3, r2
 8006e06:	fb06 e303 	mla	r3, r6, r3, lr
 8006e0a:	0c12      	lsrs	r2, r2, #16
 8006e0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	fb06 e202 	mla	r2, r6, r2, lr
 8006e16:	ebaa 0303 	sub.w	r3, sl, r3
 8006e1a:	f8dc a000 	ldr.w	sl, [ip]
 8006e1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e22:	fa1f fa8a 	uxth.w	sl, sl
 8006e26:	4453      	add	r3, sl
 8006e28:	f8dc a000 	ldr.w	sl, [ip]
 8006e2c:	b292      	uxth	r2, r2
 8006e2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3c:	4581      	cmp	r9, r0
 8006e3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e42:	f84c 3b04 	str.w	r3, [ip], #4
 8006e46:	d2db      	bcs.n	8006e00 <quorem+0x44>
 8006e48:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e4c:	b92b      	cbnz	r3, 8006e5a <quorem+0x9e>
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	429d      	cmp	r5, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	d32f      	bcc.n	8006eb8 <quorem+0xfc>
 8006e58:	613c      	str	r4, [r7, #16]
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	f001 feae 	bl	8008bbc <__mcmp>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	db25      	blt.n	8006eb0 <quorem+0xf4>
 8006e64:	4628      	mov	r0, r5
 8006e66:	f04f 0c00 	mov.w	ip, #0
 8006e6a:	3601      	adds	r6, #1
 8006e6c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006e70:	f8d0 e000 	ldr.w	lr, [r0]
 8006e74:	b28b      	uxth	r3, r1
 8006e76:	ebac 0303 	sub.w	r3, ip, r3
 8006e7a:	fa1f f28e 	uxth.w	r2, lr
 8006e7e:	4413      	add	r3, r2
 8006e80:	0c0a      	lsrs	r2, r1, #16
 8006e82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e90:	45c1      	cmp	r9, r8
 8006e92:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e96:	f840 3b04 	str.w	r3, [r0], #4
 8006e9a:	d2e7      	bcs.n	8006e6c <quorem+0xb0>
 8006e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea4:	b922      	cbnz	r2, 8006eb0 <quorem+0xf4>
 8006ea6:	3b04      	subs	r3, #4
 8006ea8:	429d      	cmp	r5, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	d30a      	bcc.n	8006ec4 <quorem+0x108>
 8006eae:	613c      	str	r4, [r7, #16]
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	b003      	add	sp, #12
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	3b04      	subs	r3, #4
 8006ebc:	2a00      	cmp	r2, #0
 8006ebe:	d1cb      	bne.n	8006e58 <quorem+0x9c>
 8006ec0:	3c01      	subs	r4, #1
 8006ec2:	e7c6      	b.n	8006e52 <quorem+0x96>
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	3b04      	subs	r3, #4
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	d1f0      	bne.n	8006eae <quorem+0xf2>
 8006ecc:	3c01      	subs	r4, #1
 8006ece:	e7eb      	b.n	8006ea8 <quorem+0xec>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e7ee      	b.n	8006eb2 <quorem+0xf6>
 8006ed4:	0000      	movs	r0, r0
	...

08006ed8 <_dtoa_r>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	4616      	mov	r6, r2
 8006ede:	461f      	mov	r7, r3
 8006ee0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ee2:	b099      	sub	sp, #100	; 0x64
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006eea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006eee:	b974      	cbnz	r4, 8006f0e <_dtoa_r+0x36>
 8006ef0:	2010      	movs	r0, #16
 8006ef2:	f001 fb65 	bl	80085c0 <malloc>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6268      	str	r0, [r5, #36]	; 0x24
 8006efa:	b920      	cbnz	r0, 8006f06 <_dtoa_r+0x2e>
 8006efc:	21ea      	movs	r1, #234	; 0xea
 8006efe:	4ba8      	ldr	r3, [pc, #672]	; (80071a0 <_dtoa_r+0x2c8>)
 8006f00:	48a8      	ldr	r0, [pc, #672]	; (80071a4 <_dtoa_r+0x2cc>)
 8006f02:	f002 fc7b 	bl	80097fc <__assert_func>
 8006f06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f0a:	6004      	str	r4, [r0, #0]
 8006f0c:	60c4      	str	r4, [r0, #12]
 8006f0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	b151      	cbz	r1, 8006f2a <_dtoa_r+0x52>
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	2301      	movs	r3, #1
 8006f18:	4093      	lsls	r3, r2
 8006f1a:	604a      	str	r2, [r1, #4]
 8006f1c:	608b      	str	r3, [r1, #8]
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f001 fbc4 	bl	80086ac <_Bfree>
 8006f24:	2200      	movs	r2, #0
 8006f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	1e3b      	subs	r3, r7, #0
 8006f2c:	bfaf      	iteee	ge
 8006f2e:	2300      	movge	r3, #0
 8006f30:	2201      	movlt	r2, #1
 8006f32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f36:	9305      	strlt	r3, [sp, #20]
 8006f38:	bfa8      	it	ge
 8006f3a:	f8c8 3000 	strge.w	r3, [r8]
 8006f3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006f42:	4b99      	ldr	r3, [pc, #612]	; (80071a8 <_dtoa_r+0x2d0>)
 8006f44:	bfb8      	it	lt
 8006f46:	f8c8 2000 	strlt.w	r2, [r8]
 8006f4a:	ea33 0309 	bics.w	r3, r3, r9
 8006f4e:	d119      	bne.n	8006f84 <_dtoa_r+0xac>
 8006f50:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f5c:	4333      	orrs	r3, r6
 8006f5e:	f000 857f 	beq.w	8007a60 <_dtoa_r+0xb88>
 8006f62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f64:	b953      	cbnz	r3, 8006f7c <_dtoa_r+0xa4>
 8006f66:	4b91      	ldr	r3, [pc, #580]	; (80071ac <_dtoa_r+0x2d4>)
 8006f68:	e022      	b.n	8006fb0 <_dtoa_r+0xd8>
 8006f6a:	4b91      	ldr	r3, [pc, #580]	; (80071b0 <_dtoa_r+0x2d8>)
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	9803      	ldr	r0, [sp, #12]
 8006f76:	b019      	add	sp, #100	; 0x64
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	4b8b      	ldr	r3, [pc, #556]	; (80071ac <_dtoa_r+0x2d4>)
 8006f7e:	9303      	str	r3, [sp, #12]
 8006f80:	3303      	adds	r3, #3
 8006f82:	e7f5      	b.n	8006f70 <_dtoa_r+0x98>
 8006f84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f90:	2200      	movs	r2, #0
 8006f92:	2300      	movs	r3, #0
 8006f94:	f7f9 fd12 	bl	80009bc <__aeabi_dcmpeq>
 8006f98:	4680      	mov	r8, r0
 8006f9a:	b158      	cbz	r0, 8006fb4 <_dtoa_r+0xdc>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8558 	beq.w	8007a5a <_dtoa_r+0xb82>
 8006faa:	4882      	ldr	r0, [pc, #520]	; (80071b4 <_dtoa_r+0x2dc>)
 8006fac:	6018      	str	r0, [r3, #0]
 8006fae:	1e43      	subs	r3, r0, #1
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	e7df      	b.n	8006f74 <_dtoa_r+0x9c>
 8006fb4:	ab16      	add	r3, sp, #88	; 0x58
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	ab17      	add	r3, sp, #92	; 0x5c
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006fc2:	f001 ff1d 	bl	8008e00 <__d2b>
 8006fc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006fca:	4683      	mov	fp, r0
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	d07f      	beq.n	80070d0 <_dtoa_r+0x1f8>
 8006fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fd6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006fda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fde:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006fe2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006fe6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006fea:	2200      	movs	r2, #0
 8006fec:	4b72      	ldr	r3, [pc, #456]	; (80071b8 <_dtoa_r+0x2e0>)
 8006fee:	f7f9 f8c5 	bl	800017c <__aeabi_dsub>
 8006ff2:	a365      	add	r3, pc, #404	; (adr r3, 8007188 <_dtoa_r+0x2b0>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 fa78 	bl	80004ec <__aeabi_dmul>
 8006ffc:	a364      	add	r3, pc, #400	; (adr r3, 8007190 <_dtoa_r+0x2b8>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 f8bd 	bl	8000180 <__adddf3>
 8007006:	4606      	mov	r6, r0
 8007008:	4620      	mov	r0, r4
 800700a:	460f      	mov	r7, r1
 800700c:	f7f9 fa04 	bl	8000418 <__aeabi_i2d>
 8007010:	a361      	add	r3, pc, #388	; (adr r3, 8007198 <_dtoa_r+0x2c0>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f7f9 fa69 	bl	80004ec <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f7f9 f8ad 	bl	8000180 <__adddf3>
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	f7f9 fd0f 	bl	8000a4c <__aeabi_d2iz>
 800702e:	2200      	movs	r2, #0
 8007030:	4682      	mov	sl, r0
 8007032:	2300      	movs	r3, #0
 8007034:	4630      	mov	r0, r6
 8007036:	4639      	mov	r1, r7
 8007038:	f7f9 fcca 	bl	80009d0 <__aeabi_dcmplt>
 800703c:	b148      	cbz	r0, 8007052 <_dtoa_r+0x17a>
 800703e:	4650      	mov	r0, sl
 8007040:	f7f9 f9ea 	bl	8000418 <__aeabi_i2d>
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fcb8 	bl	80009bc <__aeabi_dcmpeq>
 800704c:	b908      	cbnz	r0, 8007052 <_dtoa_r+0x17a>
 800704e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007052:	f1ba 0f16 	cmp.w	sl, #22
 8007056:	d858      	bhi.n	800710a <_dtoa_r+0x232>
 8007058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800705c:	4b57      	ldr	r3, [pc, #348]	; (80071bc <_dtoa_r+0x2e4>)
 800705e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f7f9 fcb3 	bl	80009d0 <__aeabi_dcmplt>
 800706a:	2800      	cmp	r0, #0
 800706c:	d04f      	beq.n	800710e <_dtoa_r+0x236>
 800706e:	2300      	movs	r3, #0
 8007070:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007074:	930f      	str	r3, [sp, #60]	; 0x3c
 8007076:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007078:	1b1c      	subs	r4, r3, r4
 800707a:	1e63      	subs	r3, r4, #1
 800707c:	9309      	str	r3, [sp, #36]	; 0x24
 800707e:	bf49      	itett	mi
 8007080:	f1c4 0301 	rsbmi	r3, r4, #1
 8007084:	2300      	movpl	r3, #0
 8007086:	9306      	strmi	r3, [sp, #24]
 8007088:	2300      	movmi	r3, #0
 800708a:	bf54      	ite	pl
 800708c:	9306      	strpl	r3, [sp, #24]
 800708e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007090:	f1ba 0f00 	cmp.w	sl, #0
 8007094:	db3d      	blt.n	8007112 <_dtoa_r+0x23a>
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800709c:	4453      	add	r3, sl
 800709e:	9309      	str	r3, [sp, #36]	; 0x24
 80070a0:	2300      	movs	r3, #0
 80070a2:	930a      	str	r3, [sp, #40]	; 0x28
 80070a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070a6:	2b09      	cmp	r3, #9
 80070a8:	f200 808c 	bhi.w	80071c4 <_dtoa_r+0x2ec>
 80070ac:	2b05      	cmp	r3, #5
 80070ae:	bfc4      	itt	gt
 80070b0:	3b04      	subgt	r3, #4
 80070b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80070b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070b6:	bfc8      	it	gt
 80070b8:	2400      	movgt	r4, #0
 80070ba:	f1a3 0302 	sub.w	r3, r3, #2
 80070be:	bfd8      	it	le
 80070c0:	2401      	movle	r4, #1
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	f200 808a 	bhi.w	80071dc <_dtoa_r+0x304>
 80070c8:	e8df f003 	tbb	[pc, r3]
 80070cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80070d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80070d4:	441c      	add	r4, r3
 80070d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80070da:	2b20      	cmp	r3, #32
 80070dc:	bfc3      	ittte	gt
 80070de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80070e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80070ea:	f1c3 0320 	rsble	r3, r3, #32
 80070ee:	bfc6      	itte	gt
 80070f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070f4:	4318      	orrgt	r0, r3
 80070f6:	fa06 f003 	lslle.w	r0, r6, r3
 80070fa:	f7f9 f97d 	bl	80003f8 <__aeabi_ui2d>
 80070fe:	2301      	movs	r3, #1
 8007100:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007104:	3c01      	subs	r4, #1
 8007106:	9313      	str	r3, [sp, #76]	; 0x4c
 8007108:	e76f      	b.n	8006fea <_dtoa_r+0x112>
 800710a:	2301      	movs	r3, #1
 800710c:	e7b2      	b.n	8007074 <_dtoa_r+0x19c>
 800710e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007110:	e7b1      	b.n	8007076 <_dtoa_r+0x19e>
 8007112:	9b06      	ldr	r3, [sp, #24]
 8007114:	eba3 030a 	sub.w	r3, r3, sl
 8007118:	9306      	str	r3, [sp, #24]
 800711a:	f1ca 0300 	rsb	r3, sl, #0
 800711e:	930a      	str	r3, [sp, #40]	; 0x28
 8007120:	2300      	movs	r3, #0
 8007122:	930e      	str	r3, [sp, #56]	; 0x38
 8007124:	e7be      	b.n	80070a4 <_dtoa_r+0x1cc>
 8007126:	2300      	movs	r3, #0
 8007128:	930b      	str	r3, [sp, #44]	; 0x2c
 800712a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800712c:	2b00      	cmp	r3, #0
 800712e:	dc58      	bgt.n	80071e2 <_dtoa_r+0x30a>
 8007130:	f04f 0901 	mov.w	r9, #1
 8007134:	464b      	mov	r3, r9
 8007136:	f8cd 9020 	str.w	r9, [sp, #32]
 800713a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800713e:	2200      	movs	r2, #0
 8007140:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007142:	6042      	str	r2, [r0, #4]
 8007144:	2204      	movs	r2, #4
 8007146:	f102 0614 	add.w	r6, r2, #20
 800714a:	429e      	cmp	r6, r3
 800714c:	6841      	ldr	r1, [r0, #4]
 800714e:	d94e      	bls.n	80071ee <_dtoa_r+0x316>
 8007150:	4628      	mov	r0, r5
 8007152:	f001 fa6b 	bl	800862c <_Balloc>
 8007156:	9003      	str	r0, [sp, #12]
 8007158:	2800      	cmp	r0, #0
 800715a:	d14c      	bne.n	80071f6 <_dtoa_r+0x31e>
 800715c:	4602      	mov	r2, r0
 800715e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007162:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <_dtoa_r+0x2e8>)
 8007164:	e6cc      	b.n	8006f00 <_dtoa_r+0x28>
 8007166:	2301      	movs	r3, #1
 8007168:	e7de      	b.n	8007128 <_dtoa_r+0x250>
 800716a:	2300      	movs	r3, #0
 800716c:	930b      	str	r3, [sp, #44]	; 0x2c
 800716e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007170:	eb0a 0903 	add.w	r9, sl, r3
 8007174:	f109 0301 	add.w	r3, r9, #1
 8007178:	2b01      	cmp	r3, #1
 800717a:	9308      	str	r3, [sp, #32]
 800717c:	bfb8      	it	lt
 800717e:	2301      	movlt	r3, #1
 8007180:	e7dd      	b.n	800713e <_dtoa_r+0x266>
 8007182:	2301      	movs	r3, #1
 8007184:	e7f2      	b.n	800716c <_dtoa_r+0x294>
 8007186:	bf00      	nop
 8007188:	636f4361 	.word	0x636f4361
 800718c:	3fd287a7 	.word	0x3fd287a7
 8007190:	8b60c8b3 	.word	0x8b60c8b3
 8007194:	3fc68a28 	.word	0x3fc68a28
 8007198:	509f79fb 	.word	0x509f79fb
 800719c:	3fd34413 	.word	0x3fd34413
 80071a0:	08009e86 	.word	0x08009e86
 80071a4:	08009e9d 	.word	0x08009e9d
 80071a8:	7ff00000 	.word	0x7ff00000
 80071ac:	08009e82 	.word	0x08009e82
 80071b0:	08009e79 	.word	0x08009e79
 80071b4:	08009cf9 	.word	0x08009cf9
 80071b8:	3ff80000 	.word	0x3ff80000
 80071bc:	0800a070 	.word	0x0800a070
 80071c0:	08009ef8 	.word	0x08009ef8
 80071c4:	2401      	movs	r4, #1
 80071c6:	2300      	movs	r3, #0
 80071c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80071ca:	9322      	str	r3, [sp, #136]	; 0x88
 80071cc:	f04f 39ff 	mov.w	r9, #4294967295
 80071d0:	2200      	movs	r2, #0
 80071d2:	2312      	movs	r3, #18
 80071d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80071d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80071da:	e7b0      	b.n	800713e <_dtoa_r+0x266>
 80071dc:	2301      	movs	r3, #1
 80071de:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e0:	e7f4      	b.n	80071cc <_dtoa_r+0x2f4>
 80071e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80071e6:	464b      	mov	r3, r9
 80071e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80071ec:	e7a7      	b.n	800713e <_dtoa_r+0x266>
 80071ee:	3101      	adds	r1, #1
 80071f0:	6041      	str	r1, [r0, #4]
 80071f2:	0052      	lsls	r2, r2, #1
 80071f4:	e7a7      	b.n	8007146 <_dtoa_r+0x26e>
 80071f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071f8:	9a03      	ldr	r2, [sp, #12]
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	9b08      	ldr	r3, [sp, #32]
 80071fe:	2b0e      	cmp	r3, #14
 8007200:	f200 80a8 	bhi.w	8007354 <_dtoa_r+0x47c>
 8007204:	2c00      	cmp	r4, #0
 8007206:	f000 80a5 	beq.w	8007354 <_dtoa_r+0x47c>
 800720a:	f1ba 0f00 	cmp.w	sl, #0
 800720e:	dd34      	ble.n	800727a <_dtoa_r+0x3a2>
 8007210:	4a9a      	ldr	r2, [pc, #616]	; (800747c <_dtoa_r+0x5a4>)
 8007212:	f00a 030f 	and.w	r3, sl, #15
 8007216:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800721a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800721e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007222:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007226:	ea4f 142a 	mov.w	r4, sl, asr #4
 800722a:	d016      	beq.n	800725a <_dtoa_r+0x382>
 800722c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007230:	4b93      	ldr	r3, [pc, #588]	; (8007480 <_dtoa_r+0x5a8>)
 8007232:	2703      	movs	r7, #3
 8007234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007238:	f7f9 fa82 	bl	8000740 <__aeabi_ddiv>
 800723c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007240:	f004 040f 	and.w	r4, r4, #15
 8007244:	4e8e      	ldr	r6, [pc, #568]	; (8007480 <_dtoa_r+0x5a8>)
 8007246:	b954      	cbnz	r4, 800725e <_dtoa_r+0x386>
 8007248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800724c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007250:	f7f9 fa76 	bl	8000740 <__aeabi_ddiv>
 8007254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007258:	e029      	b.n	80072ae <_dtoa_r+0x3d6>
 800725a:	2702      	movs	r7, #2
 800725c:	e7f2      	b.n	8007244 <_dtoa_r+0x36c>
 800725e:	07e1      	lsls	r1, r4, #31
 8007260:	d508      	bpl.n	8007274 <_dtoa_r+0x39c>
 8007262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007266:	e9d6 2300 	ldrd	r2, r3, [r6]
 800726a:	f7f9 f93f 	bl	80004ec <__aeabi_dmul>
 800726e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007272:	3701      	adds	r7, #1
 8007274:	1064      	asrs	r4, r4, #1
 8007276:	3608      	adds	r6, #8
 8007278:	e7e5      	b.n	8007246 <_dtoa_r+0x36e>
 800727a:	f000 80a5 	beq.w	80073c8 <_dtoa_r+0x4f0>
 800727e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007282:	f1ca 0400 	rsb	r4, sl, #0
 8007286:	4b7d      	ldr	r3, [pc, #500]	; (800747c <_dtoa_r+0x5a4>)
 8007288:	f004 020f 	and.w	r2, r4, #15
 800728c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f9 f92a 	bl	80004ec <__aeabi_dmul>
 8007298:	2702      	movs	r7, #2
 800729a:	2300      	movs	r3, #0
 800729c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072a0:	4e77      	ldr	r6, [pc, #476]	; (8007480 <_dtoa_r+0x5a8>)
 80072a2:	1124      	asrs	r4, r4, #4
 80072a4:	2c00      	cmp	r4, #0
 80072a6:	f040 8084 	bne.w	80073b2 <_dtoa_r+0x4da>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1d2      	bne.n	8007254 <_dtoa_r+0x37c>
 80072ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 808b 	beq.w	80073cc <_dtoa_r+0x4f4>
 80072b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80072ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80072be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072c2:	2200      	movs	r2, #0
 80072c4:	4b6f      	ldr	r3, [pc, #444]	; (8007484 <_dtoa_r+0x5ac>)
 80072c6:	f7f9 fb83 	bl	80009d0 <__aeabi_dcmplt>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d07e      	beq.n	80073cc <_dtoa_r+0x4f4>
 80072ce:	9b08      	ldr	r3, [sp, #32]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d07b      	beq.n	80073cc <_dtoa_r+0x4f4>
 80072d4:	f1b9 0f00 	cmp.w	r9, #0
 80072d8:	dd38      	ble.n	800734c <_dtoa_r+0x474>
 80072da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072de:	2200      	movs	r2, #0
 80072e0:	4b69      	ldr	r3, [pc, #420]	; (8007488 <_dtoa_r+0x5b0>)
 80072e2:	f7f9 f903 	bl	80004ec <__aeabi_dmul>
 80072e6:	464c      	mov	r4, r9
 80072e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80072f0:	3701      	adds	r7, #1
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7f9 f890 	bl	8000418 <__aeabi_i2d>
 80072f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fc:	f7f9 f8f6 	bl	80004ec <__aeabi_dmul>
 8007300:	2200      	movs	r2, #0
 8007302:	4b62      	ldr	r3, [pc, #392]	; (800748c <_dtoa_r+0x5b4>)
 8007304:	f7f8 ff3c 	bl	8000180 <__adddf3>
 8007308:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800730c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007310:	9611      	str	r6, [sp, #68]	; 0x44
 8007312:	2c00      	cmp	r4, #0
 8007314:	d15d      	bne.n	80073d2 <_dtoa_r+0x4fa>
 8007316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800731a:	2200      	movs	r2, #0
 800731c:	4b5c      	ldr	r3, [pc, #368]	; (8007490 <_dtoa_r+0x5b8>)
 800731e:	f7f8 ff2d 	bl	800017c <__aeabi_dsub>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800732a:	4633      	mov	r3, r6
 800732c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800732e:	f7f9 fb6d 	bl	8000a0c <__aeabi_dcmpgt>
 8007332:	2800      	cmp	r0, #0
 8007334:	f040 829c 	bne.w	8007870 <_dtoa_r+0x998>
 8007338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800733c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800733e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007342:	f7f9 fb45 	bl	80009d0 <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f040 8290 	bne.w	800786c <_dtoa_r+0x994>
 800734c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007356:	2b00      	cmp	r3, #0
 8007358:	f2c0 8152 	blt.w	8007600 <_dtoa_r+0x728>
 800735c:	f1ba 0f0e 	cmp.w	sl, #14
 8007360:	f300 814e 	bgt.w	8007600 <_dtoa_r+0x728>
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <_dtoa_r+0x5a4>)
 8007366:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800736a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800736e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007374:	2b00      	cmp	r3, #0
 8007376:	f280 80db 	bge.w	8007530 <_dtoa_r+0x658>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f300 80d7 	bgt.w	8007530 <_dtoa_r+0x658>
 8007382:	f040 8272 	bne.w	800786a <_dtoa_r+0x992>
 8007386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800738a:	2200      	movs	r2, #0
 800738c:	4b40      	ldr	r3, [pc, #256]	; (8007490 <_dtoa_r+0x5b8>)
 800738e:	f7f9 f8ad 	bl	80004ec <__aeabi_dmul>
 8007392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007396:	f7f9 fb2f 	bl	80009f8 <__aeabi_dcmpge>
 800739a:	9c08      	ldr	r4, [sp, #32]
 800739c:	4626      	mov	r6, r4
 800739e:	2800      	cmp	r0, #0
 80073a0:	f040 8248 	bne.w	8007834 <_dtoa_r+0x95c>
 80073a4:	2331      	movs	r3, #49	; 0x31
 80073a6:	9f03      	ldr	r7, [sp, #12]
 80073a8:	f10a 0a01 	add.w	sl, sl, #1
 80073ac:	f807 3b01 	strb.w	r3, [r7], #1
 80073b0:	e244      	b.n	800783c <_dtoa_r+0x964>
 80073b2:	07e2      	lsls	r2, r4, #31
 80073b4:	d505      	bpl.n	80073c2 <_dtoa_r+0x4ea>
 80073b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073ba:	f7f9 f897 	bl	80004ec <__aeabi_dmul>
 80073be:	2301      	movs	r3, #1
 80073c0:	3701      	adds	r7, #1
 80073c2:	1064      	asrs	r4, r4, #1
 80073c4:	3608      	adds	r6, #8
 80073c6:	e76d      	b.n	80072a4 <_dtoa_r+0x3cc>
 80073c8:	2702      	movs	r7, #2
 80073ca:	e770      	b.n	80072ae <_dtoa_r+0x3d6>
 80073cc:	46d0      	mov	r8, sl
 80073ce:	9c08      	ldr	r4, [sp, #32]
 80073d0:	e78f      	b.n	80072f2 <_dtoa_r+0x41a>
 80073d2:	9903      	ldr	r1, [sp, #12]
 80073d4:	4b29      	ldr	r3, [pc, #164]	; (800747c <_dtoa_r+0x5a4>)
 80073d6:	4421      	add	r1, r4
 80073d8:	9112      	str	r1, [sp, #72]	; 0x48
 80073da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80073e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073e8:	2900      	cmp	r1, #0
 80073ea:	d055      	beq.n	8007498 <_dtoa_r+0x5c0>
 80073ec:	2000      	movs	r0, #0
 80073ee:	4929      	ldr	r1, [pc, #164]	; (8007494 <_dtoa_r+0x5bc>)
 80073f0:	f7f9 f9a6 	bl	8000740 <__aeabi_ddiv>
 80073f4:	463b      	mov	r3, r7
 80073f6:	4632      	mov	r2, r6
 80073f8:	f7f8 fec0 	bl	800017c <__aeabi_dsub>
 80073fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007400:	9f03      	ldr	r7, [sp, #12]
 8007402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007406:	f7f9 fb21 	bl	8000a4c <__aeabi_d2iz>
 800740a:	4604      	mov	r4, r0
 800740c:	f7f9 f804 	bl	8000418 <__aeabi_i2d>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007418:	f7f8 feb0 	bl	800017c <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	3430      	adds	r4, #48	; 0x30
 8007422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800742a:	f807 4b01 	strb.w	r4, [r7], #1
 800742e:	f7f9 facf 	bl	80009d0 <__aeabi_dcmplt>
 8007432:	2800      	cmp	r0, #0
 8007434:	d174      	bne.n	8007520 <_dtoa_r+0x648>
 8007436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800743a:	2000      	movs	r0, #0
 800743c:	4911      	ldr	r1, [pc, #68]	; (8007484 <_dtoa_r+0x5ac>)
 800743e:	f7f8 fe9d 	bl	800017c <__aeabi_dsub>
 8007442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007446:	f7f9 fac3 	bl	80009d0 <__aeabi_dcmplt>
 800744a:	2800      	cmp	r0, #0
 800744c:	f040 80b7 	bne.w	80075be <_dtoa_r+0x6e6>
 8007450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007452:	429f      	cmp	r7, r3
 8007454:	f43f af7a 	beq.w	800734c <_dtoa_r+0x474>
 8007458:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800745c:	2200      	movs	r2, #0
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <_dtoa_r+0x5b0>)
 8007460:	f7f9 f844 	bl	80004ec <__aeabi_dmul>
 8007464:	2200      	movs	r2, #0
 8007466:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800746a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800746e:	4b06      	ldr	r3, [pc, #24]	; (8007488 <_dtoa_r+0x5b0>)
 8007470:	f7f9 f83c 	bl	80004ec <__aeabi_dmul>
 8007474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007478:	e7c3      	b.n	8007402 <_dtoa_r+0x52a>
 800747a:	bf00      	nop
 800747c:	0800a070 	.word	0x0800a070
 8007480:	0800a048 	.word	0x0800a048
 8007484:	3ff00000 	.word	0x3ff00000
 8007488:	40240000 	.word	0x40240000
 800748c:	401c0000 	.word	0x401c0000
 8007490:	40140000 	.word	0x40140000
 8007494:	3fe00000 	.word	0x3fe00000
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f9 f826 	bl	80004ec <__aeabi_dmul>
 80074a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074a6:	9c03      	ldr	r4, [sp, #12]
 80074a8:	9314      	str	r3, [sp, #80]	; 0x50
 80074aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ae:	f7f9 facd 	bl	8000a4c <__aeabi_d2iz>
 80074b2:	9015      	str	r0, [sp, #84]	; 0x54
 80074b4:	f7f8 ffb0 	bl	8000418 <__aeabi_i2d>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c0:	f7f8 fe5c 	bl	800017c <__aeabi_dsub>
 80074c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074c6:	4606      	mov	r6, r0
 80074c8:	3330      	adds	r3, #48	; 0x30
 80074ca:	f804 3b01 	strb.w	r3, [r4], #1
 80074ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074d0:	460f      	mov	r7, r1
 80074d2:	429c      	cmp	r4, r3
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	d124      	bne.n	8007524 <_dtoa_r+0x64c>
 80074da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074de:	4bb0      	ldr	r3, [pc, #704]	; (80077a0 <_dtoa_r+0x8c8>)
 80074e0:	f7f8 fe4e 	bl	8000180 <__adddf3>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f9 fa8e 	bl	8000a0c <__aeabi_dcmpgt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d163      	bne.n	80075bc <_dtoa_r+0x6e4>
 80074f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074f8:	2000      	movs	r0, #0
 80074fa:	49a9      	ldr	r1, [pc, #676]	; (80077a0 <_dtoa_r+0x8c8>)
 80074fc:	f7f8 fe3e 	bl	800017c <__aeabi_dsub>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	f7f9 fa62 	bl	80009d0 <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	f43f af1d 	beq.w	800734c <_dtoa_r+0x474>
 8007512:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007514:	1e7b      	subs	r3, r7, #1
 8007516:	9314      	str	r3, [sp, #80]	; 0x50
 8007518:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800751c:	2b30      	cmp	r3, #48	; 0x30
 800751e:	d0f8      	beq.n	8007512 <_dtoa_r+0x63a>
 8007520:	46c2      	mov	sl, r8
 8007522:	e03b      	b.n	800759c <_dtoa_r+0x6c4>
 8007524:	4b9f      	ldr	r3, [pc, #636]	; (80077a4 <_dtoa_r+0x8cc>)
 8007526:	f7f8 ffe1 	bl	80004ec <__aeabi_dmul>
 800752a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800752e:	e7bc      	b.n	80074aa <_dtoa_r+0x5d2>
 8007530:	9f03      	ldr	r7, [sp, #12]
 8007532:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007536:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800753a:	4640      	mov	r0, r8
 800753c:	4649      	mov	r1, r9
 800753e:	f7f9 f8ff 	bl	8000740 <__aeabi_ddiv>
 8007542:	f7f9 fa83 	bl	8000a4c <__aeabi_d2iz>
 8007546:	4604      	mov	r4, r0
 8007548:	f7f8 ff66 	bl	8000418 <__aeabi_i2d>
 800754c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007550:	f7f8 ffcc 	bl	80004ec <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4640      	mov	r0, r8
 800755a:	4649      	mov	r1, r9
 800755c:	f7f8 fe0e 	bl	800017c <__aeabi_dsub>
 8007560:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007564:	f807 6b01 	strb.w	r6, [r7], #1
 8007568:	9e03      	ldr	r6, [sp, #12]
 800756a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800756e:	1bbe      	subs	r6, r7, r6
 8007570:	45b4      	cmp	ip, r6
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	d136      	bne.n	80075e6 <_dtoa_r+0x70e>
 8007578:	f7f8 fe02 	bl	8000180 <__adddf3>
 800757c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007580:	4680      	mov	r8, r0
 8007582:	4689      	mov	r9, r1
 8007584:	f7f9 fa42 	bl	8000a0c <__aeabi_dcmpgt>
 8007588:	bb58      	cbnz	r0, 80075e2 <_dtoa_r+0x70a>
 800758a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f9 fa13 	bl	80009bc <__aeabi_dcmpeq>
 8007596:	b108      	cbz	r0, 800759c <_dtoa_r+0x6c4>
 8007598:	07e1      	lsls	r1, r4, #31
 800759a:	d422      	bmi.n	80075e2 <_dtoa_r+0x70a>
 800759c:	4628      	mov	r0, r5
 800759e:	4659      	mov	r1, fp
 80075a0:	f001 f884 	bl	80086ac <_Bfree>
 80075a4:	2300      	movs	r3, #0
 80075a6:	703b      	strb	r3, [r7, #0]
 80075a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075aa:	f10a 0001 	add.w	r0, sl, #1
 80075ae:	6018      	str	r0, [r3, #0]
 80075b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f43f acde 	beq.w	8006f74 <_dtoa_r+0x9c>
 80075b8:	601f      	str	r7, [r3, #0]
 80075ba:	e4db      	b.n	8006f74 <_dtoa_r+0x9c>
 80075bc:	4627      	mov	r7, r4
 80075be:	463b      	mov	r3, r7
 80075c0:	461f      	mov	r7, r3
 80075c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075c6:	2a39      	cmp	r2, #57	; 0x39
 80075c8:	d107      	bne.n	80075da <_dtoa_r+0x702>
 80075ca:	9a03      	ldr	r2, [sp, #12]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d1f7      	bne.n	80075c0 <_dtoa_r+0x6e8>
 80075d0:	2230      	movs	r2, #48	; 0x30
 80075d2:	9903      	ldr	r1, [sp, #12]
 80075d4:	f108 0801 	add.w	r8, r8, #1
 80075d8:	700a      	strb	r2, [r1, #0]
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	3201      	adds	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	e79e      	b.n	8007520 <_dtoa_r+0x648>
 80075e2:	46d0      	mov	r8, sl
 80075e4:	e7eb      	b.n	80075be <_dtoa_r+0x6e6>
 80075e6:	2200      	movs	r2, #0
 80075e8:	4b6e      	ldr	r3, [pc, #440]	; (80077a4 <_dtoa_r+0x8cc>)
 80075ea:	f7f8 ff7f 	bl	80004ec <__aeabi_dmul>
 80075ee:	2200      	movs	r2, #0
 80075f0:	2300      	movs	r3, #0
 80075f2:	4680      	mov	r8, r0
 80075f4:	4689      	mov	r9, r1
 80075f6:	f7f9 f9e1 	bl	80009bc <__aeabi_dcmpeq>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d09b      	beq.n	8007536 <_dtoa_r+0x65e>
 80075fe:	e7cd      	b.n	800759c <_dtoa_r+0x6c4>
 8007600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007602:	2a00      	cmp	r2, #0
 8007604:	f000 80d0 	beq.w	80077a8 <_dtoa_r+0x8d0>
 8007608:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800760a:	2a01      	cmp	r2, #1
 800760c:	f300 80ae 	bgt.w	800776c <_dtoa_r+0x894>
 8007610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007612:	2a00      	cmp	r2, #0
 8007614:	f000 80a6 	beq.w	8007764 <_dtoa_r+0x88c>
 8007618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800761c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800761e:	9f06      	ldr	r7, [sp, #24]
 8007620:	9a06      	ldr	r2, [sp, #24]
 8007622:	2101      	movs	r1, #1
 8007624:	441a      	add	r2, r3
 8007626:	9206      	str	r2, [sp, #24]
 8007628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800762a:	4628      	mov	r0, r5
 800762c:	441a      	add	r2, r3
 800762e:	9209      	str	r2, [sp, #36]	; 0x24
 8007630:	f001 f93c 	bl	80088ac <__i2b>
 8007634:	4606      	mov	r6, r0
 8007636:	2f00      	cmp	r7, #0
 8007638:	dd0c      	ble.n	8007654 <_dtoa_r+0x77c>
 800763a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd09      	ble.n	8007654 <_dtoa_r+0x77c>
 8007640:	42bb      	cmp	r3, r7
 8007642:	bfa8      	it	ge
 8007644:	463b      	movge	r3, r7
 8007646:	9a06      	ldr	r2, [sp, #24]
 8007648:	1aff      	subs	r7, r7, r3
 800764a:	1ad2      	subs	r2, r2, r3
 800764c:	9206      	str	r2, [sp, #24]
 800764e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	9309      	str	r3, [sp, #36]	; 0x24
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	b1f3      	cbz	r3, 8007696 <_dtoa_r+0x7be>
 8007658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80a8 	beq.w	80077b0 <_dtoa_r+0x8d8>
 8007660:	2c00      	cmp	r4, #0
 8007662:	dd10      	ble.n	8007686 <_dtoa_r+0x7ae>
 8007664:	4631      	mov	r1, r6
 8007666:	4622      	mov	r2, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f001 f9dd 	bl	8008a28 <__pow5mult>
 800766e:	465a      	mov	r2, fp
 8007670:	4601      	mov	r1, r0
 8007672:	4606      	mov	r6, r0
 8007674:	4628      	mov	r0, r5
 8007676:	f001 f92f 	bl	80088d8 <__multiply>
 800767a:	4680      	mov	r8, r0
 800767c:	4659      	mov	r1, fp
 800767e:	4628      	mov	r0, r5
 8007680:	f001 f814 	bl	80086ac <_Bfree>
 8007684:	46c3      	mov	fp, r8
 8007686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007688:	1b1a      	subs	r2, r3, r4
 800768a:	d004      	beq.n	8007696 <_dtoa_r+0x7be>
 800768c:	4659      	mov	r1, fp
 800768e:	4628      	mov	r0, r5
 8007690:	f001 f9ca 	bl	8008a28 <__pow5mult>
 8007694:	4683      	mov	fp, r0
 8007696:	2101      	movs	r1, #1
 8007698:	4628      	mov	r0, r5
 800769a:	f001 f907 	bl	80088ac <__i2b>
 800769e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076a0:	4604      	mov	r4, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f340 8086 	ble.w	80077b4 <_dtoa_r+0x8dc>
 80076a8:	461a      	mov	r2, r3
 80076aa:	4601      	mov	r1, r0
 80076ac:	4628      	mov	r0, r5
 80076ae:	f001 f9bb 	bl	8008a28 <__pow5mult>
 80076b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076b4:	4604      	mov	r4, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	dd7f      	ble.n	80077ba <_dtoa_r+0x8e2>
 80076ba:	f04f 0800 	mov.w	r8, #0
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076c4:	6918      	ldr	r0, [r3, #16]
 80076c6:	f001 f8a3 	bl	8008810 <__hi0bits>
 80076ca:	f1c0 0020 	rsb	r0, r0, #32
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	4418      	add	r0, r3
 80076d2:	f010 001f 	ands.w	r0, r0, #31
 80076d6:	f000 8092 	beq.w	80077fe <_dtoa_r+0x926>
 80076da:	f1c0 0320 	rsb	r3, r0, #32
 80076de:	2b04      	cmp	r3, #4
 80076e0:	f340 808a 	ble.w	80077f8 <_dtoa_r+0x920>
 80076e4:	f1c0 001c 	rsb	r0, r0, #28
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	4407      	add	r7, r0
 80076ec:	4403      	add	r3, r0
 80076ee:	9306      	str	r3, [sp, #24]
 80076f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f2:	4403      	add	r3, r0
 80076f4:	9309      	str	r3, [sp, #36]	; 0x24
 80076f6:	9b06      	ldr	r3, [sp, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dd05      	ble.n	8007708 <_dtoa_r+0x830>
 80076fc:	4659      	mov	r1, fp
 80076fe:	461a      	mov	r2, r3
 8007700:	4628      	mov	r0, r5
 8007702:	f001 f9eb 	bl	8008adc <__lshift>
 8007706:	4683      	mov	fp, r0
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	dd05      	ble.n	800771a <_dtoa_r+0x842>
 800770e:	4621      	mov	r1, r4
 8007710:	461a      	mov	r2, r3
 8007712:	4628      	mov	r0, r5
 8007714:	f001 f9e2 	bl	8008adc <__lshift>
 8007718:	4604      	mov	r4, r0
 800771a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d070      	beq.n	8007802 <_dtoa_r+0x92a>
 8007720:	4621      	mov	r1, r4
 8007722:	4658      	mov	r0, fp
 8007724:	f001 fa4a 	bl	8008bbc <__mcmp>
 8007728:	2800      	cmp	r0, #0
 800772a:	da6a      	bge.n	8007802 <_dtoa_r+0x92a>
 800772c:	2300      	movs	r3, #0
 800772e:	4659      	mov	r1, fp
 8007730:	220a      	movs	r2, #10
 8007732:	4628      	mov	r0, r5
 8007734:	f000 ffdc 	bl	80086f0 <__multadd>
 8007738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800773a:	4683      	mov	fp, r0
 800773c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8194 	beq.w	8007a6e <_dtoa_r+0xb96>
 8007746:	4631      	mov	r1, r6
 8007748:	2300      	movs	r3, #0
 800774a:	220a      	movs	r2, #10
 800774c:	4628      	mov	r0, r5
 800774e:	f000 ffcf 	bl	80086f0 <__multadd>
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	4606      	mov	r6, r0
 8007758:	f300 8093 	bgt.w	8007882 <_dtoa_r+0x9aa>
 800775c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800775e:	2b02      	cmp	r3, #2
 8007760:	dc57      	bgt.n	8007812 <_dtoa_r+0x93a>
 8007762:	e08e      	b.n	8007882 <_dtoa_r+0x9aa>
 8007764:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800776a:	e757      	b.n	800761c <_dtoa_r+0x744>
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	1e5c      	subs	r4, r3, #1
 8007770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007772:	42a3      	cmp	r3, r4
 8007774:	bfb7      	itett	lt
 8007776:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007778:	1b1c      	subge	r4, r3, r4
 800777a:	1ae2      	sublt	r2, r4, r3
 800777c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800777e:	bfbe      	ittt	lt
 8007780:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007782:	189b      	addlt	r3, r3, r2
 8007784:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	bfb8      	it	lt
 800778a:	2400      	movlt	r4, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfbb      	ittet	lt
 8007790:	9b06      	ldrlt	r3, [sp, #24]
 8007792:	9a08      	ldrlt	r2, [sp, #32]
 8007794:	9f06      	ldrge	r7, [sp, #24]
 8007796:	1a9f      	sublt	r7, r3, r2
 8007798:	bfac      	ite	ge
 800779a:	9b08      	ldrge	r3, [sp, #32]
 800779c:	2300      	movlt	r3, #0
 800779e:	e73f      	b.n	8007620 <_dtoa_r+0x748>
 80077a0:	3fe00000 	.word	0x3fe00000
 80077a4:	40240000 	.word	0x40240000
 80077a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077aa:	9f06      	ldr	r7, [sp, #24]
 80077ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80077ae:	e742      	b.n	8007636 <_dtoa_r+0x75e>
 80077b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b2:	e76b      	b.n	800768c <_dtoa_r+0x7b4>
 80077b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	dc19      	bgt.n	80077ee <_dtoa_r+0x916>
 80077ba:	9b04      	ldr	r3, [sp, #16]
 80077bc:	b9bb      	cbnz	r3, 80077ee <_dtoa_r+0x916>
 80077be:	9b05      	ldr	r3, [sp, #20]
 80077c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c4:	b99b      	cbnz	r3, 80077ee <_dtoa_r+0x916>
 80077c6:	9b05      	ldr	r3, [sp, #20]
 80077c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077cc:	0d1b      	lsrs	r3, r3, #20
 80077ce:	051b      	lsls	r3, r3, #20
 80077d0:	b183      	cbz	r3, 80077f4 <_dtoa_r+0x91c>
 80077d2:	f04f 0801 	mov.w	r8, #1
 80077d6:	9b06      	ldr	r3, [sp, #24]
 80077d8:	3301      	adds	r3, #1
 80077da:	9306      	str	r3, [sp, #24]
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	3301      	adds	r3, #1
 80077e0:	9309      	str	r3, [sp, #36]	; 0x24
 80077e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f47f af6a 	bne.w	80076be <_dtoa_r+0x7e6>
 80077ea:	2001      	movs	r0, #1
 80077ec:	e76f      	b.n	80076ce <_dtoa_r+0x7f6>
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	e7f6      	b.n	80077e2 <_dtoa_r+0x90a>
 80077f4:	4698      	mov	r8, r3
 80077f6:	e7f4      	b.n	80077e2 <_dtoa_r+0x90a>
 80077f8:	f43f af7d 	beq.w	80076f6 <_dtoa_r+0x81e>
 80077fc:	4618      	mov	r0, r3
 80077fe:	301c      	adds	r0, #28
 8007800:	e772      	b.n	80076e8 <_dtoa_r+0x810>
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dc36      	bgt.n	8007876 <_dtoa_r+0x99e>
 8007808:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780a:	2b02      	cmp	r3, #2
 800780c:	dd33      	ble.n	8007876 <_dtoa_r+0x99e>
 800780e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	d10d      	bne.n	8007834 <_dtoa_r+0x95c>
 8007818:	4621      	mov	r1, r4
 800781a:	464b      	mov	r3, r9
 800781c:	2205      	movs	r2, #5
 800781e:	4628      	mov	r0, r5
 8007820:	f000 ff66 	bl	80086f0 <__multadd>
 8007824:	4601      	mov	r1, r0
 8007826:	4604      	mov	r4, r0
 8007828:	4658      	mov	r0, fp
 800782a:	f001 f9c7 	bl	8008bbc <__mcmp>
 800782e:	2800      	cmp	r0, #0
 8007830:	f73f adb8 	bgt.w	80073a4 <_dtoa_r+0x4cc>
 8007834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007836:	9f03      	ldr	r7, [sp, #12]
 8007838:	ea6f 0a03 	mvn.w	sl, r3
 800783c:	f04f 0800 	mov.w	r8, #0
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 ff32 	bl	80086ac <_Bfree>
 8007848:	2e00      	cmp	r6, #0
 800784a:	f43f aea7 	beq.w	800759c <_dtoa_r+0x6c4>
 800784e:	f1b8 0f00 	cmp.w	r8, #0
 8007852:	d005      	beq.n	8007860 <_dtoa_r+0x988>
 8007854:	45b0      	cmp	r8, r6
 8007856:	d003      	beq.n	8007860 <_dtoa_r+0x988>
 8007858:	4641      	mov	r1, r8
 800785a:	4628      	mov	r0, r5
 800785c:	f000 ff26 	bl	80086ac <_Bfree>
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	f000 ff22 	bl	80086ac <_Bfree>
 8007868:	e698      	b.n	800759c <_dtoa_r+0x6c4>
 800786a:	2400      	movs	r4, #0
 800786c:	4626      	mov	r6, r4
 800786e:	e7e1      	b.n	8007834 <_dtoa_r+0x95c>
 8007870:	46c2      	mov	sl, r8
 8007872:	4626      	mov	r6, r4
 8007874:	e596      	b.n	80073a4 <_dtoa_r+0x4cc>
 8007876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 80fd 	beq.w	8007a7c <_dtoa_r+0xba4>
 8007882:	2f00      	cmp	r7, #0
 8007884:	dd05      	ble.n	8007892 <_dtoa_r+0x9ba>
 8007886:	4631      	mov	r1, r6
 8007888:	463a      	mov	r2, r7
 800788a:	4628      	mov	r0, r5
 800788c:	f001 f926 	bl	8008adc <__lshift>
 8007890:	4606      	mov	r6, r0
 8007892:	f1b8 0f00 	cmp.w	r8, #0
 8007896:	d05c      	beq.n	8007952 <_dtoa_r+0xa7a>
 8007898:	4628      	mov	r0, r5
 800789a:	6871      	ldr	r1, [r6, #4]
 800789c:	f000 fec6 	bl	800862c <_Balloc>
 80078a0:	4607      	mov	r7, r0
 80078a2:	b928      	cbnz	r0, 80078b0 <_dtoa_r+0x9d8>
 80078a4:	4602      	mov	r2, r0
 80078a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078aa:	4b7f      	ldr	r3, [pc, #508]	; (8007aa8 <_dtoa_r+0xbd0>)
 80078ac:	f7ff bb28 	b.w	8006f00 <_dtoa_r+0x28>
 80078b0:	6932      	ldr	r2, [r6, #16]
 80078b2:	f106 010c 	add.w	r1, r6, #12
 80078b6:	3202      	adds	r2, #2
 80078b8:	0092      	lsls	r2, r2, #2
 80078ba:	300c      	adds	r0, #12
 80078bc:	f000 fea8 	bl	8008610 <memcpy>
 80078c0:	2201      	movs	r2, #1
 80078c2:	4639      	mov	r1, r7
 80078c4:	4628      	mov	r0, r5
 80078c6:	f001 f909 	bl	8008adc <__lshift>
 80078ca:	46b0      	mov	r8, r6
 80078cc:	4606      	mov	r6, r0
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	9308      	str	r3, [sp, #32]
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	444b      	add	r3, r9
 80078d8:	930a      	str	r3, [sp, #40]	; 0x28
 80078da:	9b04      	ldr	r3, [sp, #16]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	9309      	str	r3, [sp, #36]	; 0x24
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	4621      	mov	r1, r4
 80078e6:	3b01      	subs	r3, #1
 80078e8:	4658      	mov	r0, fp
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	f7ff fa66 	bl	8006dbc <quorem>
 80078f0:	4603      	mov	r3, r0
 80078f2:	4641      	mov	r1, r8
 80078f4:	3330      	adds	r3, #48	; 0x30
 80078f6:	9006      	str	r0, [sp, #24]
 80078f8:	4658      	mov	r0, fp
 80078fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80078fc:	f001 f95e 	bl	8008bbc <__mcmp>
 8007900:	4632      	mov	r2, r6
 8007902:	4681      	mov	r9, r0
 8007904:	4621      	mov	r1, r4
 8007906:	4628      	mov	r0, r5
 8007908:	f001 f974 	bl	8008bf4 <__mdiff>
 800790c:	68c2      	ldr	r2, [r0, #12]
 800790e:	4607      	mov	r7, r0
 8007910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007912:	bb02      	cbnz	r2, 8007956 <_dtoa_r+0xa7e>
 8007914:	4601      	mov	r1, r0
 8007916:	4658      	mov	r0, fp
 8007918:	f001 f950 	bl	8008bbc <__mcmp>
 800791c:	4602      	mov	r2, r0
 800791e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007920:	4639      	mov	r1, r7
 8007922:	4628      	mov	r0, r5
 8007924:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007928:	f000 fec0 	bl	80086ac <_Bfree>
 800792c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800792e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007930:	9f08      	ldr	r7, [sp, #32]
 8007932:	ea43 0102 	orr.w	r1, r3, r2
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	430b      	orrs	r3, r1
 800793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793c:	d10d      	bne.n	800795a <_dtoa_r+0xa82>
 800793e:	2b39      	cmp	r3, #57	; 0x39
 8007940:	d029      	beq.n	8007996 <_dtoa_r+0xabe>
 8007942:	f1b9 0f00 	cmp.w	r9, #0
 8007946:	dd01      	ble.n	800794c <_dtoa_r+0xa74>
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	3331      	adds	r3, #49	; 0x31
 800794c:	9a04      	ldr	r2, [sp, #16]
 800794e:	7013      	strb	r3, [r2, #0]
 8007950:	e776      	b.n	8007840 <_dtoa_r+0x968>
 8007952:	4630      	mov	r0, r6
 8007954:	e7b9      	b.n	80078ca <_dtoa_r+0x9f2>
 8007956:	2201      	movs	r2, #1
 8007958:	e7e2      	b.n	8007920 <_dtoa_r+0xa48>
 800795a:	f1b9 0f00 	cmp.w	r9, #0
 800795e:	db06      	blt.n	800796e <_dtoa_r+0xa96>
 8007960:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007962:	ea41 0909 	orr.w	r9, r1, r9
 8007966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007968:	ea59 0101 	orrs.w	r1, r9, r1
 800796c:	d120      	bne.n	80079b0 <_dtoa_r+0xad8>
 800796e:	2a00      	cmp	r2, #0
 8007970:	ddec      	ble.n	800794c <_dtoa_r+0xa74>
 8007972:	4659      	mov	r1, fp
 8007974:	2201      	movs	r2, #1
 8007976:	4628      	mov	r0, r5
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	f001 f8af 	bl	8008adc <__lshift>
 800797e:	4621      	mov	r1, r4
 8007980:	4683      	mov	fp, r0
 8007982:	f001 f91b 	bl	8008bbc <__mcmp>
 8007986:	2800      	cmp	r0, #0
 8007988:	9b08      	ldr	r3, [sp, #32]
 800798a:	dc02      	bgt.n	8007992 <_dtoa_r+0xaba>
 800798c:	d1de      	bne.n	800794c <_dtoa_r+0xa74>
 800798e:	07da      	lsls	r2, r3, #31
 8007990:	d5dc      	bpl.n	800794c <_dtoa_r+0xa74>
 8007992:	2b39      	cmp	r3, #57	; 0x39
 8007994:	d1d8      	bne.n	8007948 <_dtoa_r+0xa70>
 8007996:	2339      	movs	r3, #57	; 0x39
 8007998:	9a04      	ldr	r2, [sp, #16]
 800799a:	7013      	strb	r3, [r2, #0]
 800799c:	463b      	mov	r3, r7
 800799e:	461f      	mov	r7, r3
 80079a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	2a39      	cmp	r2, #57	; 0x39
 80079a8:	d050      	beq.n	8007a4c <_dtoa_r+0xb74>
 80079aa:	3201      	adds	r2, #1
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e747      	b.n	8007840 <_dtoa_r+0x968>
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	dd03      	ble.n	80079bc <_dtoa_r+0xae4>
 80079b4:	2b39      	cmp	r3, #57	; 0x39
 80079b6:	d0ee      	beq.n	8007996 <_dtoa_r+0xabe>
 80079b8:	3301      	adds	r3, #1
 80079ba:	e7c7      	b.n	800794c <_dtoa_r+0xa74>
 80079bc:	9a08      	ldr	r2, [sp, #32]
 80079be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079c4:	428a      	cmp	r2, r1
 80079c6:	d02a      	beq.n	8007a1e <_dtoa_r+0xb46>
 80079c8:	4659      	mov	r1, fp
 80079ca:	2300      	movs	r3, #0
 80079cc:	220a      	movs	r2, #10
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fe8e 	bl	80086f0 <__multadd>
 80079d4:	45b0      	cmp	r8, r6
 80079d6:	4683      	mov	fp, r0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	f04f 020a 	mov.w	r2, #10
 80079e0:	4641      	mov	r1, r8
 80079e2:	4628      	mov	r0, r5
 80079e4:	d107      	bne.n	80079f6 <_dtoa_r+0xb1e>
 80079e6:	f000 fe83 	bl	80086f0 <__multadd>
 80079ea:	4680      	mov	r8, r0
 80079ec:	4606      	mov	r6, r0
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	3301      	adds	r3, #1
 80079f2:	9308      	str	r3, [sp, #32]
 80079f4:	e775      	b.n	80078e2 <_dtoa_r+0xa0a>
 80079f6:	f000 fe7b 	bl	80086f0 <__multadd>
 80079fa:	4631      	mov	r1, r6
 80079fc:	4680      	mov	r8, r0
 80079fe:	2300      	movs	r3, #0
 8007a00:	220a      	movs	r2, #10
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 fe74 	bl	80086f0 <__multadd>
 8007a08:	4606      	mov	r6, r0
 8007a0a:	e7f0      	b.n	80079ee <_dtoa_r+0xb16>
 8007a0c:	f1b9 0f00 	cmp.w	r9, #0
 8007a10:	bfcc      	ite	gt
 8007a12:	464f      	movgt	r7, r9
 8007a14:	2701      	movle	r7, #1
 8007a16:	f04f 0800 	mov.w	r8, #0
 8007a1a:	9a03      	ldr	r2, [sp, #12]
 8007a1c:	4417      	add	r7, r2
 8007a1e:	4659      	mov	r1, fp
 8007a20:	2201      	movs	r2, #1
 8007a22:	4628      	mov	r0, r5
 8007a24:	9308      	str	r3, [sp, #32]
 8007a26:	f001 f859 	bl	8008adc <__lshift>
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4683      	mov	fp, r0
 8007a2e:	f001 f8c5 	bl	8008bbc <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	dcb2      	bgt.n	800799c <_dtoa_r+0xac4>
 8007a36:	d102      	bne.n	8007a3e <_dtoa_r+0xb66>
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	07db      	lsls	r3, r3, #31
 8007a3c:	d4ae      	bmi.n	800799c <_dtoa_r+0xac4>
 8007a3e:	463b      	mov	r3, r7
 8007a40:	461f      	mov	r7, r3
 8007a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a46:	2a30      	cmp	r2, #48	; 0x30
 8007a48:	d0fa      	beq.n	8007a40 <_dtoa_r+0xb68>
 8007a4a:	e6f9      	b.n	8007840 <_dtoa_r+0x968>
 8007a4c:	9a03      	ldr	r2, [sp, #12]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d1a5      	bne.n	800799e <_dtoa_r+0xac6>
 8007a52:	2331      	movs	r3, #49	; 0x31
 8007a54:	f10a 0a01 	add.w	sl, sl, #1
 8007a58:	e779      	b.n	800794e <_dtoa_r+0xa76>
 8007a5a:	4b14      	ldr	r3, [pc, #80]	; (8007aac <_dtoa_r+0xbd4>)
 8007a5c:	f7ff baa8 	b.w	8006fb0 <_dtoa_r+0xd8>
 8007a60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f47f aa81 	bne.w	8006f6a <_dtoa_r+0x92>
 8007a68:	4b11      	ldr	r3, [pc, #68]	; (8007ab0 <_dtoa_r+0xbd8>)
 8007a6a:	f7ff baa1 	b.w	8006fb0 <_dtoa_r+0xd8>
 8007a6e:	f1b9 0f00 	cmp.w	r9, #0
 8007a72:	dc03      	bgt.n	8007a7c <_dtoa_r+0xba4>
 8007a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	f73f aecb 	bgt.w	8007812 <_dtoa_r+0x93a>
 8007a7c:	9f03      	ldr	r7, [sp, #12]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4658      	mov	r0, fp
 8007a82:	f7ff f99b 	bl	8006dbc <quorem>
 8007a86:	9a03      	ldr	r2, [sp, #12]
 8007a88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a8c:	f807 3b01 	strb.w	r3, [r7], #1
 8007a90:	1aba      	subs	r2, r7, r2
 8007a92:	4591      	cmp	r9, r2
 8007a94:	ddba      	ble.n	8007a0c <_dtoa_r+0xb34>
 8007a96:	4659      	mov	r1, fp
 8007a98:	2300      	movs	r3, #0
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 fe27 	bl	80086f0 <__multadd>
 8007aa2:	4683      	mov	fp, r0
 8007aa4:	e7eb      	b.n	8007a7e <_dtoa_r+0xba6>
 8007aa6:	bf00      	nop
 8007aa8:	08009ef8 	.word	0x08009ef8
 8007aac:	08009cf8 	.word	0x08009cf8
 8007ab0:	08009e79 	.word	0x08009e79

08007ab4 <__sflush_r>:
 8007ab4:	898a      	ldrh	r2, [r1, #12]
 8007ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab8:	4605      	mov	r5, r0
 8007aba:	0710      	lsls	r0, r2, #28
 8007abc:	460c      	mov	r4, r1
 8007abe:	d457      	bmi.n	8007b70 <__sflush_r+0xbc>
 8007ac0:	684b      	ldr	r3, [r1, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dc04      	bgt.n	8007ad0 <__sflush_r+0x1c>
 8007ac6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dc01      	bgt.n	8007ad0 <__sflush_r+0x1c>
 8007acc:	2000      	movs	r0, #0
 8007ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d0fa      	beq.n	8007acc <__sflush_r+0x18>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007adc:	682f      	ldr	r7, [r5, #0]
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	d032      	beq.n	8007b48 <__sflush_r+0x94>
 8007ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	075a      	lsls	r2, r3, #29
 8007ae8:	d505      	bpl.n	8007af6 <__sflush_r+0x42>
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	1ac0      	subs	r0, r0, r3
 8007aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007af0:	b10b      	cbz	r3, 8007af6 <__sflush_r+0x42>
 8007af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007af4:	1ac0      	subs	r0, r0, r3
 8007af6:	2300      	movs	r3, #0
 8007af8:	4602      	mov	r2, r0
 8007afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007afc:	4628      	mov	r0, r5
 8007afe:	6a21      	ldr	r1, [r4, #32]
 8007b00:	47b0      	blx	r6
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	d106      	bne.n	8007b16 <__sflush_r+0x62>
 8007b08:	6829      	ldr	r1, [r5, #0]
 8007b0a:	291d      	cmp	r1, #29
 8007b0c:	d82c      	bhi.n	8007b68 <__sflush_r+0xb4>
 8007b0e:	4a29      	ldr	r2, [pc, #164]	; (8007bb4 <__sflush_r+0x100>)
 8007b10:	40ca      	lsrs	r2, r1
 8007b12:	07d6      	lsls	r6, r2, #31
 8007b14:	d528      	bpl.n	8007b68 <__sflush_r+0xb4>
 8007b16:	2200      	movs	r2, #0
 8007b18:	6062      	str	r2, [r4, #4]
 8007b1a:	6922      	ldr	r2, [r4, #16]
 8007b1c:	04d9      	lsls	r1, r3, #19
 8007b1e:	6022      	str	r2, [r4, #0]
 8007b20:	d504      	bpl.n	8007b2c <__sflush_r+0x78>
 8007b22:	1c42      	adds	r2, r0, #1
 8007b24:	d101      	bne.n	8007b2a <__sflush_r+0x76>
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	b903      	cbnz	r3, 8007b2c <__sflush_r+0x78>
 8007b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2e:	602f      	str	r7, [r5, #0]
 8007b30:	2900      	cmp	r1, #0
 8007b32:	d0cb      	beq.n	8007acc <__sflush_r+0x18>
 8007b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d002      	beq.n	8007b42 <__sflush_r+0x8e>
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f001 fa41 	bl	8008fc4 <_free_r>
 8007b42:	2000      	movs	r0, #0
 8007b44:	6360      	str	r0, [r4, #52]	; 0x34
 8007b46:	e7c2      	b.n	8007ace <__sflush_r+0x1a>
 8007b48:	6a21      	ldr	r1, [r4, #32]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b0      	blx	r6
 8007b50:	1c41      	adds	r1, r0, #1
 8007b52:	d1c7      	bne.n	8007ae4 <__sflush_r+0x30>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0c4      	beq.n	8007ae4 <__sflush_r+0x30>
 8007b5a:	2b1d      	cmp	r3, #29
 8007b5c:	d001      	beq.n	8007b62 <__sflush_r+0xae>
 8007b5e:	2b16      	cmp	r3, #22
 8007b60:	d101      	bne.n	8007b66 <__sflush_r+0xb2>
 8007b62:	602f      	str	r7, [r5, #0]
 8007b64:	e7b2      	b.n	8007acc <__sflush_r+0x18>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	e7ae      	b.n	8007ace <__sflush_r+0x1a>
 8007b70:	690f      	ldr	r7, [r1, #16]
 8007b72:	2f00      	cmp	r7, #0
 8007b74:	d0aa      	beq.n	8007acc <__sflush_r+0x18>
 8007b76:	0793      	lsls	r3, r2, #30
 8007b78:	bf18      	it	ne
 8007b7a:	2300      	movne	r3, #0
 8007b7c:	680e      	ldr	r6, [r1, #0]
 8007b7e:	bf08      	it	eq
 8007b80:	694b      	ldreq	r3, [r1, #20]
 8007b82:	1bf6      	subs	r6, r6, r7
 8007b84:	600f      	str	r7, [r1, #0]
 8007b86:	608b      	str	r3, [r1, #8]
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	dd9f      	ble.n	8007acc <__sflush_r+0x18>
 8007b8c:	4633      	mov	r3, r6
 8007b8e:	463a      	mov	r2, r7
 8007b90:	4628      	mov	r0, r5
 8007b92:	6a21      	ldr	r1, [r4, #32]
 8007b94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b98:	47e0      	blx	ip
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	dc06      	bgt.n	8007bac <__sflush_r+0xf8>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	e790      	b.n	8007ace <__sflush_r+0x1a>
 8007bac:	4407      	add	r7, r0
 8007bae:	1a36      	subs	r6, r6, r0
 8007bb0:	e7ea      	b.n	8007b88 <__sflush_r+0xd4>
 8007bb2:	bf00      	nop
 8007bb4:	20400001 	.word	0x20400001

08007bb8 <_fflush_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	690b      	ldr	r3, [r1, #16]
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	b913      	cbnz	r3, 8007bc8 <_fflush_r+0x10>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	b118      	cbz	r0, 8007bd2 <_fflush_r+0x1a>
 8007bca:	6983      	ldr	r3, [r0, #24]
 8007bcc:	b90b      	cbnz	r3, 8007bd2 <_fflush_r+0x1a>
 8007bce:	f000 f887 	bl	8007ce0 <__sinit>
 8007bd2:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <_fflush_r+0x6c>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d11b      	bne.n	8007c10 <_fflush_r+0x58>
 8007bd8:	686c      	ldr	r4, [r5, #4]
 8007bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0ef      	beq.n	8007bc2 <_fflush_r+0xa>
 8007be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007be4:	07d0      	lsls	r0, r2, #31
 8007be6:	d404      	bmi.n	8007bf2 <_fflush_r+0x3a>
 8007be8:	0599      	lsls	r1, r3, #22
 8007bea:	d402      	bmi.n	8007bf2 <_fflush_r+0x3a>
 8007bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bee:	f000 fc80 	bl	80084f2 <__retarget_lock_acquire_recursive>
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f7ff ff5d 	bl	8007ab4 <__sflush_r>
 8007bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	07da      	lsls	r2, r3, #31
 8007c00:	d4e0      	bmi.n	8007bc4 <_fflush_r+0xc>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	059b      	lsls	r3, r3, #22
 8007c06:	d4dd      	bmi.n	8007bc4 <_fflush_r+0xc>
 8007c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0a:	f000 fc73 	bl	80084f4 <__retarget_lock_release_recursive>
 8007c0e:	e7d9      	b.n	8007bc4 <_fflush_r+0xc>
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <_fflush_r+0x70>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d101      	bne.n	8007c1a <_fflush_r+0x62>
 8007c16:	68ac      	ldr	r4, [r5, #8]
 8007c18:	e7df      	b.n	8007bda <_fflush_r+0x22>
 8007c1a:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <_fflush_r+0x74>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	bf08      	it	eq
 8007c20:	68ec      	ldreq	r4, [r5, #12]
 8007c22:	e7da      	b.n	8007bda <_fflush_r+0x22>
 8007c24:	08009f2c 	.word	0x08009f2c
 8007c28:	08009f4c 	.word	0x08009f4c
 8007c2c:	08009f0c 	.word	0x08009f0c

08007c30 <std>:
 8007c30:	2300      	movs	r3, #0
 8007c32:	b510      	push	{r4, lr}
 8007c34:	4604      	mov	r4, r0
 8007c36:	e9c0 3300 	strd	r3, r3, [r0]
 8007c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c3e:	6083      	str	r3, [r0, #8]
 8007c40:	8181      	strh	r1, [r0, #12]
 8007c42:	6643      	str	r3, [r0, #100]	; 0x64
 8007c44:	81c2      	strh	r2, [r0, #14]
 8007c46:	6183      	str	r3, [r0, #24]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	305c      	adds	r0, #92	; 0x5c
 8007c4e:	f7fd fa23 	bl	8005098 <memset>
 8007c52:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <std+0x38>)
 8007c54:	6224      	str	r4, [r4, #32]
 8007c56:	6263      	str	r3, [r4, #36]	; 0x24
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <std+0x3c>)
 8007c5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c5c:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <std+0x40>)
 8007c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <std+0x44>)
 8007c62:	6323      	str	r3, [r4, #48]	; 0x30
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	bf00      	nop
 8007c68:	08009711 	.word	0x08009711
 8007c6c:	08009733 	.word	0x08009733
 8007c70:	0800976b 	.word	0x0800976b
 8007c74:	0800978f 	.word	0x0800978f

08007c78 <_cleanup_r>:
 8007c78:	4901      	ldr	r1, [pc, #4]	; (8007c80 <_cleanup_r+0x8>)
 8007c7a:	f000 b8af 	b.w	8007ddc <_fwalk_reent>
 8007c7e:	bf00      	nop
 8007c80:	08007bb9 	.word	0x08007bb9

08007c84 <__sfmoreglue>:
 8007c84:	2268      	movs	r2, #104	; 0x68
 8007c86:	b570      	push	{r4, r5, r6, lr}
 8007c88:	1e4d      	subs	r5, r1, #1
 8007c8a:	4355      	muls	r5, r2
 8007c8c:	460e      	mov	r6, r1
 8007c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c92:	f001 f9ff 	bl	8009094 <_malloc_r>
 8007c96:	4604      	mov	r4, r0
 8007c98:	b140      	cbz	r0, 8007cac <__sfmoreglue+0x28>
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8007ca0:	300c      	adds	r0, #12
 8007ca2:	60a0      	str	r0, [r4, #8]
 8007ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ca8:	f7fd f9f6 	bl	8005098 <memset>
 8007cac:	4620      	mov	r0, r4
 8007cae:	bd70      	pop	{r4, r5, r6, pc}

08007cb0 <__sfp_lock_acquire>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__sfp_lock_acquire+0x8>)
 8007cb2:	f000 bc1e 	b.w	80084f2 <__retarget_lock_acquire_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	200003b9 	.word	0x200003b9

08007cbc <__sfp_lock_release>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__sfp_lock_release+0x8>)
 8007cbe:	f000 bc19 	b.w	80084f4 <__retarget_lock_release_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	200003b9 	.word	0x200003b9

08007cc8 <__sinit_lock_acquire>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__sinit_lock_acquire+0x8>)
 8007cca:	f000 bc12 	b.w	80084f2 <__retarget_lock_acquire_recursive>
 8007cce:	bf00      	nop
 8007cd0:	200003ba 	.word	0x200003ba

08007cd4 <__sinit_lock_release>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sinit_lock_release+0x8>)
 8007cd6:	f000 bc0d 	b.w	80084f4 <__retarget_lock_release_recursive>
 8007cda:	bf00      	nop
 8007cdc:	200003ba 	.word	0x200003ba

08007ce0 <__sinit>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	f7ff fff0 	bl	8007cc8 <__sinit_lock_acquire>
 8007ce8:	69a3      	ldr	r3, [r4, #24]
 8007cea:	b11b      	cbz	r3, 8007cf4 <__sinit+0x14>
 8007cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf0:	f7ff bff0 	b.w	8007cd4 <__sinit_lock_release>
 8007cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <__sinit+0x68>)
 8007cfc:	4a13      	ldr	r2, [pc, #76]	; (8007d4c <__sinit+0x6c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d02:	42a3      	cmp	r3, r4
 8007d04:	bf08      	it	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	4620      	mov	r0, r4
 8007d0a:	bf08      	it	eq
 8007d0c:	61a3      	streq	r3, [r4, #24]
 8007d0e:	f000 f81f 	bl	8007d50 <__sfp>
 8007d12:	6060      	str	r0, [r4, #4]
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 f81b 	bl	8007d50 <__sfp>
 8007d1a:	60a0      	str	r0, [r4, #8]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 f817 	bl	8007d50 <__sfp>
 8007d22:	2200      	movs	r2, #0
 8007d24:	2104      	movs	r1, #4
 8007d26:	60e0      	str	r0, [r4, #12]
 8007d28:	6860      	ldr	r0, [r4, #4]
 8007d2a:	f7ff ff81 	bl	8007c30 <std>
 8007d2e:	2201      	movs	r2, #1
 8007d30:	2109      	movs	r1, #9
 8007d32:	68a0      	ldr	r0, [r4, #8]
 8007d34:	f7ff ff7c 	bl	8007c30 <std>
 8007d38:	2202      	movs	r2, #2
 8007d3a:	2112      	movs	r1, #18
 8007d3c:	68e0      	ldr	r0, [r4, #12]
 8007d3e:	f7ff ff77 	bl	8007c30 <std>
 8007d42:	2301      	movs	r3, #1
 8007d44:	61a3      	str	r3, [r4, #24]
 8007d46:	e7d1      	b.n	8007cec <__sinit+0xc>
 8007d48:	08009ce4 	.word	0x08009ce4
 8007d4c:	08007c79 	.word	0x08007c79

08007d50 <__sfp>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	4607      	mov	r7, r0
 8007d54:	f7ff ffac 	bl	8007cb0 <__sfp_lock_acquire>
 8007d58:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <__sfp+0x84>)
 8007d5a:	681e      	ldr	r6, [r3, #0]
 8007d5c:	69b3      	ldr	r3, [r6, #24]
 8007d5e:	b913      	cbnz	r3, 8007d66 <__sfp+0x16>
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff ffbd 	bl	8007ce0 <__sinit>
 8007d66:	3648      	adds	r6, #72	; 0x48
 8007d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	d503      	bpl.n	8007d78 <__sfp+0x28>
 8007d70:	6833      	ldr	r3, [r6, #0]
 8007d72:	b30b      	cbz	r3, 8007db8 <__sfp+0x68>
 8007d74:	6836      	ldr	r6, [r6, #0]
 8007d76:	e7f7      	b.n	8007d68 <__sfp+0x18>
 8007d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d7c:	b9d5      	cbnz	r5, 8007db4 <__sfp+0x64>
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <__sfp+0x88>)
 8007d80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d84:	60e3      	str	r3, [r4, #12]
 8007d86:	6665      	str	r5, [r4, #100]	; 0x64
 8007d88:	f000 fbb2 	bl	80084f0 <__retarget_lock_init_recursive>
 8007d8c:	f7ff ff96 	bl	8007cbc <__sfp_lock_release>
 8007d90:	2208      	movs	r2, #8
 8007d92:	4629      	mov	r1, r5
 8007d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d9c:	6025      	str	r5, [r4, #0]
 8007d9e:	61a5      	str	r5, [r4, #24]
 8007da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007da4:	f7fd f978 	bl	8005098 <memset>
 8007da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007db0:	4620      	mov	r0, r4
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db4:	3468      	adds	r4, #104	; 0x68
 8007db6:	e7d9      	b.n	8007d6c <__sfp+0x1c>
 8007db8:	2104      	movs	r1, #4
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f7ff ff62 	bl	8007c84 <__sfmoreglue>
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	6030      	str	r0, [r6, #0]
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d1d5      	bne.n	8007d74 <__sfp+0x24>
 8007dc8:	f7ff ff78 	bl	8007cbc <__sfp_lock_release>
 8007dcc:	230c      	movs	r3, #12
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	e7ee      	b.n	8007db0 <__sfp+0x60>
 8007dd2:	bf00      	nop
 8007dd4:	08009ce4 	.word	0x08009ce4
 8007dd8:	ffff0001 	.word	0xffff0001

08007ddc <_fwalk_reent>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	4606      	mov	r6, r0
 8007de2:	4688      	mov	r8, r1
 8007de4:	2700      	movs	r7, #0
 8007de6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dee:	f1b9 0901 	subs.w	r9, r9, #1
 8007df2:	d505      	bpl.n	8007e00 <_fwalk_reent+0x24>
 8007df4:	6824      	ldr	r4, [r4, #0]
 8007df6:	2c00      	cmp	r4, #0
 8007df8:	d1f7      	bne.n	8007dea <_fwalk_reent+0xe>
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e00:	89ab      	ldrh	r3, [r5, #12]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d907      	bls.n	8007e16 <_fwalk_reent+0x3a>
 8007e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	d003      	beq.n	8007e16 <_fwalk_reent+0x3a>
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4630      	mov	r0, r6
 8007e12:	47c0      	blx	r8
 8007e14:	4307      	orrs	r7, r0
 8007e16:	3568      	adds	r5, #104	; 0x68
 8007e18:	e7e9      	b.n	8007dee <_fwalk_reent+0x12>

08007e1a <rshift>:
 8007e1a:	6903      	ldr	r3, [r0, #16]
 8007e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e20:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e24:	f100 0414 	add.w	r4, r0, #20
 8007e28:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e2c:	dd46      	ble.n	8007ebc <rshift+0xa2>
 8007e2e:	f011 011f 	ands.w	r1, r1, #31
 8007e32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e3a:	d10c      	bne.n	8007e56 <rshift+0x3c>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f100 0710 	add.w	r7, r0, #16
 8007e42:	42b1      	cmp	r1, r6
 8007e44:	d335      	bcc.n	8007eb2 <rshift+0x98>
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	1eea      	subs	r2, r5, #3
 8007e4c:	4296      	cmp	r6, r2
 8007e4e:	bf38      	it	cc
 8007e50:	2300      	movcc	r3, #0
 8007e52:	4423      	add	r3, r4
 8007e54:	e015      	b.n	8007e82 <rshift+0x68>
 8007e56:	46a1      	mov	r9, r4
 8007e58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e5c:	f1c1 0820 	rsb	r8, r1, #32
 8007e60:	40cf      	lsrs	r7, r1
 8007e62:	f105 0e04 	add.w	lr, r5, #4
 8007e66:	4576      	cmp	r6, lr
 8007e68:	46f4      	mov	ip, lr
 8007e6a:	d816      	bhi.n	8007e9a <rshift+0x80>
 8007e6c:	1a9a      	subs	r2, r3, r2
 8007e6e:	0092      	lsls	r2, r2, #2
 8007e70:	3a04      	subs	r2, #4
 8007e72:	3501      	adds	r5, #1
 8007e74:	42ae      	cmp	r6, r5
 8007e76:	bf38      	it	cc
 8007e78:	2200      	movcc	r2, #0
 8007e7a:	18a3      	adds	r3, r4, r2
 8007e7c:	50a7      	str	r7, [r4, r2]
 8007e7e:	b107      	cbz	r7, 8007e82 <rshift+0x68>
 8007e80:	3304      	adds	r3, #4
 8007e82:	42a3      	cmp	r3, r4
 8007e84:	eba3 0204 	sub.w	r2, r3, r4
 8007e88:	bf08      	it	eq
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e90:	6102      	str	r2, [r0, #16]
 8007e92:	bf08      	it	eq
 8007e94:	6143      	streq	r3, [r0, #20]
 8007e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9a:	f8dc c000 	ldr.w	ip, [ip]
 8007e9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ea2:	ea4c 0707 	orr.w	r7, ip, r7
 8007ea6:	f849 7b04 	str.w	r7, [r9], #4
 8007eaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007eae:	40cf      	lsrs	r7, r1
 8007eb0:	e7d9      	b.n	8007e66 <rshift+0x4c>
 8007eb2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007eb6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007eba:	e7c2      	b.n	8007e42 <rshift+0x28>
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	e7e0      	b.n	8007e82 <rshift+0x68>

08007ec0 <__hexdig_fun>:
 8007ec0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d802      	bhi.n	8007ece <__hexdig_fun+0xe>
 8007ec8:	3820      	subs	r0, #32
 8007eca:	b2c0      	uxtb	r0, r0
 8007ecc:	4770      	bx	lr
 8007ece:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ed2:	2b05      	cmp	r3, #5
 8007ed4:	d801      	bhi.n	8007eda <__hexdig_fun+0x1a>
 8007ed6:	3847      	subs	r0, #71	; 0x47
 8007ed8:	e7f7      	b.n	8007eca <__hexdig_fun+0xa>
 8007eda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d801      	bhi.n	8007ee6 <__hexdig_fun+0x26>
 8007ee2:	3827      	subs	r0, #39	; 0x27
 8007ee4:	e7f1      	b.n	8007eca <__hexdig_fun+0xa>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	4770      	bx	lr
	...

08007eec <__gethex>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	b08b      	sub	sp, #44	; 0x2c
 8007ef2:	9305      	str	r3, [sp, #20]
 8007ef4:	4bb2      	ldr	r3, [pc, #712]	; (80081c0 <__gethex+0x2d4>)
 8007ef6:	9002      	str	r0, [sp, #8]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	468b      	mov	fp, r1
 8007efc:	4618      	mov	r0, r3
 8007efe:	4690      	mov	r8, r2
 8007f00:	9303      	str	r3, [sp, #12]
 8007f02:	f7f8 f92f 	bl	8000164 <strlen>
 8007f06:	4682      	mov	sl, r0
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	f8db 2000 	ldr.w	r2, [fp]
 8007f0e:	4403      	add	r3, r0
 8007f10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	1c93      	adds	r3, r2, #2
 8007f18:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f1c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f20:	32fe      	adds	r2, #254	; 0xfe
 8007f22:	18d1      	adds	r1, r2, r3
 8007f24:	461f      	mov	r7, r3
 8007f26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f2a:	9101      	str	r1, [sp, #4]
 8007f2c:	2830      	cmp	r0, #48	; 0x30
 8007f2e:	d0f8      	beq.n	8007f22 <__gethex+0x36>
 8007f30:	f7ff ffc6 	bl	8007ec0 <__hexdig_fun>
 8007f34:	4604      	mov	r4, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d13a      	bne.n	8007fb0 <__gethex+0xc4>
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	9903      	ldr	r1, [sp, #12]
 8007f40:	f001 fc29 	bl	8009796 <strncmp>
 8007f44:	4605      	mov	r5, r0
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d166      	bne.n	8008018 <__gethex+0x12c>
 8007f4a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007f4e:	eb07 060a 	add.w	r6, r7, sl
 8007f52:	f7ff ffb5 	bl	8007ec0 <__hexdig_fun>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d060      	beq.n	800801c <__gethex+0x130>
 8007f5a:	4633      	mov	r3, r6
 8007f5c:	7818      	ldrb	r0, [r3, #0]
 8007f5e:	461f      	mov	r7, r3
 8007f60:	2830      	cmp	r0, #48	; 0x30
 8007f62:	f103 0301 	add.w	r3, r3, #1
 8007f66:	d0f9      	beq.n	8007f5c <__gethex+0x70>
 8007f68:	f7ff ffaa 	bl	8007ec0 <__hexdig_fun>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	fab0 f480 	clz	r4, r0
 8007f72:	4635      	mov	r5, r6
 8007f74:	0964      	lsrs	r4, r4, #5
 8007f76:	9301      	str	r3, [sp, #4]
 8007f78:	463a      	mov	r2, r7
 8007f7a:	4616      	mov	r6, r2
 8007f7c:	7830      	ldrb	r0, [r6, #0]
 8007f7e:	3201      	adds	r2, #1
 8007f80:	f7ff ff9e 	bl	8007ec0 <__hexdig_fun>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1f8      	bne.n	8007f7a <__gethex+0x8e>
 8007f88:	4652      	mov	r2, sl
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	9903      	ldr	r1, [sp, #12]
 8007f8e:	f001 fc02 	bl	8009796 <strncmp>
 8007f92:	b980      	cbnz	r0, 8007fb6 <__gethex+0xca>
 8007f94:	b94d      	cbnz	r5, 8007faa <__gethex+0xbe>
 8007f96:	eb06 050a 	add.w	r5, r6, sl
 8007f9a:	462a      	mov	r2, r5
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	7830      	ldrb	r0, [r6, #0]
 8007fa0:	3201      	adds	r2, #1
 8007fa2:	f7ff ff8d 	bl	8007ec0 <__hexdig_fun>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d1f8      	bne.n	8007f9c <__gethex+0xb0>
 8007faa:	1bad      	subs	r5, r5, r6
 8007fac:	00ad      	lsls	r5, r5, #2
 8007fae:	e004      	b.n	8007fba <__gethex+0xce>
 8007fb0:	2400      	movs	r4, #0
 8007fb2:	4625      	mov	r5, r4
 8007fb4:	e7e0      	b.n	8007f78 <__gethex+0x8c>
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	d1f7      	bne.n	8007faa <__gethex+0xbe>
 8007fba:	7833      	ldrb	r3, [r6, #0]
 8007fbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fc0:	2b50      	cmp	r3, #80	; 0x50
 8007fc2:	d139      	bne.n	8008038 <__gethex+0x14c>
 8007fc4:	7873      	ldrb	r3, [r6, #1]
 8007fc6:	2b2b      	cmp	r3, #43	; 0x2b
 8007fc8:	d02a      	beq.n	8008020 <__gethex+0x134>
 8007fca:	2b2d      	cmp	r3, #45	; 0x2d
 8007fcc:	d02c      	beq.n	8008028 <__gethex+0x13c>
 8007fce:	f04f 0900 	mov.w	r9, #0
 8007fd2:	1c71      	adds	r1, r6, #1
 8007fd4:	7808      	ldrb	r0, [r1, #0]
 8007fd6:	f7ff ff73 	bl	8007ec0 <__hexdig_fun>
 8007fda:	1e43      	subs	r3, r0, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b18      	cmp	r3, #24
 8007fe0:	d82a      	bhi.n	8008038 <__gethex+0x14c>
 8007fe2:	f1a0 0210 	sub.w	r2, r0, #16
 8007fe6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fea:	f7ff ff69 	bl	8007ec0 <__hexdig_fun>
 8007fee:	1e43      	subs	r3, r0, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b18      	cmp	r3, #24
 8007ff4:	d91b      	bls.n	800802e <__gethex+0x142>
 8007ff6:	f1b9 0f00 	cmp.w	r9, #0
 8007ffa:	d000      	beq.n	8007ffe <__gethex+0x112>
 8007ffc:	4252      	negs	r2, r2
 8007ffe:	4415      	add	r5, r2
 8008000:	f8cb 1000 	str.w	r1, [fp]
 8008004:	b1d4      	cbz	r4, 800803c <__gethex+0x150>
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	bf14      	ite	ne
 800800c:	2700      	movne	r7, #0
 800800e:	2706      	moveq	r7, #6
 8008010:	4638      	mov	r0, r7
 8008012:	b00b      	add	sp, #44	; 0x2c
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008018:	463e      	mov	r6, r7
 800801a:	4625      	mov	r5, r4
 800801c:	2401      	movs	r4, #1
 800801e:	e7cc      	b.n	8007fba <__gethex+0xce>
 8008020:	f04f 0900 	mov.w	r9, #0
 8008024:	1cb1      	adds	r1, r6, #2
 8008026:	e7d5      	b.n	8007fd4 <__gethex+0xe8>
 8008028:	f04f 0901 	mov.w	r9, #1
 800802c:	e7fa      	b.n	8008024 <__gethex+0x138>
 800802e:	230a      	movs	r3, #10
 8008030:	fb03 0202 	mla	r2, r3, r2, r0
 8008034:	3a10      	subs	r2, #16
 8008036:	e7d6      	b.n	8007fe6 <__gethex+0xfa>
 8008038:	4631      	mov	r1, r6
 800803a:	e7e1      	b.n	8008000 <__gethex+0x114>
 800803c:	4621      	mov	r1, r4
 800803e:	1bf3      	subs	r3, r6, r7
 8008040:	3b01      	subs	r3, #1
 8008042:	2b07      	cmp	r3, #7
 8008044:	dc0a      	bgt.n	800805c <__gethex+0x170>
 8008046:	9802      	ldr	r0, [sp, #8]
 8008048:	f000 faf0 	bl	800862c <_Balloc>
 800804c:	4604      	mov	r4, r0
 800804e:	b940      	cbnz	r0, 8008062 <__gethex+0x176>
 8008050:	4602      	mov	r2, r0
 8008052:	21de      	movs	r1, #222	; 0xde
 8008054:	4b5b      	ldr	r3, [pc, #364]	; (80081c4 <__gethex+0x2d8>)
 8008056:	485c      	ldr	r0, [pc, #368]	; (80081c8 <__gethex+0x2dc>)
 8008058:	f001 fbd0 	bl	80097fc <__assert_func>
 800805c:	3101      	adds	r1, #1
 800805e:	105b      	asrs	r3, r3, #1
 8008060:	e7ef      	b.n	8008042 <__gethex+0x156>
 8008062:	f04f 0b00 	mov.w	fp, #0
 8008066:	f100 0914 	add.w	r9, r0, #20
 800806a:	f1ca 0301 	rsb	r3, sl, #1
 800806e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008072:	f8cd b004 	str.w	fp, [sp, #4]
 8008076:	9308      	str	r3, [sp, #32]
 8008078:	42b7      	cmp	r7, r6
 800807a:	d33f      	bcc.n	80080fc <__gethex+0x210>
 800807c:	9f04      	ldr	r7, [sp, #16]
 800807e:	9b01      	ldr	r3, [sp, #4]
 8008080:	f847 3b04 	str.w	r3, [r7], #4
 8008084:	eba7 0709 	sub.w	r7, r7, r9
 8008088:	10bf      	asrs	r7, r7, #2
 800808a:	6127      	str	r7, [r4, #16]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fbbf 	bl	8008810 <__hi0bits>
 8008092:	017f      	lsls	r7, r7, #5
 8008094:	f8d8 6000 	ldr.w	r6, [r8]
 8008098:	1a3f      	subs	r7, r7, r0
 800809a:	42b7      	cmp	r7, r6
 800809c:	dd62      	ble.n	8008164 <__gethex+0x278>
 800809e:	1bbf      	subs	r7, r7, r6
 80080a0:	4639      	mov	r1, r7
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 ff59 	bl	8008f5a <__any_on>
 80080a8:	4682      	mov	sl, r0
 80080aa:	b1a8      	cbz	r0, 80080d8 <__gethex+0x1ec>
 80080ac:	f04f 0a01 	mov.w	sl, #1
 80080b0:	1e7b      	subs	r3, r7, #1
 80080b2:	1159      	asrs	r1, r3, #5
 80080b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80080b8:	f003 021f 	and.w	r2, r3, #31
 80080bc:	fa0a f202 	lsl.w	r2, sl, r2
 80080c0:	420a      	tst	r2, r1
 80080c2:	d009      	beq.n	80080d8 <__gethex+0x1ec>
 80080c4:	4553      	cmp	r3, sl
 80080c6:	dd05      	ble.n	80080d4 <__gethex+0x1e8>
 80080c8:	4620      	mov	r0, r4
 80080ca:	1eb9      	subs	r1, r7, #2
 80080cc:	f000 ff45 	bl	8008f5a <__any_on>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d144      	bne.n	800815e <__gethex+0x272>
 80080d4:	f04f 0a02 	mov.w	sl, #2
 80080d8:	4639      	mov	r1, r7
 80080da:	4620      	mov	r0, r4
 80080dc:	f7ff fe9d 	bl	8007e1a <rshift>
 80080e0:	443d      	add	r5, r7
 80080e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080e6:	42ab      	cmp	r3, r5
 80080e8:	da4a      	bge.n	8008180 <__gethex+0x294>
 80080ea:	4621      	mov	r1, r4
 80080ec:	9802      	ldr	r0, [sp, #8]
 80080ee:	f000 fadd 	bl	80086ac <_Bfree>
 80080f2:	2300      	movs	r3, #0
 80080f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080f6:	27a3      	movs	r7, #163	; 0xa3
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	e789      	b.n	8008010 <__gethex+0x124>
 80080fc:	1e73      	subs	r3, r6, #1
 80080fe:	9a06      	ldr	r2, [sp, #24]
 8008100:	9307      	str	r3, [sp, #28]
 8008102:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008106:	4293      	cmp	r3, r2
 8008108:	d019      	beq.n	800813e <__gethex+0x252>
 800810a:	f1bb 0f20 	cmp.w	fp, #32
 800810e:	d107      	bne.n	8008120 <__gethex+0x234>
 8008110:	9b04      	ldr	r3, [sp, #16]
 8008112:	9a01      	ldr	r2, [sp, #4]
 8008114:	f843 2b04 	str.w	r2, [r3], #4
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	2300      	movs	r3, #0
 800811c:	469b      	mov	fp, r3
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008124:	f7ff fecc 	bl	8007ec0 <__hexdig_fun>
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	f000 000f 	and.w	r0, r0, #15
 800812e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008132:	4303      	orrs	r3, r0
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	f10b 0b04 	add.w	fp, fp, #4
 800813a:	9b07      	ldr	r3, [sp, #28]
 800813c:	e00d      	b.n	800815a <__gethex+0x26e>
 800813e:	9a08      	ldr	r2, [sp, #32]
 8008140:	1e73      	subs	r3, r6, #1
 8008142:	4413      	add	r3, r2
 8008144:	42bb      	cmp	r3, r7
 8008146:	d3e0      	bcc.n	800810a <__gethex+0x21e>
 8008148:	4618      	mov	r0, r3
 800814a:	4652      	mov	r2, sl
 800814c:	9903      	ldr	r1, [sp, #12]
 800814e:	9309      	str	r3, [sp, #36]	; 0x24
 8008150:	f001 fb21 	bl	8009796 <strncmp>
 8008154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008156:	2800      	cmp	r0, #0
 8008158:	d1d7      	bne.n	800810a <__gethex+0x21e>
 800815a:	461e      	mov	r6, r3
 800815c:	e78c      	b.n	8008078 <__gethex+0x18c>
 800815e:	f04f 0a03 	mov.w	sl, #3
 8008162:	e7b9      	b.n	80080d8 <__gethex+0x1ec>
 8008164:	da09      	bge.n	800817a <__gethex+0x28e>
 8008166:	1bf7      	subs	r7, r6, r7
 8008168:	4621      	mov	r1, r4
 800816a:	463a      	mov	r2, r7
 800816c:	9802      	ldr	r0, [sp, #8]
 800816e:	f000 fcb5 	bl	8008adc <__lshift>
 8008172:	4604      	mov	r4, r0
 8008174:	1bed      	subs	r5, r5, r7
 8008176:	f100 0914 	add.w	r9, r0, #20
 800817a:	f04f 0a00 	mov.w	sl, #0
 800817e:	e7b0      	b.n	80080e2 <__gethex+0x1f6>
 8008180:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008184:	42a8      	cmp	r0, r5
 8008186:	dd72      	ble.n	800826e <__gethex+0x382>
 8008188:	1b45      	subs	r5, r0, r5
 800818a:	42ae      	cmp	r6, r5
 800818c:	dc35      	bgt.n	80081fa <__gethex+0x30e>
 800818e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d029      	beq.n	80081ea <__gethex+0x2fe>
 8008196:	2b03      	cmp	r3, #3
 8008198:	d02b      	beq.n	80081f2 <__gethex+0x306>
 800819a:	2b01      	cmp	r3, #1
 800819c:	d11c      	bne.n	80081d8 <__gethex+0x2ec>
 800819e:	42ae      	cmp	r6, r5
 80081a0:	d11a      	bne.n	80081d8 <__gethex+0x2ec>
 80081a2:	2e01      	cmp	r6, #1
 80081a4:	d112      	bne.n	80081cc <__gethex+0x2e0>
 80081a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081aa:	9a05      	ldr	r2, [sp, #20]
 80081ac:	2762      	movs	r7, #98	; 0x62
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	2301      	movs	r3, #1
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	f8c9 3000 	str.w	r3, [r9]
 80081b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081ba:	601c      	str	r4, [r3, #0]
 80081bc:	e728      	b.n	8008010 <__gethex+0x124>
 80081be:	bf00      	nop
 80081c0:	08009fd4 	.word	0x08009fd4
 80081c4:	08009ef8 	.word	0x08009ef8
 80081c8:	08009f6c 	.word	0x08009f6c
 80081cc:	4620      	mov	r0, r4
 80081ce:	1e71      	subs	r1, r6, #1
 80081d0:	f000 fec3 	bl	8008f5a <__any_on>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d1e6      	bne.n	80081a6 <__gethex+0x2ba>
 80081d8:	4621      	mov	r1, r4
 80081da:	9802      	ldr	r0, [sp, #8]
 80081dc:	f000 fa66 	bl	80086ac <_Bfree>
 80081e0:	2300      	movs	r3, #0
 80081e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081e4:	2750      	movs	r7, #80	; 0x50
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	e712      	b.n	8008010 <__gethex+0x124>
 80081ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f3      	bne.n	80081d8 <__gethex+0x2ec>
 80081f0:	e7d9      	b.n	80081a6 <__gethex+0x2ba>
 80081f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1d6      	bne.n	80081a6 <__gethex+0x2ba>
 80081f8:	e7ee      	b.n	80081d8 <__gethex+0x2ec>
 80081fa:	1e6f      	subs	r7, r5, #1
 80081fc:	f1ba 0f00 	cmp.w	sl, #0
 8008200:	d132      	bne.n	8008268 <__gethex+0x37c>
 8008202:	b127      	cbz	r7, 800820e <__gethex+0x322>
 8008204:	4639      	mov	r1, r7
 8008206:	4620      	mov	r0, r4
 8008208:	f000 fea7 	bl	8008f5a <__any_on>
 800820c:	4682      	mov	sl, r0
 800820e:	2101      	movs	r1, #1
 8008210:	117b      	asrs	r3, r7, #5
 8008212:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008216:	f007 071f 	and.w	r7, r7, #31
 800821a:	fa01 f707 	lsl.w	r7, r1, r7
 800821e:	421f      	tst	r7, r3
 8008220:	f04f 0702 	mov.w	r7, #2
 8008224:	4629      	mov	r1, r5
 8008226:	4620      	mov	r0, r4
 8008228:	bf18      	it	ne
 800822a:	f04a 0a02 	orrne.w	sl, sl, #2
 800822e:	1b76      	subs	r6, r6, r5
 8008230:	f7ff fdf3 	bl	8007e1a <rshift>
 8008234:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008238:	f1ba 0f00 	cmp.w	sl, #0
 800823c:	d048      	beq.n	80082d0 <__gethex+0x3e4>
 800823e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d015      	beq.n	8008272 <__gethex+0x386>
 8008246:	2b03      	cmp	r3, #3
 8008248:	d017      	beq.n	800827a <__gethex+0x38e>
 800824a:	2b01      	cmp	r3, #1
 800824c:	d109      	bne.n	8008262 <__gethex+0x376>
 800824e:	f01a 0f02 	tst.w	sl, #2
 8008252:	d006      	beq.n	8008262 <__gethex+0x376>
 8008254:	f8d9 0000 	ldr.w	r0, [r9]
 8008258:	ea4a 0a00 	orr.w	sl, sl, r0
 800825c:	f01a 0f01 	tst.w	sl, #1
 8008260:	d10e      	bne.n	8008280 <__gethex+0x394>
 8008262:	f047 0710 	orr.w	r7, r7, #16
 8008266:	e033      	b.n	80082d0 <__gethex+0x3e4>
 8008268:	f04f 0a01 	mov.w	sl, #1
 800826c:	e7cf      	b.n	800820e <__gethex+0x322>
 800826e:	2701      	movs	r7, #1
 8008270:	e7e2      	b.n	8008238 <__gethex+0x34c>
 8008272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008274:	f1c3 0301 	rsb	r3, r3, #1
 8008278:	9315      	str	r3, [sp, #84]	; 0x54
 800827a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0f0      	beq.n	8008262 <__gethex+0x376>
 8008280:	f04f 0c00 	mov.w	ip, #0
 8008284:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008288:	f104 0314 	add.w	r3, r4, #20
 800828c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008290:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008294:	4618      	mov	r0, r3
 8008296:	f853 2b04 	ldr.w	r2, [r3], #4
 800829a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800829e:	d01c      	beq.n	80082da <__gethex+0x3ee>
 80082a0:	3201      	adds	r2, #1
 80082a2:	6002      	str	r2, [r0, #0]
 80082a4:	2f02      	cmp	r7, #2
 80082a6:	f104 0314 	add.w	r3, r4, #20
 80082aa:	d13d      	bne.n	8008328 <__gethex+0x43c>
 80082ac:	f8d8 2000 	ldr.w	r2, [r8]
 80082b0:	3a01      	subs	r2, #1
 80082b2:	42b2      	cmp	r2, r6
 80082b4:	d10a      	bne.n	80082cc <__gethex+0x3e0>
 80082b6:	2201      	movs	r2, #1
 80082b8:	1171      	asrs	r1, r6, #5
 80082ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082be:	f006 061f 	and.w	r6, r6, #31
 80082c2:	fa02 f606 	lsl.w	r6, r2, r6
 80082c6:	421e      	tst	r6, r3
 80082c8:	bf18      	it	ne
 80082ca:	4617      	movne	r7, r2
 80082cc:	f047 0720 	orr.w	r7, r7, #32
 80082d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082d2:	601c      	str	r4, [r3, #0]
 80082d4:	9b05      	ldr	r3, [sp, #20]
 80082d6:	601d      	str	r5, [r3, #0]
 80082d8:	e69a      	b.n	8008010 <__gethex+0x124>
 80082da:	4299      	cmp	r1, r3
 80082dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80082e0:	d8d8      	bhi.n	8008294 <__gethex+0x3a8>
 80082e2:	68a3      	ldr	r3, [r4, #8]
 80082e4:	459b      	cmp	fp, r3
 80082e6:	db17      	blt.n	8008318 <__gethex+0x42c>
 80082e8:	6861      	ldr	r1, [r4, #4]
 80082ea:	9802      	ldr	r0, [sp, #8]
 80082ec:	3101      	adds	r1, #1
 80082ee:	f000 f99d 	bl	800862c <_Balloc>
 80082f2:	4681      	mov	r9, r0
 80082f4:	b918      	cbnz	r0, 80082fe <__gethex+0x412>
 80082f6:	4602      	mov	r2, r0
 80082f8:	2184      	movs	r1, #132	; 0x84
 80082fa:	4b19      	ldr	r3, [pc, #100]	; (8008360 <__gethex+0x474>)
 80082fc:	e6ab      	b.n	8008056 <__gethex+0x16a>
 80082fe:	6922      	ldr	r2, [r4, #16]
 8008300:	f104 010c 	add.w	r1, r4, #12
 8008304:	3202      	adds	r2, #2
 8008306:	0092      	lsls	r2, r2, #2
 8008308:	300c      	adds	r0, #12
 800830a:	f000 f981 	bl	8008610 <memcpy>
 800830e:	4621      	mov	r1, r4
 8008310:	9802      	ldr	r0, [sp, #8]
 8008312:	f000 f9cb 	bl	80086ac <_Bfree>
 8008316:	464c      	mov	r4, r9
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	6122      	str	r2, [r4, #16]
 800831e:	2201      	movs	r2, #1
 8008320:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008324:	615a      	str	r2, [r3, #20]
 8008326:	e7bd      	b.n	80082a4 <__gethex+0x3b8>
 8008328:	6922      	ldr	r2, [r4, #16]
 800832a:	455a      	cmp	r2, fp
 800832c:	dd0b      	ble.n	8008346 <__gethex+0x45a>
 800832e:	2101      	movs	r1, #1
 8008330:	4620      	mov	r0, r4
 8008332:	f7ff fd72 	bl	8007e1a <rshift>
 8008336:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800833a:	3501      	adds	r5, #1
 800833c:	42ab      	cmp	r3, r5
 800833e:	f6ff aed4 	blt.w	80080ea <__gethex+0x1fe>
 8008342:	2701      	movs	r7, #1
 8008344:	e7c2      	b.n	80082cc <__gethex+0x3e0>
 8008346:	f016 061f 	ands.w	r6, r6, #31
 800834a:	d0fa      	beq.n	8008342 <__gethex+0x456>
 800834c:	4453      	add	r3, sl
 800834e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008352:	f000 fa5d 	bl	8008810 <__hi0bits>
 8008356:	f1c6 0620 	rsb	r6, r6, #32
 800835a:	42b0      	cmp	r0, r6
 800835c:	dbe7      	blt.n	800832e <__gethex+0x442>
 800835e:	e7f0      	b.n	8008342 <__gethex+0x456>
 8008360:	08009ef8 	.word	0x08009ef8

08008364 <L_shift>:
 8008364:	f1c2 0208 	rsb	r2, r2, #8
 8008368:	0092      	lsls	r2, r2, #2
 800836a:	b570      	push	{r4, r5, r6, lr}
 800836c:	f1c2 0620 	rsb	r6, r2, #32
 8008370:	6843      	ldr	r3, [r0, #4]
 8008372:	6804      	ldr	r4, [r0, #0]
 8008374:	fa03 f506 	lsl.w	r5, r3, r6
 8008378:	432c      	orrs	r4, r5
 800837a:	40d3      	lsrs	r3, r2
 800837c:	6004      	str	r4, [r0, #0]
 800837e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008382:	4288      	cmp	r0, r1
 8008384:	d3f4      	bcc.n	8008370 <L_shift+0xc>
 8008386:	bd70      	pop	{r4, r5, r6, pc}

08008388 <__match>:
 8008388:	b530      	push	{r4, r5, lr}
 800838a:	6803      	ldr	r3, [r0, #0]
 800838c:	3301      	adds	r3, #1
 800838e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008392:	b914      	cbnz	r4, 800839a <__match+0x12>
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	2001      	movs	r0, #1
 8008398:	bd30      	pop	{r4, r5, pc}
 800839a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083a2:	2d19      	cmp	r5, #25
 80083a4:	bf98      	it	ls
 80083a6:	3220      	addls	r2, #32
 80083a8:	42a2      	cmp	r2, r4
 80083aa:	d0f0      	beq.n	800838e <__match+0x6>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7f3      	b.n	8008398 <__match+0x10>

080083b0 <__hexnan>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	2500      	movs	r5, #0
 80083b6:	680b      	ldr	r3, [r1, #0]
 80083b8:	4682      	mov	sl, r0
 80083ba:	115e      	asrs	r6, r3, #5
 80083bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083c0:	f013 031f 	ands.w	r3, r3, #31
 80083c4:	bf18      	it	ne
 80083c6:	3604      	addne	r6, #4
 80083c8:	1f37      	subs	r7, r6, #4
 80083ca:	46b9      	mov	r9, r7
 80083cc:	463c      	mov	r4, r7
 80083ce:	46ab      	mov	fp, r5
 80083d0:	b087      	sub	sp, #28
 80083d2:	4690      	mov	r8, r2
 80083d4:	6802      	ldr	r2, [r0, #0]
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	f846 5c04 	str.w	r5, [r6, #-4]
 80083dc:	9502      	str	r5, [sp, #8]
 80083de:	7851      	ldrb	r1, [r2, #1]
 80083e0:	1c53      	adds	r3, r2, #1
 80083e2:	9303      	str	r3, [sp, #12]
 80083e4:	b341      	cbz	r1, 8008438 <__hexnan+0x88>
 80083e6:	4608      	mov	r0, r1
 80083e8:	9205      	str	r2, [sp, #20]
 80083ea:	9104      	str	r1, [sp, #16]
 80083ec:	f7ff fd68 	bl	8007ec0 <__hexdig_fun>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d14f      	bne.n	8008494 <__hexnan+0xe4>
 80083f4:	9904      	ldr	r1, [sp, #16]
 80083f6:	9a05      	ldr	r2, [sp, #20]
 80083f8:	2920      	cmp	r1, #32
 80083fa:	d818      	bhi.n	800842e <__hexnan+0x7e>
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	459b      	cmp	fp, r3
 8008400:	dd13      	ble.n	800842a <__hexnan+0x7a>
 8008402:	454c      	cmp	r4, r9
 8008404:	d206      	bcs.n	8008414 <__hexnan+0x64>
 8008406:	2d07      	cmp	r5, #7
 8008408:	dc04      	bgt.n	8008414 <__hexnan+0x64>
 800840a:	462a      	mov	r2, r5
 800840c:	4649      	mov	r1, r9
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff ffa8 	bl	8008364 <L_shift>
 8008414:	4544      	cmp	r4, r8
 8008416:	d950      	bls.n	80084ba <__hexnan+0x10a>
 8008418:	2300      	movs	r3, #0
 800841a:	f1a4 0904 	sub.w	r9, r4, #4
 800841e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008422:	461d      	mov	r5, r3
 8008424:	464c      	mov	r4, r9
 8008426:	f8cd b008 	str.w	fp, [sp, #8]
 800842a:	9a03      	ldr	r2, [sp, #12]
 800842c:	e7d7      	b.n	80083de <__hexnan+0x2e>
 800842e:	2929      	cmp	r1, #41	; 0x29
 8008430:	d156      	bne.n	80084e0 <__hexnan+0x130>
 8008432:	3202      	adds	r2, #2
 8008434:	f8ca 2000 	str.w	r2, [sl]
 8008438:	f1bb 0f00 	cmp.w	fp, #0
 800843c:	d050      	beq.n	80084e0 <__hexnan+0x130>
 800843e:	454c      	cmp	r4, r9
 8008440:	d206      	bcs.n	8008450 <__hexnan+0xa0>
 8008442:	2d07      	cmp	r5, #7
 8008444:	dc04      	bgt.n	8008450 <__hexnan+0xa0>
 8008446:	462a      	mov	r2, r5
 8008448:	4649      	mov	r1, r9
 800844a:	4620      	mov	r0, r4
 800844c:	f7ff ff8a 	bl	8008364 <L_shift>
 8008450:	4544      	cmp	r4, r8
 8008452:	d934      	bls.n	80084be <__hexnan+0x10e>
 8008454:	4623      	mov	r3, r4
 8008456:	f1a8 0204 	sub.w	r2, r8, #4
 800845a:	f853 1b04 	ldr.w	r1, [r3], #4
 800845e:	429f      	cmp	r7, r3
 8008460:	f842 1f04 	str.w	r1, [r2, #4]!
 8008464:	d2f9      	bcs.n	800845a <__hexnan+0xaa>
 8008466:	1b3b      	subs	r3, r7, r4
 8008468:	f023 0303 	bic.w	r3, r3, #3
 800846c:	3304      	adds	r3, #4
 800846e:	3401      	adds	r4, #1
 8008470:	3e03      	subs	r6, #3
 8008472:	42b4      	cmp	r4, r6
 8008474:	bf88      	it	hi
 8008476:	2304      	movhi	r3, #4
 8008478:	2200      	movs	r2, #0
 800847a:	4443      	add	r3, r8
 800847c:	f843 2b04 	str.w	r2, [r3], #4
 8008480:	429f      	cmp	r7, r3
 8008482:	d2fb      	bcs.n	800847c <__hexnan+0xcc>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	b91b      	cbnz	r3, 8008490 <__hexnan+0xe0>
 8008488:	4547      	cmp	r7, r8
 800848a:	d127      	bne.n	80084dc <__hexnan+0x12c>
 800848c:	2301      	movs	r3, #1
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	2005      	movs	r0, #5
 8008492:	e026      	b.n	80084e2 <__hexnan+0x132>
 8008494:	3501      	adds	r5, #1
 8008496:	2d08      	cmp	r5, #8
 8008498:	f10b 0b01 	add.w	fp, fp, #1
 800849c:	dd06      	ble.n	80084ac <__hexnan+0xfc>
 800849e:	4544      	cmp	r4, r8
 80084a0:	d9c3      	bls.n	800842a <__hexnan+0x7a>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2501      	movs	r5, #1
 80084a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80084aa:	3c04      	subs	r4, #4
 80084ac:	6822      	ldr	r2, [r4, #0]
 80084ae:	f000 000f 	and.w	r0, r0, #15
 80084b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80084b6:	6022      	str	r2, [r4, #0]
 80084b8:	e7b7      	b.n	800842a <__hexnan+0x7a>
 80084ba:	2508      	movs	r5, #8
 80084bc:	e7b5      	b.n	800842a <__hexnan+0x7a>
 80084be:	9b01      	ldr	r3, [sp, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0df      	beq.n	8008484 <__hexnan+0xd4>
 80084c4:	f04f 32ff 	mov.w	r2, #4294967295
 80084c8:	f1c3 0320 	rsb	r3, r3, #32
 80084cc:	fa22 f303 	lsr.w	r3, r2, r3
 80084d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084d4:	401a      	ands	r2, r3
 80084d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80084da:	e7d3      	b.n	8008484 <__hexnan+0xd4>
 80084dc:	3f04      	subs	r7, #4
 80084de:	e7d1      	b.n	8008484 <__hexnan+0xd4>
 80084e0:	2004      	movs	r0, #4
 80084e2:	b007      	add	sp, #28
 80084e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084e8 <_localeconv_r>:
 80084e8:	4800      	ldr	r0, [pc, #0]	; (80084ec <_localeconv_r+0x4>)
 80084ea:	4770      	bx	lr
 80084ec:	200001b4 	.word	0x200001b4

080084f0 <__retarget_lock_init_recursive>:
 80084f0:	4770      	bx	lr

080084f2 <__retarget_lock_acquire_recursive>:
 80084f2:	4770      	bx	lr

080084f4 <__retarget_lock_release_recursive>:
 80084f4:	4770      	bx	lr

080084f6 <__swhatbuf_r>:
 80084f6:	b570      	push	{r4, r5, r6, lr}
 80084f8:	460e      	mov	r6, r1
 80084fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fe:	4614      	mov	r4, r2
 8008500:	2900      	cmp	r1, #0
 8008502:	461d      	mov	r5, r3
 8008504:	b096      	sub	sp, #88	; 0x58
 8008506:	da08      	bge.n	800851a <__swhatbuf_r+0x24>
 8008508:	2200      	movs	r2, #0
 800850a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800850e:	602a      	str	r2, [r5, #0]
 8008510:	061a      	lsls	r2, r3, #24
 8008512:	d410      	bmi.n	8008536 <__swhatbuf_r+0x40>
 8008514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008518:	e00e      	b.n	8008538 <__swhatbuf_r+0x42>
 800851a:	466a      	mov	r2, sp
 800851c:	f001 f9ae 	bl	800987c <_fstat_r>
 8008520:	2800      	cmp	r0, #0
 8008522:	dbf1      	blt.n	8008508 <__swhatbuf_r+0x12>
 8008524:	9a01      	ldr	r2, [sp, #4]
 8008526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800852a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800852e:	425a      	negs	r2, r3
 8008530:	415a      	adcs	r2, r3
 8008532:	602a      	str	r2, [r5, #0]
 8008534:	e7ee      	b.n	8008514 <__swhatbuf_r+0x1e>
 8008536:	2340      	movs	r3, #64	; 0x40
 8008538:	2000      	movs	r0, #0
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	b016      	add	sp, #88	; 0x58
 800853e:	bd70      	pop	{r4, r5, r6, pc}

08008540 <__smakebuf_r>:
 8008540:	898b      	ldrh	r3, [r1, #12]
 8008542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008544:	079d      	lsls	r5, r3, #30
 8008546:	4606      	mov	r6, r0
 8008548:	460c      	mov	r4, r1
 800854a:	d507      	bpl.n	800855c <__smakebuf_r+0x1c>
 800854c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	2301      	movs	r3, #1
 8008556:	6163      	str	r3, [r4, #20]
 8008558:	b002      	add	sp, #8
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	466a      	mov	r2, sp
 800855e:	ab01      	add	r3, sp, #4
 8008560:	f7ff ffc9 	bl	80084f6 <__swhatbuf_r>
 8008564:	9900      	ldr	r1, [sp, #0]
 8008566:	4605      	mov	r5, r0
 8008568:	4630      	mov	r0, r6
 800856a:	f000 fd93 	bl	8009094 <_malloc_r>
 800856e:	b948      	cbnz	r0, 8008584 <__smakebuf_r+0x44>
 8008570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008574:	059a      	lsls	r2, r3, #22
 8008576:	d4ef      	bmi.n	8008558 <__smakebuf_r+0x18>
 8008578:	f023 0303 	bic.w	r3, r3, #3
 800857c:	f043 0302 	orr.w	r3, r3, #2
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	e7e3      	b.n	800854c <__smakebuf_r+0xc>
 8008584:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <__smakebuf_r+0x7c>)
 8008586:	62b3      	str	r3, [r6, #40]	; 0x28
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	6020      	str	r0, [r4, #0]
 800858c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	9b00      	ldr	r3, [sp, #0]
 8008594:	6120      	str	r0, [r4, #16]
 8008596:	6163      	str	r3, [r4, #20]
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	b15b      	cbz	r3, 80085b4 <__smakebuf_r+0x74>
 800859c:	4630      	mov	r0, r6
 800859e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085a2:	f001 f97d 	bl	80098a0 <_isatty_r>
 80085a6:	b128      	cbz	r0, 80085b4 <__smakebuf_r+0x74>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	f043 0301 	orr.w	r3, r3, #1
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	89a0      	ldrh	r0, [r4, #12]
 80085b6:	4305      	orrs	r5, r0
 80085b8:	81a5      	strh	r5, [r4, #12]
 80085ba:	e7cd      	b.n	8008558 <__smakebuf_r+0x18>
 80085bc:	08007c79 	.word	0x08007c79

080085c0 <malloc>:
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <malloc+0xc>)
 80085c2:	4601      	mov	r1, r0
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	f000 bd65 	b.w	8009094 <_malloc_r>
 80085ca:	bf00      	nop
 80085cc:	2000005c 	.word	0x2000005c

080085d0 <__ascii_mbtowc>:
 80085d0:	b082      	sub	sp, #8
 80085d2:	b901      	cbnz	r1, 80085d6 <__ascii_mbtowc+0x6>
 80085d4:	a901      	add	r1, sp, #4
 80085d6:	b142      	cbz	r2, 80085ea <__ascii_mbtowc+0x1a>
 80085d8:	b14b      	cbz	r3, 80085ee <__ascii_mbtowc+0x1e>
 80085da:	7813      	ldrb	r3, [r2, #0]
 80085dc:	600b      	str	r3, [r1, #0]
 80085de:	7812      	ldrb	r2, [r2, #0]
 80085e0:	1e10      	subs	r0, r2, #0
 80085e2:	bf18      	it	ne
 80085e4:	2001      	movne	r0, #1
 80085e6:	b002      	add	sp, #8
 80085e8:	4770      	bx	lr
 80085ea:	4610      	mov	r0, r2
 80085ec:	e7fb      	b.n	80085e6 <__ascii_mbtowc+0x16>
 80085ee:	f06f 0001 	mvn.w	r0, #1
 80085f2:	e7f8      	b.n	80085e6 <__ascii_mbtowc+0x16>

080085f4 <memchr>:
 80085f4:	4603      	mov	r3, r0
 80085f6:	b510      	push	{r4, lr}
 80085f8:	b2c9      	uxtb	r1, r1
 80085fa:	4402      	add	r2, r0
 80085fc:	4293      	cmp	r3, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	d101      	bne.n	8008606 <memchr+0x12>
 8008602:	2000      	movs	r0, #0
 8008604:	e003      	b.n	800860e <memchr+0x1a>
 8008606:	7804      	ldrb	r4, [r0, #0]
 8008608:	3301      	adds	r3, #1
 800860a:	428c      	cmp	r4, r1
 800860c:	d1f6      	bne.n	80085fc <memchr+0x8>
 800860e:	bd10      	pop	{r4, pc}

08008610 <memcpy>:
 8008610:	440a      	add	r2, r1
 8008612:	4291      	cmp	r1, r2
 8008614:	f100 33ff 	add.w	r3, r0, #4294967295
 8008618:	d100      	bne.n	800861c <memcpy+0xc>
 800861a:	4770      	bx	lr
 800861c:	b510      	push	{r4, lr}
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	4291      	cmp	r1, r2
 8008624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008628:	d1f9      	bne.n	800861e <memcpy+0xe>
 800862a:	bd10      	pop	{r4, pc}

0800862c <_Balloc>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008630:	4604      	mov	r4, r0
 8008632:	460d      	mov	r5, r1
 8008634:	b976      	cbnz	r6, 8008654 <_Balloc+0x28>
 8008636:	2010      	movs	r0, #16
 8008638:	f7ff ffc2 	bl	80085c0 <malloc>
 800863c:	4602      	mov	r2, r0
 800863e:	6260      	str	r0, [r4, #36]	; 0x24
 8008640:	b920      	cbnz	r0, 800864c <_Balloc+0x20>
 8008642:	2166      	movs	r1, #102	; 0x66
 8008644:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <_Balloc+0x78>)
 8008646:	4818      	ldr	r0, [pc, #96]	; (80086a8 <_Balloc+0x7c>)
 8008648:	f001 f8d8 	bl	80097fc <__assert_func>
 800864c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008650:	6006      	str	r6, [r0, #0]
 8008652:	60c6      	str	r6, [r0, #12]
 8008654:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008656:	68f3      	ldr	r3, [r6, #12]
 8008658:	b183      	cbz	r3, 800867c <_Balloc+0x50>
 800865a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008662:	b9b8      	cbnz	r0, 8008694 <_Balloc+0x68>
 8008664:	2101      	movs	r1, #1
 8008666:	fa01 f605 	lsl.w	r6, r1, r5
 800866a:	1d72      	adds	r2, r6, #5
 800866c:	4620      	mov	r0, r4
 800866e:	0092      	lsls	r2, r2, #2
 8008670:	f000 fc94 	bl	8008f9c <_calloc_r>
 8008674:	b160      	cbz	r0, 8008690 <_Balloc+0x64>
 8008676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800867a:	e00e      	b.n	800869a <_Balloc+0x6e>
 800867c:	2221      	movs	r2, #33	; 0x21
 800867e:	2104      	movs	r1, #4
 8008680:	4620      	mov	r0, r4
 8008682:	f000 fc8b 	bl	8008f9c <_calloc_r>
 8008686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008688:	60f0      	str	r0, [r6, #12]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e4      	bne.n	800865a <_Balloc+0x2e>
 8008690:	2000      	movs	r0, #0
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	6802      	ldr	r2, [r0, #0]
 8008696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800869a:	2300      	movs	r3, #0
 800869c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086a0:	e7f7      	b.n	8008692 <_Balloc+0x66>
 80086a2:	bf00      	nop
 80086a4:	08009e86 	.word	0x08009e86
 80086a8:	08009fe8 	.word	0x08009fe8

080086ac <_Bfree>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086b0:	4605      	mov	r5, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	b976      	cbnz	r6, 80086d4 <_Bfree+0x28>
 80086b6:	2010      	movs	r0, #16
 80086b8:	f7ff ff82 	bl	80085c0 <malloc>
 80086bc:	4602      	mov	r2, r0
 80086be:	6268      	str	r0, [r5, #36]	; 0x24
 80086c0:	b920      	cbnz	r0, 80086cc <_Bfree+0x20>
 80086c2:	218a      	movs	r1, #138	; 0x8a
 80086c4:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <_Bfree+0x3c>)
 80086c6:	4809      	ldr	r0, [pc, #36]	; (80086ec <_Bfree+0x40>)
 80086c8:	f001 f898 	bl	80097fc <__assert_func>
 80086cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d0:	6006      	str	r6, [r0, #0]
 80086d2:	60c6      	str	r6, [r0, #12]
 80086d4:	b13c      	cbz	r4, 80086e6 <_Bfree+0x3a>
 80086d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086d8:	6862      	ldr	r2, [r4, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086e0:	6021      	str	r1, [r4, #0]
 80086e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	08009e86 	.word	0x08009e86
 80086ec:	08009fe8 	.word	0x08009fe8

080086f0 <__multadd>:
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	4607      	mov	r7, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	461e      	mov	r6, r3
 80086fa:	2000      	movs	r0, #0
 80086fc:	690d      	ldr	r5, [r1, #16]
 80086fe:	f101 0c14 	add.w	ip, r1, #20
 8008702:	f8dc 3000 	ldr.w	r3, [ip]
 8008706:	3001      	adds	r0, #1
 8008708:	b299      	uxth	r1, r3
 800870a:	fb02 6101 	mla	r1, r2, r1, r6
 800870e:	0c1e      	lsrs	r6, r3, #16
 8008710:	0c0b      	lsrs	r3, r1, #16
 8008712:	fb02 3306 	mla	r3, r2, r6, r3
 8008716:	b289      	uxth	r1, r1
 8008718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800871c:	4285      	cmp	r5, r0
 800871e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008722:	f84c 1b04 	str.w	r1, [ip], #4
 8008726:	dcec      	bgt.n	8008702 <__multadd+0x12>
 8008728:	b30e      	cbz	r6, 800876e <__multadd+0x7e>
 800872a:	68a3      	ldr	r3, [r4, #8]
 800872c:	42ab      	cmp	r3, r5
 800872e:	dc19      	bgt.n	8008764 <__multadd+0x74>
 8008730:	6861      	ldr	r1, [r4, #4]
 8008732:	4638      	mov	r0, r7
 8008734:	3101      	adds	r1, #1
 8008736:	f7ff ff79 	bl	800862c <_Balloc>
 800873a:	4680      	mov	r8, r0
 800873c:	b928      	cbnz	r0, 800874a <__multadd+0x5a>
 800873e:	4602      	mov	r2, r0
 8008740:	21b5      	movs	r1, #181	; 0xb5
 8008742:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <__multadd+0x84>)
 8008744:	480c      	ldr	r0, [pc, #48]	; (8008778 <__multadd+0x88>)
 8008746:	f001 f859 	bl	80097fc <__assert_func>
 800874a:	6922      	ldr	r2, [r4, #16]
 800874c:	f104 010c 	add.w	r1, r4, #12
 8008750:	3202      	adds	r2, #2
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	300c      	adds	r0, #12
 8008756:	f7ff ff5b 	bl	8008610 <memcpy>
 800875a:	4621      	mov	r1, r4
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff ffa5 	bl	80086ac <_Bfree>
 8008762:	4644      	mov	r4, r8
 8008764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008768:	3501      	adds	r5, #1
 800876a:	615e      	str	r6, [r3, #20]
 800876c:	6125      	str	r5, [r4, #16]
 800876e:	4620      	mov	r0, r4
 8008770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008774:	08009ef8 	.word	0x08009ef8
 8008778:	08009fe8 	.word	0x08009fe8

0800877c <__s2b>:
 800877c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008780:	4615      	mov	r5, r2
 8008782:	2209      	movs	r2, #9
 8008784:	461f      	mov	r7, r3
 8008786:	3308      	adds	r3, #8
 8008788:	460c      	mov	r4, r1
 800878a:	fb93 f3f2 	sdiv	r3, r3, r2
 800878e:	4606      	mov	r6, r0
 8008790:	2201      	movs	r2, #1
 8008792:	2100      	movs	r1, #0
 8008794:	429a      	cmp	r2, r3
 8008796:	db09      	blt.n	80087ac <__s2b+0x30>
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff ff47 	bl	800862c <_Balloc>
 800879e:	b940      	cbnz	r0, 80087b2 <__s2b+0x36>
 80087a0:	4602      	mov	r2, r0
 80087a2:	21ce      	movs	r1, #206	; 0xce
 80087a4:	4b18      	ldr	r3, [pc, #96]	; (8008808 <__s2b+0x8c>)
 80087a6:	4819      	ldr	r0, [pc, #100]	; (800880c <__s2b+0x90>)
 80087a8:	f001 f828 	bl	80097fc <__assert_func>
 80087ac:	0052      	lsls	r2, r2, #1
 80087ae:	3101      	adds	r1, #1
 80087b0:	e7f0      	b.n	8008794 <__s2b+0x18>
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	2d09      	cmp	r5, #9
 80087b6:	6143      	str	r3, [r0, #20]
 80087b8:	f04f 0301 	mov.w	r3, #1
 80087bc:	6103      	str	r3, [r0, #16]
 80087be:	dd16      	ble.n	80087ee <__s2b+0x72>
 80087c0:	f104 0909 	add.w	r9, r4, #9
 80087c4:	46c8      	mov	r8, r9
 80087c6:	442c      	add	r4, r5
 80087c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087cc:	4601      	mov	r1, r0
 80087ce:	220a      	movs	r2, #10
 80087d0:	4630      	mov	r0, r6
 80087d2:	3b30      	subs	r3, #48	; 0x30
 80087d4:	f7ff ff8c 	bl	80086f0 <__multadd>
 80087d8:	45a0      	cmp	r8, r4
 80087da:	d1f5      	bne.n	80087c8 <__s2b+0x4c>
 80087dc:	f1a5 0408 	sub.w	r4, r5, #8
 80087e0:	444c      	add	r4, r9
 80087e2:	1b2d      	subs	r5, r5, r4
 80087e4:	1963      	adds	r3, r4, r5
 80087e6:	42bb      	cmp	r3, r7
 80087e8:	db04      	blt.n	80087f4 <__s2b+0x78>
 80087ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ee:	2509      	movs	r5, #9
 80087f0:	340a      	adds	r4, #10
 80087f2:	e7f6      	b.n	80087e2 <__s2b+0x66>
 80087f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087f8:	4601      	mov	r1, r0
 80087fa:	220a      	movs	r2, #10
 80087fc:	4630      	mov	r0, r6
 80087fe:	3b30      	subs	r3, #48	; 0x30
 8008800:	f7ff ff76 	bl	80086f0 <__multadd>
 8008804:	e7ee      	b.n	80087e4 <__s2b+0x68>
 8008806:	bf00      	nop
 8008808:	08009ef8 	.word	0x08009ef8
 800880c:	08009fe8 	.word	0x08009fe8

08008810 <__hi0bits>:
 8008810:	0c02      	lsrs	r2, r0, #16
 8008812:	0412      	lsls	r2, r2, #16
 8008814:	4603      	mov	r3, r0
 8008816:	b9ca      	cbnz	r2, 800884c <__hi0bits+0x3c>
 8008818:	0403      	lsls	r3, r0, #16
 800881a:	2010      	movs	r0, #16
 800881c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008820:	bf04      	itt	eq
 8008822:	021b      	lsleq	r3, r3, #8
 8008824:	3008      	addeq	r0, #8
 8008826:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800882a:	bf04      	itt	eq
 800882c:	011b      	lsleq	r3, r3, #4
 800882e:	3004      	addeq	r0, #4
 8008830:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008834:	bf04      	itt	eq
 8008836:	009b      	lsleq	r3, r3, #2
 8008838:	3002      	addeq	r0, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	db05      	blt.n	800884a <__hi0bits+0x3a>
 800883e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008842:	f100 0001 	add.w	r0, r0, #1
 8008846:	bf08      	it	eq
 8008848:	2020      	moveq	r0, #32
 800884a:	4770      	bx	lr
 800884c:	2000      	movs	r0, #0
 800884e:	e7e5      	b.n	800881c <__hi0bits+0xc>

08008850 <__lo0bits>:
 8008850:	6803      	ldr	r3, [r0, #0]
 8008852:	4602      	mov	r2, r0
 8008854:	f013 0007 	ands.w	r0, r3, #7
 8008858:	d00b      	beq.n	8008872 <__lo0bits+0x22>
 800885a:	07d9      	lsls	r1, r3, #31
 800885c:	d421      	bmi.n	80088a2 <__lo0bits+0x52>
 800885e:	0798      	lsls	r0, r3, #30
 8008860:	bf49      	itett	mi
 8008862:	085b      	lsrmi	r3, r3, #1
 8008864:	089b      	lsrpl	r3, r3, #2
 8008866:	2001      	movmi	r0, #1
 8008868:	6013      	strmi	r3, [r2, #0]
 800886a:	bf5c      	itt	pl
 800886c:	2002      	movpl	r0, #2
 800886e:	6013      	strpl	r3, [r2, #0]
 8008870:	4770      	bx	lr
 8008872:	b299      	uxth	r1, r3
 8008874:	b909      	cbnz	r1, 800887a <__lo0bits+0x2a>
 8008876:	2010      	movs	r0, #16
 8008878:	0c1b      	lsrs	r3, r3, #16
 800887a:	b2d9      	uxtb	r1, r3
 800887c:	b909      	cbnz	r1, 8008882 <__lo0bits+0x32>
 800887e:	3008      	adds	r0, #8
 8008880:	0a1b      	lsrs	r3, r3, #8
 8008882:	0719      	lsls	r1, r3, #28
 8008884:	bf04      	itt	eq
 8008886:	091b      	lsreq	r3, r3, #4
 8008888:	3004      	addeq	r0, #4
 800888a:	0799      	lsls	r1, r3, #30
 800888c:	bf04      	itt	eq
 800888e:	089b      	lsreq	r3, r3, #2
 8008890:	3002      	addeq	r0, #2
 8008892:	07d9      	lsls	r1, r3, #31
 8008894:	d403      	bmi.n	800889e <__lo0bits+0x4e>
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	f100 0001 	add.w	r0, r0, #1
 800889c:	d003      	beq.n	80088a6 <__lo0bits+0x56>
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	4770      	bx	lr
 80088a2:	2000      	movs	r0, #0
 80088a4:	4770      	bx	lr
 80088a6:	2020      	movs	r0, #32
 80088a8:	4770      	bx	lr
	...

080088ac <__i2b>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	460c      	mov	r4, r1
 80088b0:	2101      	movs	r1, #1
 80088b2:	f7ff febb 	bl	800862c <_Balloc>
 80088b6:	4602      	mov	r2, r0
 80088b8:	b928      	cbnz	r0, 80088c6 <__i2b+0x1a>
 80088ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088be:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <__i2b+0x24>)
 80088c0:	4804      	ldr	r0, [pc, #16]	; (80088d4 <__i2b+0x28>)
 80088c2:	f000 ff9b 	bl	80097fc <__assert_func>
 80088c6:	2301      	movs	r3, #1
 80088c8:	6144      	str	r4, [r0, #20]
 80088ca:	6103      	str	r3, [r0, #16]
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	bf00      	nop
 80088d0:	08009ef8 	.word	0x08009ef8
 80088d4:	08009fe8 	.word	0x08009fe8

080088d8 <__multiply>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	4691      	mov	r9, r2
 80088de:	690a      	ldr	r2, [r1, #16]
 80088e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088e4:	460c      	mov	r4, r1
 80088e6:	429a      	cmp	r2, r3
 80088e8:	bfbe      	ittt	lt
 80088ea:	460b      	movlt	r3, r1
 80088ec:	464c      	movlt	r4, r9
 80088ee:	4699      	movlt	r9, r3
 80088f0:	6927      	ldr	r7, [r4, #16]
 80088f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	6861      	ldr	r1, [r4, #4]
 80088fa:	eb07 060a 	add.w	r6, r7, sl
 80088fe:	42b3      	cmp	r3, r6
 8008900:	b085      	sub	sp, #20
 8008902:	bfb8      	it	lt
 8008904:	3101      	addlt	r1, #1
 8008906:	f7ff fe91 	bl	800862c <_Balloc>
 800890a:	b930      	cbnz	r0, 800891a <__multiply+0x42>
 800890c:	4602      	mov	r2, r0
 800890e:	f240 115d 	movw	r1, #349	; 0x15d
 8008912:	4b43      	ldr	r3, [pc, #268]	; (8008a20 <__multiply+0x148>)
 8008914:	4843      	ldr	r0, [pc, #268]	; (8008a24 <__multiply+0x14c>)
 8008916:	f000 ff71 	bl	80097fc <__assert_func>
 800891a:	f100 0514 	add.w	r5, r0, #20
 800891e:	462b      	mov	r3, r5
 8008920:	2200      	movs	r2, #0
 8008922:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008926:	4543      	cmp	r3, r8
 8008928:	d321      	bcc.n	800896e <__multiply+0x96>
 800892a:	f104 0314 	add.w	r3, r4, #20
 800892e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008932:	f109 0314 	add.w	r3, r9, #20
 8008936:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800893a:	9202      	str	r2, [sp, #8]
 800893c:	1b3a      	subs	r2, r7, r4
 800893e:	3a15      	subs	r2, #21
 8008940:	f022 0203 	bic.w	r2, r2, #3
 8008944:	3204      	adds	r2, #4
 8008946:	f104 0115 	add.w	r1, r4, #21
 800894a:	428f      	cmp	r7, r1
 800894c:	bf38      	it	cc
 800894e:	2204      	movcc	r2, #4
 8008950:	9201      	str	r2, [sp, #4]
 8008952:	9a02      	ldr	r2, [sp, #8]
 8008954:	9303      	str	r3, [sp, #12]
 8008956:	429a      	cmp	r2, r3
 8008958:	d80c      	bhi.n	8008974 <__multiply+0x9c>
 800895a:	2e00      	cmp	r6, #0
 800895c:	dd03      	ble.n	8008966 <__multiply+0x8e>
 800895e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008962:	2b00      	cmp	r3, #0
 8008964:	d059      	beq.n	8008a1a <__multiply+0x142>
 8008966:	6106      	str	r6, [r0, #16]
 8008968:	b005      	add	sp, #20
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	f843 2b04 	str.w	r2, [r3], #4
 8008972:	e7d8      	b.n	8008926 <__multiply+0x4e>
 8008974:	f8b3 a000 	ldrh.w	sl, [r3]
 8008978:	f1ba 0f00 	cmp.w	sl, #0
 800897c:	d023      	beq.n	80089c6 <__multiply+0xee>
 800897e:	46a9      	mov	r9, r5
 8008980:	f04f 0c00 	mov.w	ip, #0
 8008984:	f104 0e14 	add.w	lr, r4, #20
 8008988:	f85e 2b04 	ldr.w	r2, [lr], #4
 800898c:	f8d9 1000 	ldr.w	r1, [r9]
 8008990:	fa1f fb82 	uxth.w	fp, r2
 8008994:	b289      	uxth	r1, r1
 8008996:	fb0a 110b 	mla	r1, sl, fp, r1
 800899a:	4461      	add	r1, ip
 800899c:	f8d9 c000 	ldr.w	ip, [r9]
 80089a0:	0c12      	lsrs	r2, r2, #16
 80089a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80089a6:	fb0a c202 	mla	r2, sl, r2, ip
 80089aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089ae:	b289      	uxth	r1, r1
 80089b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089b4:	4577      	cmp	r7, lr
 80089b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ba:	f849 1b04 	str.w	r1, [r9], #4
 80089be:	d8e3      	bhi.n	8008988 <__multiply+0xb0>
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	f845 c002 	str.w	ip, [r5, r2]
 80089c6:	9a03      	ldr	r2, [sp, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089ce:	f1b9 0f00 	cmp.w	r9, #0
 80089d2:	d020      	beq.n	8008a16 <__multiply+0x13e>
 80089d4:	46ae      	mov	lr, r5
 80089d6:	f04f 0a00 	mov.w	sl, #0
 80089da:	6829      	ldr	r1, [r5, #0]
 80089dc:	f104 0c14 	add.w	ip, r4, #20
 80089e0:	f8bc b000 	ldrh.w	fp, [ip]
 80089e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089e8:	b289      	uxth	r1, r1
 80089ea:	fb09 220b 	mla	r2, r9, fp, r2
 80089ee:	4492      	add	sl, r2
 80089f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089f4:	f84e 1b04 	str.w	r1, [lr], #4
 80089f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089fc:	f8be 1000 	ldrh.w	r1, [lr]
 8008a00:	0c12      	lsrs	r2, r2, #16
 8008a02:	fb09 1102 	mla	r1, r9, r2, r1
 8008a06:	4567      	cmp	r7, ip
 8008a08:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a10:	d8e6      	bhi.n	80089e0 <__multiply+0x108>
 8008a12:	9a01      	ldr	r2, [sp, #4]
 8008a14:	50a9      	str	r1, [r5, r2]
 8008a16:	3504      	adds	r5, #4
 8008a18:	e79b      	b.n	8008952 <__multiply+0x7a>
 8008a1a:	3e01      	subs	r6, #1
 8008a1c:	e79d      	b.n	800895a <__multiply+0x82>
 8008a1e:	bf00      	nop
 8008a20:	08009ef8 	.word	0x08009ef8
 8008a24:	08009fe8 	.word	0x08009fe8

08008a28 <__pow5mult>:
 8008a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a2c:	4615      	mov	r5, r2
 8008a2e:	f012 0203 	ands.w	r2, r2, #3
 8008a32:	4606      	mov	r6, r0
 8008a34:	460f      	mov	r7, r1
 8008a36:	d007      	beq.n	8008a48 <__pow5mult+0x20>
 8008a38:	4c25      	ldr	r4, [pc, #148]	; (8008ad0 <__pow5mult+0xa8>)
 8008a3a:	3a01      	subs	r2, #1
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a42:	f7ff fe55 	bl	80086f0 <__multadd>
 8008a46:	4607      	mov	r7, r0
 8008a48:	10ad      	asrs	r5, r5, #2
 8008a4a:	d03d      	beq.n	8008ac8 <__pow5mult+0xa0>
 8008a4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a4e:	b97c      	cbnz	r4, 8008a70 <__pow5mult+0x48>
 8008a50:	2010      	movs	r0, #16
 8008a52:	f7ff fdb5 	bl	80085c0 <malloc>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6270      	str	r0, [r6, #36]	; 0x24
 8008a5a:	b928      	cbnz	r0, 8008a68 <__pow5mult+0x40>
 8008a5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a60:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <__pow5mult+0xac>)
 8008a62:	481d      	ldr	r0, [pc, #116]	; (8008ad8 <__pow5mult+0xb0>)
 8008a64:	f000 feca 	bl	80097fc <__assert_func>
 8008a68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a6c:	6004      	str	r4, [r0, #0]
 8008a6e:	60c4      	str	r4, [r0, #12]
 8008a70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a78:	b94c      	cbnz	r4, 8008a8e <__pow5mult+0x66>
 8008a7a:	f240 2171 	movw	r1, #625	; 0x271
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff ff14 	bl	80088ac <__i2b>
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a8c:	6003      	str	r3, [r0, #0]
 8008a8e:	f04f 0900 	mov.w	r9, #0
 8008a92:	07eb      	lsls	r3, r5, #31
 8008a94:	d50a      	bpl.n	8008aac <__pow5mult+0x84>
 8008a96:	4639      	mov	r1, r7
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff ff1c 	bl	80088d8 <__multiply>
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7ff fe01 	bl	80086ac <_Bfree>
 8008aaa:	4647      	mov	r7, r8
 8008aac:	106d      	asrs	r5, r5, #1
 8008aae:	d00b      	beq.n	8008ac8 <__pow5mult+0xa0>
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	b938      	cbnz	r0, 8008ac4 <__pow5mult+0x9c>
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff ff0d 	bl	80088d8 <__multiply>
 8008abe:	6020      	str	r0, [r4, #0]
 8008ac0:	f8c0 9000 	str.w	r9, [r0]
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	e7e4      	b.n	8008a92 <__pow5mult+0x6a>
 8008ac8:	4638      	mov	r0, r7
 8008aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ace:	bf00      	nop
 8008ad0:	0800a138 	.word	0x0800a138
 8008ad4:	08009e86 	.word	0x08009e86
 8008ad8:	08009fe8 	.word	0x08009fe8

08008adc <__lshift>:
 8008adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	4691      	mov	r9, r2
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	6849      	ldr	r1, [r1, #4]
 8008aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aee:	68a3      	ldr	r3, [r4, #8]
 8008af0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008af4:	f108 0601 	add.w	r6, r8, #1
 8008af8:	42b3      	cmp	r3, r6
 8008afa:	db0b      	blt.n	8008b14 <__lshift+0x38>
 8008afc:	4638      	mov	r0, r7
 8008afe:	f7ff fd95 	bl	800862c <_Balloc>
 8008b02:	4605      	mov	r5, r0
 8008b04:	b948      	cbnz	r0, 8008b1a <__lshift+0x3e>
 8008b06:	4602      	mov	r2, r0
 8008b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b0c:	4b29      	ldr	r3, [pc, #164]	; (8008bb4 <__lshift+0xd8>)
 8008b0e:	482a      	ldr	r0, [pc, #168]	; (8008bb8 <__lshift+0xdc>)
 8008b10:	f000 fe74 	bl	80097fc <__assert_func>
 8008b14:	3101      	adds	r1, #1
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	e7ee      	b.n	8008af8 <__lshift+0x1c>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f100 0114 	add.w	r1, r0, #20
 8008b20:	f100 0210 	add.w	r2, r0, #16
 8008b24:	4618      	mov	r0, r3
 8008b26:	4553      	cmp	r3, sl
 8008b28:	db37      	blt.n	8008b9a <__lshift+0xbe>
 8008b2a:	6920      	ldr	r0, [r4, #16]
 8008b2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b30:	f104 0314 	add.w	r3, r4, #20
 8008b34:	f019 091f 	ands.w	r9, r9, #31
 8008b38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b40:	d02f      	beq.n	8008ba2 <__lshift+0xc6>
 8008b42:	468a      	mov	sl, r1
 8008b44:	f04f 0c00 	mov.w	ip, #0
 8008b48:	f1c9 0e20 	rsb	lr, r9, #32
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b52:	ea42 020c 	orr.w	r2, r2, ip
 8008b56:	f84a 2b04 	str.w	r2, [sl], #4
 8008b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5e:	4298      	cmp	r0, r3
 8008b60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b64:	d8f2      	bhi.n	8008b4c <__lshift+0x70>
 8008b66:	1b03      	subs	r3, r0, r4
 8008b68:	3b15      	subs	r3, #21
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	3304      	adds	r3, #4
 8008b70:	f104 0215 	add.w	r2, r4, #21
 8008b74:	4290      	cmp	r0, r2
 8008b76:	bf38      	it	cc
 8008b78:	2304      	movcc	r3, #4
 8008b7a:	f841 c003 	str.w	ip, [r1, r3]
 8008b7e:	f1bc 0f00 	cmp.w	ip, #0
 8008b82:	d001      	beq.n	8008b88 <__lshift+0xac>
 8008b84:	f108 0602 	add.w	r6, r8, #2
 8008b88:	3e01      	subs	r6, #1
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	612e      	str	r6, [r5, #16]
 8008b90:	f7ff fd8c 	bl	80086ac <_Bfree>
 8008b94:	4628      	mov	r0, r5
 8008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	e7c1      	b.n	8008b26 <__lshift+0x4a>
 8008ba2:	3904      	subs	r1, #4
 8008ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba8:	4298      	cmp	r0, r3
 8008baa:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bae:	d8f9      	bhi.n	8008ba4 <__lshift+0xc8>
 8008bb0:	e7ea      	b.n	8008b88 <__lshift+0xac>
 8008bb2:	bf00      	nop
 8008bb4:	08009ef8 	.word	0x08009ef8
 8008bb8:	08009fe8 	.word	0x08009fe8

08008bbc <__mcmp>:
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	690a      	ldr	r2, [r1, #16]
 8008bc0:	6900      	ldr	r0, [r0, #16]
 8008bc2:	b530      	push	{r4, r5, lr}
 8008bc4:	1a80      	subs	r0, r0, r2
 8008bc6:	d10d      	bne.n	8008be4 <__mcmp+0x28>
 8008bc8:	3314      	adds	r3, #20
 8008bca:	3114      	adds	r1, #20
 8008bcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bdc:	4295      	cmp	r5, r2
 8008bde:	d002      	beq.n	8008be6 <__mcmp+0x2a>
 8008be0:	d304      	bcc.n	8008bec <__mcmp+0x30>
 8008be2:	2001      	movs	r0, #1
 8008be4:	bd30      	pop	{r4, r5, pc}
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	d3f4      	bcc.n	8008bd4 <__mcmp+0x18>
 8008bea:	e7fb      	b.n	8008be4 <__mcmp+0x28>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	e7f8      	b.n	8008be4 <__mcmp+0x28>
	...

08008bf4 <__mdiff>:
 8008bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4628      	mov	r0, r5
 8008c00:	4614      	mov	r4, r2
 8008c02:	f7ff ffdb 	bl	8008bbc <__mcmp>
 8008c06:	1e06      	subs	r6, r0, #0
 8008c08:	d111      	bne.n	8008c2e <__mdiff+0x3a>
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	f7ff fd0d 	bl	800862c <_Balloc>
 8008c12:	4602      	mov	r2, r0
 8008c14:	b928      	cbnz	r0, 8008c22 <__mdiff+0x2e>
 8008c16:	f240 2132 	movw	r1, #562	; 0x232
 8008c1a:	4b3a      	ldr	r3, [pc, #232]	; (8008d04 <__mdiff+0x110>)
 8008c1c:	483a      	ldr	r0, [pc, #232]	; (8008d08 <__mdiff+0x114>)
 8008c1e:	f000 fded 	bl	80097fc <__assert_func>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c28:	4610      	mov	r0, r2
 8008c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	bfa4      	itt	ge
 8008c30:	4623      	movge	r3, r4
 8008c32:	462c      	movge	r4, r5
 8008c34:	4638      	mov	r0, r7
 8008c36:	6861      	ldr	r1, [r4, #4]
 8008c38:	bfa6      	itte	ge
 8008c3a:	461d      	movge	r5, r3
 8008c3c:	2600      	movge	r6, #0
 8008c3e:	2601      	movlt	r6, #1
 8008c40:	f7ff fcf4 	bl	800862c <_Balloc>
 8008c44:	4602      	mov	r2, r0
 8008c46:	b918      	cbnz	r0, 8008c50 <__mdiff+0x5c>
 8008c48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c4c:	4b2d      	ldr	r3, [pc, #180]	; (8008d04 <__mdiff+0x110>)
 8008c4e:	e7e5      	b.n	8008c1c <__mdiff+0x28>
 8008c50:	f102 0814 	add.w	r8, r2, #20
 8008c54:	46c2      	mov	sl, r8
 8008c56:	f04f 0c00 	mov.w	ip, #0
 8008c5a:	6927      	ldr	r7, [r4, #16]
 8008c5c:	60c6      	str	r6, [r0, #12]
 8008c5e:	692e      	ldr	r6, [r5, #16]
 8008c60:	f104 0014 	add.w	r0, r4, #20
 8008c64:	f105 0914 	add.w	r9, r5, #20
 8008c68:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008c6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c70:	3410      	adds	r4, #16
 8008c72:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008c76:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c7a:	fa1f f18b 	uxth.w	r1, fp
 8008c7e:	448c      	add	ip, r1
 8008c80:	b299      	uxth	r1, r3
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	ebac 0101 	sub.w	r1, ip, r1
 8008c88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c8c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c90:	b289      	uxth	r1, r1
 8008c92:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008c96:	454e      	cmp	r6, r9
 8008c98:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c9c:	f84a 3b04 	str.w	r3, [sl], #4
 8008ca0:	d8e7      	bhi.n	8008c72 <__mdiff+0x7e>
 8008ca2:	1b73      	subs	r3, r6, r5
 8008ca4:	3b15      	subs	r3, #21
 8008ca6:	f023 0303 	bic.w	r3, r3, #3
 8008caa:	3515      	adds	r5, #21
 8008cac:	3304      	adds	r3, #4
 8008cae:	42ae      	cmp	r6, r5
 8008cb0:	bf38      	it	cc
 8008cb2:	2304      	movcc	r3, #4
 8008cb4:	4418      	add	r0, r3
 8008cb6:	4443      	add	r3, r8
 8008cb8:	461e      	mov	r6, r3
 8008cba:	4605      	mov	r5, r0
 8008cbc:	4575      	cmp	r5, lr
 8008cbe:	d30e      	bcc.n	8008cde <__mdiff+0xea>
 8008cc0:	f10e 0103 	add.w	r1, lr, #3
 8008cc4:	1a09      	subs	r1, r1, r0
 8008cc6:	f021 0103 	bic.w	r1, r1, #3
 8008cca:	3803      	subs	r0, #3
 8008ccc:	4586      	cmp	lr, r0
 8008cce:	bf38      	it	cc
 8008cd0:	2100      	movcc	r1, #0
 8008cd2:	4419      	add	r1, r3
 8008cd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008cd8:	b18b      	cbz	r3, 8008cfe <__mdiff+0x10a>
 8008cda:	6117      	str	r7, [r2, #16]
 8008cdc:	e7a4      	b.n	8008c28 <__mdiff+0x34>
 8008cde:	f855 8b04 	ldr.w	r8, [r5], #4
 8008ce2:	fa1f f188 	uxth.w	r1, r8
 8008ce6:	4461      	add	r1, ip
 8008ce8:	140c      	asrs	r4, r1, #16
 8008cea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cee:	b289      	uxth	r1, r1
 8008cf0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cf4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008cf8:	f846 1b04 	str.w	r1, [r6], #4
 8008cfc:	e7de      	b.n	8008cbc <__mdiff+0xc8>
 8008cfe:	3f01      	subs	r7, #1
 8008d00:	e7e8      	b.n	8008cd4 <__mdiff+0xe0>
 8008d02:	bf00      	nop
 8008d04:	08009ef8 	.word	0x08009ef8
 8008d08:	08009fe8 	.word	0x08009fe8

08008d0c <__ulp>:
 8008d0c:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <__ulp+0x48>)
 8008d0e:	400b      	ands	r3, r1
 8008d10:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd02      	ble.n	8008d1e <__ulp+0x12>
 8008d18:	2000      	movs	r0, #0
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4770      	bx	lr
 8008d1e:	425b      	negs	r3, r3
 8008d20:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008d24:	f04f 0000 	mov.w	r0, #0
 8008d28:	f04f 0100 	mov.w	r1, #0
 8008d2c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d30:	da04      	bge.n	8008d3c <__ulp+0x30>
 8008d32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d36:	fa43 f102 	asr.w	r1, r3, r2
 8008d3a:	4770      	bx	lr
 8008d3c:	f1a2 0314 	sub.w	r3, r2, #20
 8008d40:	2b1e      	cmp	r3, #30
 8008d42:	bfd6      	itet	le
 8008d44:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008d48:	2301      	movgt	r3, #1
 8008d4a:	fa22 f303 	lsrle.w	r3, r2, r3
 8008d4e:	4618      	mov	r0, r3
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	7ff00000 	.word	0x7ff00000

08008d58 <__b2d>:
 8008d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d5c:	6907      	ldr	r7, [r0, #16]
 8008d5e:	f100 0914 	add.w	r9, r0, #20
 8008d62:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008d66:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008d6a:	f1a7 0804 	sub.w	r8, r7, #4
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff fd4e 	bl	8008810 <__hi0bits>
 8008d74:	f1c0 0320 	rsb	r3, r0, #32
 8008d78:	280a      	cmp	r0, #10
 8008d7a:	600b      	str	r3, [r1, #0]
 8008d7c:	491f      	ldr	r1, [pc, #124]	; (8008dfc <__b2d+0xa4>)
 8008d7e:	dc17      	bgt.n	8008db0 <__b2d+0x58>
 8008d80:	45c1      	cmp	r9, r8
 8008d82:	bf28      	it	cs
 8008d84:	2200      	movcs	r2, #0
 8008d86:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d8a:	fa26 f30c 	lsr.w	r3, r6, ip
 8008d8e:	bf38      	it	cc
 8008d90:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d94:	ea43 0501 	orr.w	r5, r3, r1
 8008d98:	f100 0315 	add.w	r3, r0, #21
 8008d9c:	fa06 f303 	lsl.w	r3, r6, r3
 8008da0:	fa22 f20c 	lsr.w	r2, r2, ip
 8008da4:	ea43 0402 	orr.w	r4, r3, r2
 8008da8:	4620      	mov	r0, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db0:	45c1      	cmp	r9, r8
 8008db2:	bf2e      	itee	cs
 8008db4:	2200      	movcs	r2, #0
 8008db6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008dba:	f1a7 0808 	subcc.w	r8, r7, #8
 8008dbe:	f1b0 030b 	subs.w	r3, r0, #11
 8008dc2:	d016      	beq.n	8008df2 <__b2d+0x9a>
 8008dc4:	f1c3 0720 	rsb	r7, r3, #32
 8008dc8:	fa22 f107 	lsr.w	r1, r2, r7
 8008dcc:	45c8      	cmp	r8, r9
 8008dce:	fa06 f603 	lsl.w	r6, r6, r3
 8008dd2:	ea46 0601 	orr.w	r6, r6, r1
 8008dd6:	bf94      	ite	ls
 8008dd8:	2100      	movls	r1, #0
 8008dda:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008dde:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008de2:	fa02 f003 	lsl.w	r0, r2, r3
 8008de6:	40f9      	lsrs	r1, r7
 8008de8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008dec:	ea40 0401 	orr.w	r4, r0, r1
 8008df0:	e7da      	b.n	8008da8 <__b2d+0x50>
 8008df2:	4614      	mov	r4, r2
 8008df4:	ea46 0501 	orr.w	r5, r6, r1
 8008df8:	e7d6      	b.n	8008da8 <__b2d+0x50>
 8008dfa:	bf00      	nop
 8008dfc:	3ff00000 	.word	0x3ff00000

08008e00 <__d2b>:
 8008e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e04:	2101      	movs	r1, #1
 8008e06:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008e0a:	4690      	mov	r8, r2
 8008e0c:	461d      	mov	r5, r3
 8008e0e:	f7ff fc0d 	bl	800862c <_Balloc>
 8008e12:	4604      	mov	r4, r0
 8008e14:	b930      	cbnz	r0, 8008e24 <__d2b+0x24>
 8008e16:	4602      	mov	r2, r0
 8008e18:	f240 310a 	movw	r1, #778	; 0x30a
 8008e1c:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <__d2b+0xb0>)
 8008e1e:	4825      	ldr	r0, [pc, #148]	; (8008eb4 <__d2b+0xb4>)
 8008e20:	f000 fcec 	bl	80097fc <__assert_func>
 8008e24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008e28:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008e2c:	bb2d      	cbnz	r5, 8008e7a <__d2b+0x7a>
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	f1b8 0300 	subs.w	r3, r8, #0
 8008e34:	d026      	beq.n	8008e84 <__d2b+0x84>
 8008e36:	4668      	mov	r0, sp
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	f7ff fd09 	bl	8008850 <__lo0bits>
 8008e3e:	9900      	ldr	r1, [sp, #0]
 8008e40:	b1f0      	cbz	r0, 8008e80 <__d2b+0x80>
 8008e42:	9a01      	ldr	r2, [sp, #4]
 8008e44:	f1c0 0320 	rsb	r3, r0, #32
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	40c2      	lsrs	r2, r0
 8008e50:	6163      	str	r3, [r4, #20]
 8008e52:	9201      	str	r2, [sp, #4]
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bf14      	ite	ne
 8008e5a:	2102      	movne	r1, #2
 8008e5c:	2101      	moveq	r1, #1
 8008e5e:	61a3      	str	r3, [r4, #24]
 8008e60:	6121      	str	r1, [r4, #16]
 8008e62:	b1c5      	cbz	r5, 8008e96 <__d2b+0x96>
 8008e64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e68:	4405      	add	r5, r0
 8008e6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e6e:	603d      	str	r5, [r7, #0]
 8008e70:	6030      	str	r0, [r6, #0]
 8008e72:	4620      	mov	r0, r4
 8008e74:	b002      	add	sp, #8
 8008e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e7e:	e7d6      	b.n	8008e2e <__d2b+0x2e>
 8008e80:	6161      	str	r1, [r4, #20]
 8008e82:	e7e7      	b.n	8008e54 <__d2b+0x54>
 8008e84:	a801      	add	r0, sp, #4
 8008e86:	f7ff fce3 	bl	8008850 <__lo0bits>
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	6121      	str	r1, [r4, #16]
 8008e90:	6163      	str	r3, [r4, #20]
 8008e92:	3020      	adds	r0, #32
 8008e94:	e7e5      	b.n	8008e62 <__d2b+0x62>
 8008e96:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008e9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e9e:	6038      	str	r0, [r7, #0]
 8008ea0:	6918      	ldr	r0, [r3, #16]
 8008ea2:	f7ff fcb5 	bl	8008810 <__hi0bits>
 8008ea6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008eaa:	6031      	str	r1, [r6, #0]
 8008eac:	e7e1      	b.n	8008e72 <__d2b+0x72>
 8008eae:	bf00      	nop
 8008eb0:	08009ef8 	.word	0x08009ef8
 8008eb4:	08009fe8 	.word	0x08009fe8

08008eb8 <__ratio>:
 8008eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebc:	4688      	mov	r8, r1
 8008ebe:	4669      	mov	r1, sp
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	f7ff ff49 	bl	8008d58 <__b2d>
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	4604      	mov	r4, r0
 8008eca:	460d      	mov	r5, r1
 8008ecc:	4640      	mov	r0, r8
 8008ece:	a901      	add	r1, sp, #4
 8008ed0:	f7ff ff42 	bl	8008d58 <__b2d>
 8008ed4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ed8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008edc:	468b      	mov	fp, r1
 8008ede:	eba3 0c02 	sub.w	ip, r3, r2
 8008ee2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bfd5      	itete	le
 8008ef0:	460a      	movle	r2, r1
 8008ef2:	462a      	movgt	r2, r5
 8008ef4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ef8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008efc:	bfd8      	it	le
 8008efe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f02:	465b      	mov	r3, fp
 8008f04:	4602      	mov	r2, r0
 8008f06:	4639      	mov	r1, r7
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7f7 fc19 	bl	8000740 <__aeabi_ddiv>
 8008f0e:	b003      	add	sp, #12
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f14 <__copybits>:
 8008f14:	3901      	subs	r1, #1
 8008f16:	b570      	push	{r4, r5, r6, lr}
 8008f18:	1149      	asrs	r1, r1, #5
 8008f1a:	6914      	ldr	r4, [r2, #16]
 8008f1c:	3101      	adds	r1, #1
 8008f1e:	f102 0314 	add.w	r3, r2, #20
 8008f22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f2a:	1f05      	subs	r5, r0, #4
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	d30c      	bcc.n	8008f4a <__copybits+0x36>
 8008f30:	1aa3      	subs	r3, r4, r2
 8008f32:	3b11      	subs	r3, #17
 8008f34:	f023 0303 	bic.w	r3, r3, #3
 8008f38:	3211      	adds	r2, #17
 8008f3a:	42a2      	cmp	r2, r4
 8008f3c:	bf88      	it	hi
 8008f3e:	2300      	movhi	r3, #0
 8008f40:	4418      	add	r0, r3
 8008f42:	2300      	movs	r3, #0
 8008f44:	4288      	cmp	r0, r1
 8008f46:	d305      	bcc.n	8008f54 <__copybits+0x40>
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
 8008f4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f52:	e7eb      	b.n	8008f2c <__copybits+0x18>
 8008f54:	f840 3b04 	str.w	r3, [r0], #4
 8008f58:	e7f4      	b.n	8008f44 <__copybits+0x30>

08008f5a <__any_on>:
 8008f5a:	f100 0214 	add.w	r2, r0, #20
 8008f5e:	6900      	ldr	r0, [r0, #16]
 8008f60:	114b      	asrs	r3, r1, #5
 8008f62:	4298      	cmp	r0, r3
 8008f64:	b510      	push	{r4, lr}
 8008f66:	db11      	blt.n	8008f8c <__any_on+0x32>
 8008f68:	dd0a      	ble.n	8008f80 <__any_on+0x26>
 8008f6a:	f011 011f 	ands.w	r1, r1, #31
 8008f6e:	d007      	beq.n	8008f80 <__any_on+0x26>
 8008f70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f74:	fa24 f001 	lsr.w	r0, r4, r1
 8008f78:	fa00 f101 	lsl.w	r1, r0, r1
 8008f7c:	428c      	cmp	r4, r1
 8008f7e:	d10b      	bne.n	8008f98 <__any_on+0x3e>
 8008f80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d803      	bhi.n	8008f90 <__any_on+0x36>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	bd10      	pop	{r4, pc}
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	e7f7      	b.n	8008f80 <__any_on+0x26>
 8008f90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d0f5      	beq.n	8008f84 <__any_on+0x2a>
 8008f98:	2001      	movs	r0, #1
 8008f9a:	e7f6      	b.n	8008f8a <__any_on+0x30>

08008f9c <_calloc_r>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	fba1 5402 	umull	r5, r4, r1, r2
 8008fa2:	b934      	cbnz	r4, 8008fb2 <_calloc_r+0x16>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	f000 f875 	bl	8009094 <_malloc_r>
 8008faa:	4606      	mov	r6, r0
 8008fac:	b928      	cbnz	r0, 8008fba <_calloc_r+0x1e>
 8008fae:	4630      	mov	r0, r6
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	220c      	movs	r2, #12
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	6002      	str	r2, [r0, #0]
 8008fb8:	e7f9      	b.n	8008fae <_calloc_r+0x12>
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	f7fc f86b 	bl	8005098 <memset>
 8008fc2:	e7f4      	b.n	8008fae <_calloc_r+0x12>

08008fc4 <_free_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d040      	beq.n	800904e <_free_r+0x8a>
 8008fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fd0:	1f0c      	subs	r4, r1, #4
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	bfb8      	it	lt
 8008fd6:	18e4      	addlt	r4, r4, r3
 8008fd8:	f000 fc9e 	bl	8009918 <__malloc_lock>
 8008fdc:	4a1c      	ldr	r2, [pc, #112]	; (8009050 <_free_r+0x8c>)
 8008fde:	6813      	ldr	r3, [r2, #0]
 8008fe0:	b933      	cbnz	r3, 8008ff0 <_free_r+0x2c>
 8008fe2:	6063      	str	r3, [r4, #4]
 8008fe4:	6014      	str	r4, [r2, #0]
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fec:	f000 bc9a 	b.w	8009924 <__malloc_unlock>
 8008ff0:	42a3      	cmp	r3, r4
 8008ff2:	d908      	bls.n	8009006 <_free_r+0x42>
 8008ff4:	6820      	ldr	r0, [r4, #0]
 8008ff6:	1821      	adds	r1, r4, r0
 8008ff8:	428b      	cmp	r3, r1
 8008ffa:	bf01      	itttt	eq
 8008ffc:	6819      	ldreq	r1, [r3, #0]
 8008ffe:	685b      	ldreq	r3, [r3, #4]
 8009000:	1809      	addeq	r1, r1, r0
 8009002:	6021      	streq	r1, [r4, #0]
 8009004:	e7ed      	b.n	8008fe2 <_free_r+0x1e>
 8009006:	461a      	mov	r2, r3
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	b10b      	cbz	r3, 8009010 <_free_r+0x4c>
 800900c:	42a3      	cmp	r3, r4
 800900e:	d9fa      	bls.n	8009006 <_free_r+0x42>
 8009010:	6811      	ldr	r1, [r2, #0]
 8009012:	1850      	adds	r0, r2, r1
 8009014:	42a0      	cmp	r0, r4
 8009016:	d10b      	bne.n	8009030 <_free_r+0x6c>
 8009018:	6820      	ldr	r0, [r4, #0]
 800901a:	4401      	add	r1, r0
 800901c:	1850      	adds	r0, r2, r1
 800901e:	4283      	cmp	r3, r0
 8009020:	6011      	str	r1, [r2, #0]
 8009022:	d1e0      	bne.n	8008fe6 <_free_r+0x22>
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	4401      	add	r1, r0
 800902a:	6011      	str	r1, [r2, #0]
 800902c:	6053      	str	r3, [r2, #4]
 800902e:	e7da      	b.n	8008fe6 <_free_r+0x22>
 8009030:	d902      	bls.n	8009038 <_free_r+0x74>
 8009032:	230c      	movs	r3, #12
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	e7d6      	b.n	8008fe6 <_free_r+0x22>
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	1821      	adds	r1, r4, r0
 800903c:	428b      	cmp	r3, r1
 800903e:	bf01      	itttt	eq
 8009040:	6819      	ldreq	r1, [r3, #0]
 8009042:	685b      	ldreq	r3, [r3, #4]
 8009044:	1809      	addeq	r1, r1, r0
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	6054      	str	r4, [r2, #4]
 800904c:	e7cb      	b.n	8008fe6 <_free_r+0x22>
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	200003bc 	.word	0x200003bc

08009054 <sbrk_aligned>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4e0e      	ldr	r6, [pc, #56]	; (8009090 <sbrk_aligned+0x3c>)
 8009058:	460c      	mov	r4, r1
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	4605      	mov	r5, r0
 800905e:	b911      	cbnz	r1, 8009066 <sbrk_aligned+0x12>
 8009060:	f000 fb46 	bl	80096f0 <_sbrk_r>
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 fb41 	bl	80096f0 <_sbrk_r>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d00a      	beq.n	8009088 <sbrk_aligned+0x34>
 8009072:	1cc4      	adds	r4, r0, #3
 8009074:	f024 0403 	bic.w	r4, r4, #3
 8009078:	42a0      	cmp	r0, r4
 800907a:	d007      	beq.n	800908c <sbrk_aligned+0x38>
 800907c:	1a21      	subs	r1, r4, r0
 800907e:	4628      	mov	r0, r5
 8009080:	f000 fb36 	bl	80096f0 <_sbrk_r>
 8009084:	3001      	adds	r0, #1
 8009086:	d101      	bne.n	800908c <sbrk_aligned+0x38>
 8009088:	f04f 34ff 	mov.w	r4, #4294967295
 800908c:	4620      	mov	r0, r4
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	200003c0 	.word	0x200003c0

08009094 <_malloc_r>:
 8009094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	1ccd      	adds	r5, r1, #3
 800909a:	f025 0503 	bic.w	r5, r5, #3
 800909e:	3508      	adds	r5, #8
 80090a0:	2d0c      	cmp	r5, #12
 80090a2:	bf38      	it	cc
 80090a4:	250c      	movcc	r5, #12
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	4607      	mov	r7, r0
 80090aa:	db01      	blt.n	80090b0 <_malloc_r+0x1c>
 80090ac:	42a9      	cmp	r1, r5
 80090ae:	d905      	bls.n	80090bc <_malloc_r+0x28>
 80090b0:	230c      	movs	r3, #12
 80090b2:	2600      	movs	r6, #0
 80090b4:	603b      	str	r3, [r7, #0]
 80090b6:	4630      	mov	r0, r6
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090bc:	4e2e      	ldr	r6, [pc, #184]	; (8009178 <_malloc_r+0xe4>)
 80090be:	f000 fc2b 	bl	8009918 <__malloc_lock>
 80090c2:	6833      	ldr	r3, [r6, #0]
 80090c4:	461c      	mov	r4, r3
 80090c6:	bb34      	cbnz	r4, 8009116 <_malloc_r+0x82>
 80090c8:	4629      	mov	r1, r5
 80090ca:	4638      	mov	r0, r7
 80090cc:	f7ff ffc2 	bl	8009054 <sbrk_aligned>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	4604      	mov	r4, r0
 80090d4:	d14d      	bne.n	8009172 <_malloc_r+0xde>
 80090d6:	6834      	ldr	r4, [r6, #0]
 80090d8:	4626      	mov	r6, r4
 80090da:	2e00      	cmp	r6, #0
 80090dc:	d140      	bne.n	8009160 <_malloc_r+0xcc>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	4631      	mov	r1, r6
 80090e2:	4638      	mov	r0, r7
 80090e4:	eb04 0803 	add.w	r8, r4, r3
 80090e8:	f000 fb02 	bl	80096f0 <_sbrk_r>
 80090ec:	4580      	cmp	r8, r0
 80090ee:	d13a      	bne.n	8009166 <_malloc_r+0xd2>
 80090f0:	6821      	ldr	r1, [r4, #0]
 80090f2:	3503      	adds	r5, #3
 80090f4:	1a6d      	subs	r5, r5, r1
 80090f6:	f025 0503 	bic.w	r5, r5, #3
 80090fa:	3508      	adds	r5, #8
 80090fc:	2d0c      	cmp	r5, #12
 80090fe:	bf38      	it	cc
 8009100:	250c      	movcc	r5, #12
 8009102:	4638      	mov	r0, r7
 8009104:	4629      	mov	r1, r5
 8009106:	f7ff ffa5 	bl	8009054 <sbrk_aligned>
 800910a:	3001      	adds	r0, #1
 800910c:	d02b      	beq.n	8009166 <_malloc_r+0xd2>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	442b      	add	r3, r5
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	e00e      	b.n	8009134 <_malloc_r+0xa0>
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	1b52      	subs	r2, r2, r5
 800911a:	d41e      	bmi.n	800915a <_malloc_r+0xc6>
 800911c:	2a0b      	cmp	r2, #11
 800911e:	d916      	bls.n	800914e <_malloc_r+0xba>
 8009120:	1961      	adds	r1, r4, r5
 8009122:	42a3      	cmp	r3, r4
 8009124:	6025      	str	r5, [r4, #0]
 8009126:	bf18      	it	ne
 8009128:	6059      	strne	r1, [r3, #4]
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	bf08      	it	eq
 800912e:	6031      	streq	r1, [r6, #0]
 8009130:	5162      	str	r2, [r4, r5]
 8009132:	604b      	str	r3, [r1, #4]
 8009134:	4638      	mov	r0, r7
 8009136:	f104 060b 	add.w	r6, r4, #11
 800913a:	f000 fbf3 	bl	8009924 <__malloc_unlock>
 800913e:	f026 0607 	bic.w	r6, r6, #7
 8009142:	1d23      	adds	r3, r4, #4
 8009144:	1af2      	subs	r2, r6, r3
 8009146:	d0b6      	beq.n	80090b6 <_malloc_r+0x22>
 8009148:	1b9b      	subs	r3, r3, r6
 800914a:	50a3      	str	r3, [r4, r2]
 800914c:	e7b3      	b.n	80090b6 <_malloc_r+0x22>
 800914e:	6862      	ldr	r2, [r4, #4]
 8009150:	42a3      	cmp	r3, r4
 8009152:	bf0c      	ite	eq
 8009154:	6032      	streq	r2, [r6, #0]
 8009156:	605a      	strne	r2, [r3, #4]
 8009158:	e7ec      	b.n	8009134 <_malloc_r+0xa0>
 800915a:	4623      	mov	r3, r4
 800915c:	6864      	ldr	r4, [r4, #4]
 800915e:	e7b2      	b.n	80090c6 <_malloc_r+0x32>
 8009160:	4634      	mov	r4, r6
 8009162:	6876      	ldr	r6, [r6, #4]
 8009164:	e7b9      	b.n	80090da <_malloc_r+0x46>
 8009166:	230c      	movs	r3, #12
 8009168:	4638      	mov	r0, r7
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	f000 fbda 	bl	8009924 <__malloc_unlock>
 8009170:	e7a1      	b.n	80090b6 <_malloc_r+0x22>
 8009172:	6025      	str	r5, [r4, #0]
 8009174:	e7de      	b.n	8009134 <_malloc_r+0xa0>
 8009176:	bf00      	nop
 8009178:	200003bc 	.word	0x200003bc

0800917c <__ssputs_r>:
 800917c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009180:	688e      	ldr	r6, [r1, #8]
 8009182:	4682      	mov	sl, r0
 8009184:	429e      	cmp	r6, r3
 8009186:	460c      	mov	r4, r1
 8009188:	4690      	mov	r8, r2
 800918a:	461f      	mov	r7, r3
 800918c:	d838      	bhi.n	8009200 <__ssputs_r+0x84>
 800918e:	898a      	ldrh	r2, [r1, #12]
 8009190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009194:	d032      	beq.n	80091fc <__ssputs_r+0x80>
 8009196:	6825      	ldr	r5, [r4, #0]
 8009198:	6909      	ldr	r1, [r1, #16]
 800919a:	3301      	adds	r3, #1
 800919c:	eba5 0901 	sub.w	r9, r5, r1
 80091a0:	6965      	ldr	r5, [r4, #20]
 80091a2:	444b      	add	r3, r9
 80091a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091ac:	106d      	asrs	r5, r5, #1
 80091ae:	429d      	cmp	r5, r3
 80091b0:	bf38      	it	cc
 80091b2:	461d      	movcc	r5, r3
 80091b4:	0553      	lsls	r3, r2, #21
 80091b6:	d531      	bpl.n	800921c <__ssputs_r+0xa0>
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7ff ff6b 	bl	8009094 <_malloc_r>
 80091be:	4606      	mov	r6, r0
 80091c0:	b950      	cbnz	r0, 80091d8 <__ssputs_r+0x5c>
 80091c2:	230c      	movs	r3, #12
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	f8ca 3000 	str.w	r3, [sl]
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d8:	464a      	mov	r2, r9
 80091da:	6921      	ldr	r1, [r4, #16]
 80091dc:	f7ff fa18 	bl	8008610 <memcpy>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	6126      	str	r6, [r4, #16]
 80091ee:	444e      	add	r6, r9
 80091f0:	6026      	str	r6, [r4, #0]
 80091f2:	463e      	mov	r6, r7
 80091f4:	6165      	str	r5, [r4, #20]
 80091f6:	eba5 0509 	sub.w	r5, r5, r9
 80091fa:	60a5      	str	r5, [r4, #8]
 80091fc:	42be      	cmp	r6, r7
 80091fe:	d900      	bls.n	8009202 <__ssputs_r+0x86>
 8009200:	463e      	mov	r6, r7
 8009202:	4632      	mov	r2, r6
 8009204:	4641      	mov	r1, r8
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	f000 fb6c 	bl	80098e4 <memmove>
 800920c:	68a3      	ldr	r3, [r4, #8]
 800920e:	2000      	movs	r0, #0
 8009210:	1b9b      	subs	r3, r3, r6
 8009212:	60a3      	str	r3, [r4, #8]
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	4433      	add	r3, r6
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	e7db      	b.n	80091d4 <__ssputs_r+0x58>
 800921c:	462a      	mov	r2, r5
 800921e:	f000 fb87 	bl	8009930 <_realloc_r>
 8009222:	4606      	mov	r6, r0
 8009224:	2800      	cmp	r0, #0
 8009226:	d1e1      	bne.n	80091ec <__ssputs_r+0x70>
 8009228:	4650      	mov	r0, sl
 800922a:	6921      	ldr	r1, [r4, #16]
 800922c:	f7ff feca 	bl	8008fc4 <_free_r>
 8009230:	e7c7      	b.n	80091c2 <__ssputs_r+0x46>
	...

08009234 <_svfiprintf_r>:
 8009234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	4698      	mov	r8, r3
 800923a:	898b      	ldrh	r3, [r1, #12]
 800923c:	4607      	mov	r7, r0
 800923e:	061b      	lsls	r3, r3, #24
 8009240:	460d      	mov	r5, r1
 8009242:	4614      	mov	r4, r2
 8009244:	b09d      	sub	sp, #116	; 0x74
 8009246:	d50e      	bpl.n	8009266 <_svfiprintf_r+0x32>
 8009248:	690b      	ldr	r3, [r1, #16]
 800924a:	b963      	cbnz	r3, 8009266 <_svfiprintf_r+0x32>
 800924c:	2140      	movs	r1, #64	; 0x40
 800924e:	f7ff ff21 	bl	8009094 <_malloc_r>
 8009252:	6028      	str	r0, [r5, #0]
 8009254:	6128      	str	r0, [r5, #16]
 8009256:	b920      	cbnz	r0, 8009262 <_svfiprintf_r+0x2e>
 8009258:	230c      	movs	r3, #12
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	e0d1      	b.n	8009406 <_svfiprintf_r+0x1d2>
 8009262:	2340      	movs	r3, #64	; 0x40
 8009264:	616b      	str	r3, [r5, #20]
 8009266:	2300      	movs	r3, #0
 8009268:	9309      	str	r3, [sp, #36]	; 0x24
 800926a:	2320      	movs	r3, #32
 800926c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009270:	2330      	movs	r3, #48	; 0x30
 8009272:	f04f 0901 	mov.w	r9, #1
 8009276:	f8cd 800c 	str.w	r8, [sp, #12]
 800927a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009420 <_svfiprintf_r+0x1ec>
 800927e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009282:	4623      	mov	r3, r4
 8009284:	469a      	mov	sl, r3
 8009286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928a:	b10a      	cbz	r2, 8009290 <_svfiprintf_r+0x5c>
 800928c:	2a25      	cmp	r2, #37	; 0x25
 800928e:	d1f9      	bne.n	8009284 <_svfiprintf_r+0x50>
 8009290:	ebba 0b04 	subs.w	fp, sl, r4
 8009294:	d00b      	beq.n	80092ae <_svfiprintf_r+0x7a>
 8009296:	465b      	mov	r3, fp
 8009298:	4622      	mov	r2, r4
 800929a:	4629      	mov	r1, r5
 800929c:	4638      	mov	r0, r7
 800929e:	f7ff ff6d 	bl	800917c <__ssputs_r>
 80092a2:	3001      	adds	r0, #1
 80092a4:	f000 80aa 	beq.w	80093fc <_svfiprintf_r+0x1c8>
 80092a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092aa:	445a      	add	r2, fp
 80092ac:	9209      	str	r2, [sp, #36]	; 0x24
 80092ae:	f89a 3000 	ldrb.w	r3, [sl]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 80a2 	beq.w	80093fc <_svfiprintf_r+0x1c8>
 80092b8:	2300      	movs	r3, #0
 80092ba:	f04f 32ff 	mov.w	r2, #4294967295
 80092be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c2:	f10a 0a01 	add.w	sl, sl, #1
 80092c6:	9304      	str	r3, [sp, #16]
 80092c8:	9307      	str	r3, [sp, #28]
 80092ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ce:	931a      	str	r3, [sp, #104]	; 0x68
 80092d0:	4654      	mov	r4, sl
 80092d2:	2205      	movs	r2, #5
 80092d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d8:	4851      	ldr	r0, [pc, #324]	; (8009420 <_svfiprintf_r+0x1ec>)
 80092da:	f7ff f98b 	bl	80085f4 <memchr>
 80092de:	9a04      	ldr	r2, [sp, #16]
 80092e0:	b9d8      	cbnz	r0, 800931a <_svfiprintf_r+0xe6>
 80092e2:	06d0      	lsls	r0, r2, #27
 80092e4:	bf44      	itt	mi
 80092e6:	2320      	movmi	r3, #32
 80092e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ec:	0711      	lsls	r1, r2, #28
 80092ee:	bf44      	itt	mi
 80092f0:	232b      	movmi	r3, #43	; 0x2b
 80092f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f6:	f89a 3000 	ldrb.w	r3, [sl]
 80092fa:	2b2a      	cmp	r3, #42	; 0x2a
 80092fc:	d015      	beq.n	800932a <_svfiprintf_r+0xf6>
 80092fe:	4654      	mov	r4, sl
 8009300:	2000      	movs	r0, #0
 8009302:	f04f 0c0a 	mov.w	ip, #10
 8009306:	9a07      	ldr	r2, [sp, #28]
 8009308:	4621      	mov	r1, r4
 800930a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800930e:	3b30      	subs	r3, #48	; 0x30
 8009310:	2b09      	cmp	r3, #9
 8009312:	d94e      	bls.n	80093b2 <_svfiprintf_r+0x17e>
 8009314:	b1b0      	cbz	r0, 8009344 <_svfiprintf_r+0x110>
 8009316:	9207      	str	r2, [sp, #28]
 8009318:	e014      	b.n	8009344 <_svfiprintf_r+0x110>
 800931a:	eba0 0308 	sub.w	r3, r0, r8
 800931e:	fa09 f303 	lsl.w	r3, r9, r3
 8009322:	4313      	orrs	r3, r2
 8009324:	46a2      	mov	sl, r4
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	e7d2      	b.n	80092d0 <_svfiprintf_r+0x9c>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	1d19      	adds	r1, r3, #4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	9103      	str	r1, [sp, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfbb      	ittet	lt
 8009336:	425b      	neglt	r3, r3
 8009338:	f042 0202 	orrlt.w	r2, r2, #2
 800933c:	9307      	strge	r3, [sp, #28]
 800933e:	9307      	strlt	r3, [sp, #28]
 8009340:	bfb8      	it	lt
 8009342:	9204      	strlt	r2, [sp, #16]
 8009344:	7823      	ldrb	r3, [r4, #0]
 8009346:	2b2e      	cmp	r3, #46	; 0x2e
 8009348:	d10c      	bne.n	8009364 <_svfiprintf_r+0x130>
 800934a:	7863      	ldrb	r3, [r4, #1]
 800934c:	2b2a      	cmp	r3, #42	; 0x2a
 800934e:	d135      	bne.n	80093bc <_svfiprintf_r+0x188>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	3402      	adds	r4, #2
 8009354:	1d1a      	adds	r2, r3, #4
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	9203      	str	r2, [sp, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	bfb8      	it	lt
 800935e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009424 <_svfiprintf_r+0x1f0>
 8009368:	2203      	movs	r2, #3
 800936a:	4650      	mov	r0, sl
 800936c:	7821      	ldrb	r1, [r4, #0]
 800936e:	f7ff f941 	bl	80085f4 <memchr>
 8009372:	b140      	cbz	r0, 8009386 <_svfiprintf_r+0x152>
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	eba0 000a 	sub.w	r0, r0, sl
 800937a:	fa03 f000 	lsl.w	r0, r3, r0
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	3401      	adds	r4, #1
 8009382:	4303      	orrs	r3, r0
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938a:	2206      	movs	r2, #6
 800938c:	4826      	ldr	r0, [pc, #152]	; (8009428 <_svfiprintf_r+0x1f4>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009392:	f7ff f92f 	bl	80085f4 <memchr>
 8009396:	2800      	cmp	r0, #0
 8009398:	d038      	beq.n	800940c <_svfiprintf_r+0x1d8>
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <_svfiprintf_r+0x1f8>)
 800939c:	bb1b      	cbnz	r3, 80093e6 <_svfiprintf_r+0x1b2>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	3307      	adds	r3, #7
 80093a2:	f023 0307 	bic.w	r3, r3, #7
 80093a6:	3308      	adds	r3, #8
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ac:	4433      	add	r3, r6
 80093ae:	9309      	str	r3, [sp, #36]	; 0x24
 80093b0:	e767      	b.n	8009282 <_svfiprintf_r+0x4e>
 80093b2:	460c      	mov	r4, r1
 80093b4:	2001      	movs	r0, #1
 80093b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ba:	e7a5      	b.n	8009308 <_svfiprintf_r+0xd4>
 80093bc:	2300      	movs	r3, #0
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	4619      	mov	r1, r3
 80093c4:	3401      	adds	r4, #1
 80093c6:	9305      	str	r3, [sp, #20]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ce:	3a30      	subs	r2, #48	; 0x30
 80093d0:	2a09      	cmp	r2, #9
 80093d2:	d903      	bls.n	80093dc <_svfiprintf_r+0x1a8>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0c5      	beq.n	8009364 <_svfiprintf_r+0x130>
 80093d8:	9105      	str	r1, [sp, #20]
 80093da:	e7c3      	b.n	8009364 <_svfiprintf_r+0x130>
 80093dc:	4604      	mov	r4, r0
 80093de:	2301      	movs	r3, #1
 80093e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e4:	e7f0      	b.n	80093c8 <_svfiprintf_r+0x194>
 80093e6:	ab03      	add	r3, sp, #12
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	462a      	mov	r2, r5
 80093ec:	4638      	mov	r0, r7
 80093ee:	4b10      	ldr	r3, [pc, #64]	; (8009430 <_svfiprintf_r+0x1fc>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	f7fb fef7 	bl	80051e4 <_printf_float>
 80093f6:	1c42      	adds	r2, r0, #1
 80093f8:	4606      	mov	r6, r0
 80093fa:	d1d6      	bne.n	80093aa <_svfiprintf_r+0x176>
 80093fc:	89ab      	ldrh	r3, [r5, #12]
 80093fe:	065b      	lsls	r3, r3, #25
 8009400:	f53f af2c 	bmi.w	800925c <_svfiprintf_r+0x28>
 8009404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009406:	b01d      	add	sp, #116	; 0x74
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	ab03      	add	r3, sp, #12
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	462a      	mov	r2, r5
 8009412:	4638      	mov	r0, r7
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <_svfiprintf_r+0x1fc>)
 8009416:	a904      	add	r1, sp, #16
 8009418:	f7fc f980 	bl	800571c <_printf_i>
 800941c:	e7eb      	b.n	80093f6 <_svfiprintf_r+0x1c2>
 800941e:	bf00      	nop
 8009420:	0800a144 	.word	0x0800a144
 8009424:	0800a14a 	.word	0x0800a14a
 8009428:	0800a14e 	.word	0x0800a14e
 800942c:	080051e5 	.word	0x080051e5
 8009430:	0800917d 	.word	0x0800917d

08009434 <__sfputc_r>:
 8009434:	6893      	ldr	r3, [r2, #8]
 8009436:	b410      	push	{r4}
 8009438:	3b01      	subs	r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	6093      	str	r3, [r2, #8]
 800943e:	da07      	bge.n	8009450 <__sfputc_r+0x1c>
 8009440:	6994      	ldr	r4, [r2, #24]
 8009442:	42a3      	cmp	r3, r4
 8009444:	db01      	blt.n	800944a <__sfputc_r+0x16>
 8009446:	290a      	cmp	r1, #10
 8009448:	d102      	bne.n	8009450 <__sfputc_r+0x1c>
 800944a:	bc10      	pop	{r4}
 800944c:	f7fd bbf6 	b.w	8006c3c <__swbuf_r>
 8009450:	6813      	ldr	r3, [r2, #0]
 8009452:	1c58      	adds	r0, r3, #1
 8009454:	6010      	str	r0, [r2, #0]
 8009456:	7019      	strb	r1, [r3, #0]
 8009458:	4608      	mov	r0, r1
 800945a:	bc10      	pop	{r4}
 800945c:	4770      	bx	lr

0800945e <__sfputs_r>:
 800945e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009460:	4606      	mov	r6, r0
 8009462:	460f      	mov	r7, r1
 8009464:	4614      	mov	r4, r2
 8009466:	18d5      	adds	r5, r2, r3
 8009468:	42ac      	cmp	r4, r5
 800946a:	d101      	bne.n	8009470 <__sfputs_r+0x12>
 800946c:	2000      	movs	r0, #0
 800946e:	e007      	b.n	8009480 <__sfputs_r+0x22>
 8009470:	463a      	mov	r2, r7
 8009472:	4630      	mov	r0, r6
 8009474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009478:	f7ff ffdc 	bl	8009434 <__sfputc_r>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d1f3      	bne.n	8009468 <__sfputs_r+0xa>
 8009480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009484 <_vfiprintf_r>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	460d      	mov	r5, r1
 800948a:	4614      	mov	r4, r2
 800948c:	4698      	mov	r8, r3
 800948e:	4606      	mov	r6, r0
 8009490:	b09d      	sub	sp, #116	; 0x74
 8009492:	b118      	cbz	r0, 800949c <_vfiprintf_r+0x18>
 8009494:	6983      	ldr	r3, [r0, #24]
 8009496:	b90b      	cbnz	r3, 800949c <_vfiprintf_r+0x18>
 8009498:	f7fe fc22 	bl	8007ce0 <__sinit>
 800949c:	4b89      	ldr	r3, [pc, #548]	; (80096c4 <_vfiprintf_r+0x240>)
 800949e:	429d      	cmp	r5, r3
 80094a0:	d11b      	bne.n	80094da <_vfiprintf_r+0x56>
 80094a2:	6875      	ldr	r5, [r6, #4]
 80094a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d405      	bmi.n	80094b6 <_vfiprintf_r+0x32>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	059a      	lsls	r2, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_vfiprintf_r+0x32>
 80094b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094b2:	f7ff f81e 	bl	80084f2 <__retarget_lock_acquire_recursive>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	071b      	lsls	r3, r3, #28
 80094ba:	d501      	bpl.n	80094c0 <_vfiprintf_r+0x3c>
 80094bc:	692b      	ldr	r3, [r5, #16]
 80094be:	b9eb      	cbnz	r3, 80094fc <_vfiprintf_r+0x78>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7fd fc0c 	bl	8006ce0 <__swsetup_r>
 80094c8:	b1c0      	cbz	r0, 80094fc <_vfiprintf_r+0x78>
 80094ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094cc:	07dc      	lsls	r4, r3, #31
 80094ce:	d50e      	bpl.n	80094ee <_vfiprintf_r+0x6a>
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295
 80094d4:	b01d      	add	sp, #116	; 0x74
 80094d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094da:	4b7b      	ldr	r3, [pc, #492]	; (80096c8 <_vfiprintf_r+0x244>)
 80094dc:	429d      	cmp	r5, r3
 80094de:	d101      	bne.n	80094e4 <_vfiprintf_r+0x60>
 80094e0:	68b5      	ldr	r5, [r6, #8]
 80094e2:	e7df      	b.n	80094a4 <_vfiprintf_r+0x20>
 80094e4:	4b79      	ldr	r3, [pc, #484]	; (80096cc <_vfiprintf_r+0x248>)
 80094e6:	429d      	cmp	r5, r3
 80094e8:	bf08      	it	eq
 80094ea:	68f5      	ldreq	r5, [r6, #12]
 80094ec:	e7da      	b.n	80094a4 <_vfiprintf_r+0x20>
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	0598      	lsls	r0, r3, #22
 80094f2:	d4ed      	bmi.n	80094d0 <_vfiprintf_r+0x4c>
 80094f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094f6:	f7fe fffd 	bl	80084f4 <__retarget_lock_release_recursive>
 80094fa:	e7e9      	b.n	80094d0 <_vfiprintf_r+0x4c>
 80094fc:	2300      	movs	r3, #0
 80094fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009500:	2320      	movs	r3, #32
 8009502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009506:	2330      	movs	r3, #48	; 0x30
 8009508:	f04f 0901 	mov.w	r9, #1
 800950c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009510:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80096d0 <_vfiprintf_r+0x24c>
 8009514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009518:	4623      	mov	r3, r4
 800951a:	469a      	mov	sl, r3
 800951c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009520:	b10a      	cbz	r2, 8009526 <_vfiprintf_r+0xa2>
 8009522:	2a25      	cmp	r2, #37	; 0x25
 8009524:	d1f9      	bne.n	800951a <_vfiprintf_r+0x96>
 8009526:	ebba 0b04 	subs.w	fp, sl, r4
 800952a:	d00b      	beq.n	8009544 <_vfiprintf_r+0xc0>
 800952c:	465b      	mov	r3, fp
 800952e:	4622      	mov	r2, r4
 8009530:	4629      	mov	r1, r5
 8009532:	4630      	mov	r0, r6
 8009534:	f7ff ff93 	bl	800945e <__sfputs_r>
 8009538:	3001      	adds	r0, #1
 800953a:	f000 80aa 	beq.w	8009692 <_vfiprintf_r+0x20e>
 800953e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009540:	445a      	add	r2, fp
 8009542:	9209      	str	r2, [sp, #36]	; 0x24
 8009544:	f89a 3000 	ldrb.w	r3, [sl]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80a2 	beq.w	8009692 <_vfiprintf_r+0x20e>
 800954e:	2300      	movs	r3, #0
 8009550:	f04f 32ff 	mov.w	r2, #4294967295
 8009554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009558:	f10a 0a01 	add.w	sl, sl, #1
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	9307      	str	r3, [sp, #28]
 8009560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009564:	931a      	str	r3, [sp, #104]	; 0x68
 8009566:	4654      	mov	r4, sl
 8009568:	2205      	movs	r2, #5
 800956a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956e:	4858      	ldr	r0, [pc, #352]	; (80096d0 <_vfiprintf_r+0x24c>)
 8009570:	f7ff f840 	bl	80085f4 <memchr>
 8009574:	9a04      	ldr	r2, [sp, #16]
 8009576:	b9d8      	cbnz	r0, 80095b0 <_vfiprintf_r+0x12c>
 8009578:	06d1      	lsls	r1, r2, #27
 800957a:	bf44      	itt	mi
 800957c:	2320      	movmi	r3, #32
 800957e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009582:	0713      	lsls	r3, r2, #28
 8009584:	bf44      	itt	mi
 8009586:	232b      	movmi	r3, #43	; 0x2b
 8009588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800958c:	f89a 3000 	ldrb.w	r3, [sl]
 8009590:	2b2a      	cmp	r3, #42	; 0x2a
 8009592:	d015      	beq.n	80095c0 <_vfiprintf_r+0x13c>
 8009594:	4654      	mov	r4, sl
 8009596:	2000      	movs	r0, #0
 8009598:	f04f 0c0a 	mov.w	ip, #10
 800959c:	9a07      	ldr	r2, [sp, #28]
 800959e:	4621      	mov	r1, r4
 80095a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095a4:	3b30      	subs	r3, #48	; 0x30
 80095a6:	2b09      	cmp	r3, #9
 80095a8:	d94e      	bls.n	8009648 <_vfiprintf_r+0x1c4>
 80095aa:	b1b0      	cbz	r0, 80095da <_vfiprintf_r+0x156>
 80095ac:	9207      	str	r2, [sp, #28]
 80095ae:	e014      	b.n	80095da <_vfiprintf_r+0x156>
 80095b0:	eba0 0308 	sub.w	r3, r0, r8
 80095b4:	fa09 f303 	lsl.w	r3, r9, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	46a2      	mov	sl, r4
 80095bc:	9304      	str	r3, [sp, #16]
 80095be:	e7d2      	b.n	8009566 <_vfiprintf_r+0xe2>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	1d19      	adds	r1, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9103      	str	r1, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bfbb      	ittet	lt
 80095cc:	425b      	neglt	r3, r3
 80095ce:	f042 0202 	orrlt.w	r2, r2, #2
 80095d2:	9307      	strge	r3, [sp, #28]
 80095d4:	9307      	strlt	r3, [sp, #28]
 80095d6:	bfb8      	it	lt
 80095d8:	9204      	strlt	r2, [sp, #16]
 80095da:	7823      	ldrb	r3, [r4, #0]
 80095dc:	2b2e      	cmp	r3, #46	; 0x2e
 80095de:	d10c      	bne.n	80095fa <_vfiprintf_r+0x176>
 80095e0:	7863      	ldrb	r3, [r4, #1]
 80095e2:	2b2a      	cmp	r3, #42	; 0x2a
 80095e4:	d135      	bne.n	8009652 <_vfiprintf_r+0x1ce>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	3402      	adds	r4, #2
 80095ea:	1d1a      	adds	r2, r3, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	9203      	str	r2, [sp, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bfb8      	it	lt
 80095f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80096d4 <_vfiprintf_r+0x250>
 80095fe:	2203      	movs	r2, #3
 8009600:	4650      	mov	r0, sl
 8009602:	7821      	ldrb	r1, [r4, #0]
 8009604:	f7fe fff6 	bl	80085f4 <memchr>
 8009608:	b140      	cbz	r0, 800961c <_vfiprintf_r+0x198>
 800960a:	2340      	movs	r3, #64	; 0x40
 800960c:	eba0 000a 	sub.w	r0, r0, sl
 8009610:	fa03 f000 	lsl.w	r0, r3, r0
 8009614:	9b04      	ldr	r3, [sp, #16]
 8009616:	3401      	adds	r4, #1
 8009618:	4303      	orrs	r3, r0
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009620:	2206      	movs	r2, #6
 8009622:	482d      	ldr	r0, [pc, #180]	; (80096d8 <_vfiprintf_r+0x254>)
 8009624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009628:	f7fe ffe4 	bl	80085f4 <memchr>
 800962c:	2800      	cmp	r0, #0
 800962e:	d03f      	beq.n	80096b0 <_vfiprintf_r+0x22c>
 8009630:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <_vfiprintf_r+0x258>)
 8009632:	bb1b      	cbnz	r3, 800967c <_vfiprintf_r+0x1f8>
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	3307      	adds	r3, #7
 8009638:	f023 0307 	bic.w	r3, r3, #7
 800963c:	3308      	adds	r3, #8
 800963e:	9303      	str	r3, [sp, #12]
 8009640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009642:	443b      	add	r3, r7
 8009644:	9309      	str	r3, [sp, #36]	; 0x24
 8009646:	e767      	b.n	8009518 <_vfiprintf_r+0x94>
 8009648:	460c      	mov	r4, r1
 800964a:	2001      	movs	r0, #1
 800964c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009650:	e7a5      	b.n	800959e <_vfiprintf_r+0x11a>
 8009652:	2300      	movs	r3, #0
 8009654:	f04f 0c0a 	mov.w	ip, #10
 8009658:	4619      	mov	r1, r3
 800965a:	3401      	adds	r4, #1
 800965c:	9305      	str	r3, [sp, #20]
 800965e:	4620      	mov	r0, r4
 8009660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009664:	3a30      	subs	r2, #48	; 0x30
 8009666:	2a09      	cmp	r2, #9
 8009668:	d903      	bls.n	8009672 <_vfiprintf_r+0x1ee>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0c5      	beq.n	80095fa <_vfiprintf_r+0x176>
 800966e:	9105      	str	r1, [sp, #20]
 8009670:	e7c3      	b.n	80095fa <_vfiprintf_r+0x176>
 8009672:	4604      	mov	r4, r0
 8009674:	2301      	movs	r3, #1
 8009676:	fb0c 2101 	mla	r1, ip, r1, r2
 800967a:	e7f0      	b.n	800965e <_vfiprintf_r+0x1da>
 800967c:	ab03      	add	r3, sp, #12
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	462a      	mov	r2, r5
 8009682:	4630      	mov	r0, r6
 8009684:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <_vfiprintf_r+0x25c>)
 8009686:	a904      	add	r1, sp, #16
 8009688:	f7fb fdac 	bl	80051e4 <_printf_float>
 800968c:	4607      	mov	r7, r0
 800968e:	1c78      	adds	r0, r7, #1
 8009690:	d1d6      	bne.n	8009640 <_vfiprintf_r+0x1bc>
 8009692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009694:	07d9      	lsls	r1, r3, #31
 8009696:	d405      	bmi.n	80096a4 <_vfiprintf_r+0x220>
 8009698:	89ab      	ldrh	r3, [r5, #12]
 800969a:	059a      	lsls	r2, r3, #22
 800969c:	d402      	bmi.n	80096a4 <_vfiprintf_r+0x220>
 800969e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096a0:	f7fe ff28 	bl	80084f4 <__retarget_lock_release_recursive>
 80096a4:	89ab      	ldrh	r3, [r5, #12]
 80096a6:	065b      	lsls	r3, r3, #25
 80096a8:	f53f af12 	bmi.w	80094d0 <_vfiprintf_r+0x4c>
 80096ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ae:	e711      	b.n	80094d4 <_vfiprintf_r+0x50>
 80096b0:	ab03      	add	r3, sp, #12
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	462a      	mov	r2, r5
 80096b6:	4630      	mov	r0, r6
 80096b8:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <_vfiprintf_r+0x25c>)
 80096ba:	a904      	add	r1, sp, #16
 80096bc:	f7fc f82e 	bl	800571c <_printf_i>
 80096c0:	e7e4      	b.n	800968c <_vfiprintf_r+0x208>
 80096c2:	bf00      	nop
 80096c4:	08009f2c 	.word	0x08009f2c
 80096c8:	08009f4c 	.word	0x08009f4c
 80096cc:	08009f0c 	.word	0x08009f0c
 80096d0:	0800a144 	.word	0x0800a144
 80096d4:	0800a14a 	.word	0x0800a14a
 80096d8:	0800a14e 	.word	0x0800a14e
 80096dc:	080051e5 	.word	0x080051e5
 80096e0:	0800945f 	.word	0x0800945f

080096e4 <nan>:
 80096e4:	2000      	movs	r0, #0
 80096e6:	4901      	ldr	r1, [pc, #4]	; (80096ec <nan+0x8>)
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	7ff80000 	.word	0x7ff80000

080096f0 <_sbrk_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	2300      	movs	r3, #0
 80096f4:	4d05      	ldr	r5, [pc, #20]	; (800970c <_sbrk_r+0x1c>)
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f9 fa68 	bl	8002bd0 <_sbrk>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_sbrk_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_sbrk_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	200003c4 	.word	0x200003c4

08009710 <__sread>:
 8009710:	b510      	push	{r4, lr}
 8009712:	460c      	mov	r4, r1
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	f000 f93a 	bl	8009990 <_read_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	bfab      	itete	ge
 8009720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009722:	89a3      	ldrhlt	r3, [r4, #12]
 8009724:	181b      	addge	r3, r3, r0
 8009726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800972a:	bfac      	ite	ge
 800972c:	6563      	strge	r3, [r4, #84]	; 0x54
 800972e:	81a3      	strhlt	r3, [r4, #12]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__swrite>:
 8009732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	461f      	mov	r7, r3
 8009738:	898b      	ldrh	r3, [r1, #12]
 800973a:	4605      	mov	r5, r0
 800973c:	05db      	lsls	r3, r3, #23
 800973e:	460c      	mov	r4, r1
 8009740:	4616      	mov	r6, r2
 8009742:	d505      	bpl.n	8009750 <__swrite+0x1e>
 8009744:	2302      	movs	r3, #2
 8009746:	2200      	movs	r2, #0
 8009748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974c:	f000 f8b8 	bl	80098c0 <_lseek_r>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	4632      	mov	r2, r6
 8009754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	4628      	mov	r0, r5
 800975c:	463b      	mov	r3, r7
 800975e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009766:	f000 b837 	b.w	80097d8 <_write_r>

0800976a <__sseek>:
 800976a:	b510      	push	{r4, lr}
 800976c:	460c      	mov	r4, r1
 800976e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009772:	f000 f8a5 	bl	80098c0 <_lseek_r>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	bf15      	itete	ne
 800977c:	6560      	strne	r0, [r4, #84]	; 0x54
 800977e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009786:	81a3      	strheq	r3, [r4, #12]
 8009788:	bf18      	it	ne
 800978a:	81a3      	strhne	r3, [r4, #12]
 800978c:	bd10      	pop	{r4, pc}

0800978e <__sclose>:
 800978e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009792:	f000 b851 	b.w	8009838 <_close_r>

08009796 <strncmp>:
 8009796:	4603      	mov	r3, r0
 8009798:	b510      	push	{r4, lr}
 800979a:	b172      	cbz	r2, 80097ba <strncmp+0x24>
 800979c:	3901      	subs	r1, #1
 800979e:	1884      	adds	r4, r0, r2
 80097a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80097a8:	4290      	cmp	r0, r2
 80097aa:	d101      	bne.n	80097b0 <strncmp+0x1a>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d101      	bne.n	80097b4 <strncmp+0x1e>
 80097b0:	1a80      	subs	r0, r0, r2
 80097b2:	bd10      	pop	{r4, pc}
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1f3      	bne.n	80097a0 <strncmp+0xa>
 80097b8:	e7fa      	b.n	80097b0 <strncmp+0x1a>
 80097ba:	4610      	mov	r0, r2
 80097bc:	e7f9      	b.n	80097b2 <strncmp+0x1c>

080097be <__ascii_wctomb>:
 80097be:	4603      	mov	r3, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	b141      	cbz	r1, 80097d6 <__ascii_wctomb+0x18>
 80097c4:	2aff      	cmp	r2, #255	; 0xff
 80097c6:	d904      	bls.n	80097d2 <__ascii_wctomb+0x14>
 80097c8:	228a      	movs	r2, #138	; 0x8a
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	4770      	bx	lr
 80097d2:	2001      	movs	r0, #1
 80097d4:	700a      	strb	r2, [r1, #0]
 80097d6:	4770      	bx	lr

080097d8 <_write_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	2200      	movs	r2, #0
 80097e2:	4d05      	ldr	r5, [pc, #20]	; (80097f8 <_write_r+0x20>)
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7f9 f9a6 	bl	8002b38 <_write>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_write_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_write_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200003c4 	.word	0x200003c4

080097fc <__assert_func>:
 80097fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097fe:	4614      	mov	r4, r2
 8009800:	461a      	mov	r2, r3
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <__assert_func+0x2c>)
 8009804:	4605      	mov	r5, r0
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68d8      	ldr	r0, [r3, #12]
 800980a:	b14c      	cbz	r4, 8009820 <__assert_func+0x24>
 800980c:	4b07      	ldr	r3, [pc, #28]	; (800982c <__assert_func+0x30>)
 800980e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009812:	9100      	str	r1, [sp, #0]
 8009814:	462b      	mov	r3, r5
 8009816:	4906      	ldr	r1, [pc, #24]	; (8009830 <__assert_func+0x34>)
 8009818:	f000 f81e 	bl	8009858 <fiprintf>
 800981c:	f000 f8ca 	bl	80099b4 <abort>
 8009820:	4b04      	ldr	r3, [pc, #16]	; (8009834 <__assert_func+0x38>)
 8009822:	461c      	mov	r4, r3
 8009824:	e7f3      	b.n	800980e <__assert_func+0x12>
 8009826:	bf00      	nop
 8009828:	2000005c 	.word	0x2000005c
 800982c:	0800a155 	.word	0x0800a155
 8009830:	0800a162 	.word	0x0800a162
 8009834:	0800a190 	.word	0x0800a190

08009838 <_close_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	2300      	movs	r3, #0
 800983c:	4d05      	ldr	r5, [pc, #20]	; (8009854 <_close_r+0x1c>)
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f9 f994 	bl	8002b70 <_close>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_close_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_close_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	200003c4 	.word	0x200003c4

08009858 <fiprintf>:
 8009858:	b40e      	push	{r1, r2, r3}
 800985a:	b503      	push	{r0, r1, lr}
 800985c:	4601      	mov	r1, r0
 800985e:	ab03      	add	r3, sp, #12
 8009860:	4805      	ldr	r0, [pc, #20]	; (8009878 <fiprintf+0x20>)
 8009862:	f853 2b04 	ldr.w	r2, [r3], #4
 8009866:	6800      	ldr	r0, [r0, #0]
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	f7ff fe0b 	bl	8009484 <_vfiprintf_r>
 800986e:	b002      	add	sp, #8
 8009870:	f85d eb04 	ldr.w	lr, [sp], #4
 8009874:	b003      	add	sp, #12
 8009876:	4770      	bx	lr
 8009878:	2000005c 	.word	0x2000005c

0800987c <_fstat_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	2300      	movs	r3, #0
 8009880:	4d06      	ldr	r5, [pc, #24]	; (800989c <_fstat_r+0x20>)
 8009882:	4604      	mov	r4, r0
 8009884:	4608      	mov	r0, r1
 8009886:	4611      	mov	r1, r2
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	f7f9 f97c 	bl	8002b86 <_fstat>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	d102      	bne.n	8009898 <_fstat_r+0x1c>
 8009892:	682b      	ldr	r3, [r5, #0]
 8009894:	b103      	cbz	r3, 8009898 <_fstat_r+0x1c>
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	bd38      	pop	{r3, r4, r5, pc}
 800989a:	bf00      	nop
 800989c:	200003c4 	.word	0x200003c4

080098a0 <_isatty_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	2300      	movs	r3, #0
 80098a4:	4d05      	ldr	r5, [pc, #20]	; (80098bc <_isatty_r+0x1c>)
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	f7f9 f97a 	bl	8002ba4 <_isatty>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_isatty_r+0x1a>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_isatty_r+0x1a>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	200003c4 	.word	0x200003c4

080098c0 <_lseek_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4604      	mov	r4, r0
 80098c4:	4608      	mov	r0, r1
 80098c6:	4611      	mov	r1, r2
 80098c8:	2200      	movs	r2, #0
 80098ca:	4d05      	ldr	r5, [pc, #20]	; (80098e0 <_lseek_r+0x20>)
 80098cc:	602a      	str	r2, [r5, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f7f9 f972 	bl	8002bb8 <_lseek>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_lseek_r+0x1e>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_lseek_r+0x1e>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	200003c4 	.word	0x200003c4

080098e4 <memmove>:
 80098e4:	4288      	cmp	r0, r1
 80098e6:	b510      	push	{r4, lr}
 80098e8:	eb01 0402 	add.w	r4, r1, r2
 80098ec:	d902      	bls.n	80098f4 <memmove+0x10>
 80098ee:	4284      	cmp	r4, r0
 80098f0:	4623      	mov	r3, r4
 80098f2:	d807      	bhi.n	8009904 <memmove+0x20>
 80098f4:	1e43      	subs	r3, r0, #1
 80098f6:	42a1      	cmp	r1, r4
 80098f8:	d008      	beq.n	800990c <memmove+0x28>
 80098fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009902:	e7f8      	b.n	80098f6 <memmove+0x12>
 8009904:	4601      	mov	r1, r0
 8009906:	4402      	add	r2, r0
 8009908:	428a      	cmp	r2, r1
 800990a:	d100      	bne.n	800990e <memmove+0x2a>
 800990c:	bd10      	pop	{r4, pc}
 800990e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009916:	e7f7      	b.n	8009908 <memmove+0x24>

08009918 <__malloc_lock>:
 8009918:	4801      	ldr	r0, [pc, #4]	; (8009920 <__malloc_lock+0x8>)
 800991a:	f7fe bdea 	b.w	80084f2 <__retarget_lock_acquire_recursive>
 800991e:	bf00      	nop
 8009920:	200003b8 	.word	0x200003b8

08009924 <__malloc_unlock>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__malloc_unlock+0x8>)
 8009926:	f7fe bde5 	b.w	80084f4 <__retarget_lock_release_recursive>
 800992a:	bf00      	nop
 800992c:	200003b8 	.word	0x200003b8

08009930 <_realloc_r>:
 8009930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009934:	4680      	mov	r8, r0
 8009936:	4614      	mov	r4, r2
 8009938:	460e      	mov	r6, r1
 800993a:	b921      	cbnz	r1, 8009946 <_realloc_r+0x16>
 800993c:	4611      	mov	r1, r2
 800993e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009942:	f7ff bba7 	b.w	8009094 <_malloc_r>
 8009946:	b92a      	cbnz	r2, 8009954 <_realloc_r+0x24>
 8009948:	f7ff fb3c 	bl	8008fc4 <_free_r>
 800994c:	4625      	mov	r5, r4
 800994e:	4628      	mov	r0, r5
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009954:	f000 f835 	bl	80099c2 <_malloc_usable_size_r>
 8009958:	4284      	cmp	r4, r0
 800995a:	4607      	mov	r7, r0
 800995c:	d802      	bhi.n	8009964 <_realloc_r+0x34>
 800995e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009962:	d812      	bhi.n	800998a <_realloc_r+0x5a>
 8009964:	4621      	mov	r1, r4
 8009966:	4640      	mov	r0, r8
 8009968:	f7ff fb94 	bl	8009094 <_malloc_r>
 800996c:	4605      	mov	r5, r0
 800996e:	2800      	cmp	r0, #0
 8009970:	d0ed      	beq.n	800994e <_realloc_r+0x1e>
 8009972:	42bc      	cmp	r4, r7
 8009974:	4622      	mov	r2, r4
 8009976:	4631      	mov	r1, r6
 8009978:	bf28      	it	cs
 800997a:	463a      	movcs	r2, r7
 800997c:	f7fe fe48 	bl	8008610 <memcpy>
 8009980:	4631      	mov	r1, r6
 8009982:	4640      	mov	r0, r8
 8009984:	f7ff fb1e 	bl	8008fc4 <_free_r>
 8009988:	e7e1      	b.n	800994e <_realloc_r+0x1e>
 800998a:	4635      	mov	r5, r6
 800998c:	e7df      	b.n	800994e <_realloc_r+0x1e>
	...

08009990 <_read_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4604      	mov	r4, r0
 8009994:	4608      	mov	r0, r1
 8009996:	4611      	mov	r1, r2
 8009998:	2200      	movs	r2, #0
 800999a:	4d05      	ldr	r5, [pc, #20]	; (80099b0 <_read_r+0x20>)
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7f9 f8ad 	bl	8002afe <_read>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_read_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_read_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	200003c4 	.word	0x200003c4

080099b4 <abort>:
 80099b4:	2006      	movs	r0, #6
 80099b6:	b508      	push	{r3, lr}
 80099b8:	f000 f834 	bl	8009a24 <raise>
 80099bc:	2001      	movs	r0, #1
 80099be:	f7f9 f894 	bl	8002aea <_exit>

080099c2 <_malloc_usable_size_r>:
 80099c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c6:	1f18      	subs	r0, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfbc      	itt	lt
 80099cc:	580b      	ldrlt	r3, [r1, r0]
 80099ce:	18c0      	addlt	r0, r0, r3
 80099d0:	4770      	bx	lr

080099d2 <_raise_r>:
 80099d2:	291f      	cmp	r1, #31
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4604      	mov	r4, r0
 80099d8:	460d      	mov	r5, r1
 80099da:	d904      	bls.n	80099e6 <_raise_r+0x14>
 80099dc:	2316      	movs	r3, #22
 80099de:	6003      	str	r3, [r0, #0]
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
 80099e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099e8:	b112      	cbz	r2, 80099f0 <_raise_r+0x1e>
 80099ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099ee:	b94b      	cbnz	r3, 8009a04 <_raise_r+0x32>
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 f831 	bl	8009a58 <_getpid_r>
 80099f6:	462a      	mov	r2, r5
 80099f8:	4601      	mov	r1, r0
 80099fa:	4620      	mov	r0, r4
 80099fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a00:	f000 b818 	b.w	8009a34 <_kill_r>
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d00a      	beq.n	8009a1e <_raise_r+0x4c>
 8009a08:	1c59      	adds	r1, r3, #1
 8009a0a:	d103      	bne.n	8009a14 <_raise_r+0x42>
 8009a0c:	2316      	movs	r3, #22
 8009a0e:	6003      	str	r3, [r0, #0]
 8009a10:	2001      	movs	r0, #1
 8009a12:	e7e7      	b.n	80099e4 <_raise_r+0x12>
 8009a14:	2400      	movs	r4, #0
 8009a16:	4628      	mov	r0, r5
 8009a18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a1c:	4798      	blx	r3
 8009a1e:	2000      	movs	r0, #0
 8009a20:	e7e0      	b.n	80099e4 <_raise_r+0x12>
	...

08009a24 <raise>:
 8009a24:	4b02      	ldr	r3, [pc, #8]	; (8009a30 <raise+0xc>)
 8009a26:	4601      	mov	r1, r0
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	f7ff bfd2 	b.w	80099d2 <_raise_r>
 8009a2e:	bf00      	nop
 8009a30:	2000005c 	.word	0x2000005c

08009a34 <_kill_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	2300      	movs	r3, #0
 8009a38:	4d06      	ldr	r5, [pc, #24]	; (8009a54 <_kill_r+0x20>)
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f7f9 f842 	bl	8002aca <_kill>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d102      	bne.n	8009a50 <_kill_r+0x1c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	b103      	cbz	r3, 8009a50 <_kill_r+0x1c>
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	bf00      	nop
 8009a54:	200003c4 	.word	0x200003c4

08009a58 <_getpid_r>:
 8009a58:	f7f9 b830 	b.w	8002abc <_getpid>

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
