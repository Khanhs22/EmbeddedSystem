
project_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d39c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0800d4b0  0800d4b0  0001d4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc4  0800dcc4  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcc4  0800dcc4  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcc4  0800dcc4  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcc4  0800dcc4  0001dcc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcc8  0800dcc8  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800dccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002360  20000234  0800df00  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002594  0800df00  00022594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e89  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bcd  00000000  00000000  000390e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0003ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1a2  00000000  00000000  0003f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017947  00000000  00000000  00059812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096510  00000000  00000000  00071159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d8  00000000  00000000  001076bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000234 	.word	0x20000234
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d494 	.word	0x0800d494

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000238 	.word	0x20000238
 800014c:	0800d494 	.word	0x0800d494

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <DWT_Delay_Init+0x58>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <DWT_Delay_Init+0x58>)
 80011ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011ee:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <DWT_Delay_Init+0x58>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4a10      	ldr	r2, [pc, #64]	; (8001238 <DWT_Delay_Init+0x58>)
 80011f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011fa:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <DWT_Delay_Init+0x5c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <DWT_Delay_Init+0x5c>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <DWT_Delay_Init+0x5c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <DWT_Delay_Init+0x5c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <DWT_Delay_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800121a:	bf00      	nop
     __ASM volatile ("NOP");
 800121c:	bf00      	nop
  __ASM volatile ("NOP");
 800121e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <DWT_Delay_Init+0x5c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001228:	2300      	movs	r3, #0
 800122a:	e000      	b.n	800122e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800122c:	2301      	movs	r3, #1
  }
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000edf0 	.word	0xe000edf0
 800123c:	e0001000 	.word	0xe0001000

08001240 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <delay+0x40>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800124e:	f002 fc39 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <delay+0x44>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001264:	bf00      	nop
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <delay+0x40>)
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3f8      	bcc.n	8001266 <delay+0x26>
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e0001000 	.word	0xe0001000
 8001284:	431bde83 	.word	0x431bde83

08001288 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2302      	movs	r3, #2
 80012ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 fe87 	bl	8002fc8 <HAL_GPIO_Init>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 fe6a 	bl	8002fc8 <HAL_GPIO_Init>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DHT_Start>:


void DHT_Start (void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001300:	f7ff ff6e 	bl	80011e0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001304:	2101      	movs	r1, #1
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <DHT_Start+0x40>)
 8001308:	f7ff ffbe 	bl	8001288 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <DHT_Start+0x40>)
 8001312:	f001 fff4 	bl	80032fe <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001316:	f244 6050 	movw	r0, #18000	; 0x4650
 800131a:	f7ff ff91 	bl	8001240 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800131e:	2201      	movs	r2, #1
 8001320:	2101      	movs	r1, #1
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <DHT_Start+0x40>)
 8001324:	f001 ffeb 	bl	80032fe <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001328:	2014      	movs	r0, #20
 800132a:	f7ff ff89 	bl	8001240 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800132e:	2101      	movs	r1, #1
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DHT_Start+0x40>)
 8001332:	f7ff ffc6 	bl	80012c2 <Set_Pin_Input>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010800 	.word	0x40010800

08001340 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800134a:	2028      	movs	r0, #40	; 0x28
 800134c:	f7ff ff78 	bl	8001240 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001350:	2101      	movs	r1, #1
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <DHT_Check_Response+0x58>)
 8001354:	f001 ffbc 	bl	80032d0 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <DHT_Check_Response+0x3c>
	{
		delay (90);
 800135e:	205a      	movs	r0, #90	; 0x5a
 8001360:	f7ff ff6e 	bl	8001240 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001364:	2101      	movs	r1, #1
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <DHT_Check_Response+0x58>)
 8001368:	f001 ffb2 	bl	80032d0 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <DHT_Check_Response+0x38>
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e001      	b.n	800137c <DHT_Check_Response+0x3c>
		else Response = -1;
 8001378:	23ff      	movs	r3, #255	; 0xff
 800137a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800137c:	bf00      	nop
 800137e:	2101      	movs	r1, #1
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <DHT_Check_Response+0x58>)
 8001382:	f001 ffa5 	bl	80032d0 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f8      	bne.n	800137e <DHT_Check_Response+0x3e>

	return Response;
 800138c:	79fb      	ldrb	r3, [r7, #7]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010800 	.word	0x40010800

0800139c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	71bb      	strb	r3, [r7, #6]
 80013a6:	e037      	b.n	8001418 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80013a8:	bf00      	nop
 80013aa:	2101      	movs	r1, #1
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <DHT_Read+0x8c>)
 80013ae:	f001 ff8f 	bl	80032d0 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f8      	beq.n	80013aa <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f7ff ff41 	bl	8001240 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80013be:	2101      	movs	r1, #1
 80013c0:	4819      	ldr	r0, [pc, #100]	; (8001428 <DHT_Read+0x8c>)
 80013c2:	f001 ff85 	bl	80032d0 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10e      	bne.n	80013ea <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2201      	movs	r2, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	4013      	ands	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	e00b      	b.n	8001402 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	f1c3 0307 	rsb	r3, r3, #7
 80013f0:	2201      	movs	r2, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001402:	bf00      	nop
 8001404:	2101      	movs	r1, #1
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <DHT_Read+0x8c>)
 8001408:	f001 ff62 	bl	80032d0 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f8      	bne.n	8001404 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	3301      	adds	r3, #1
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d9c4      	bls.n	80013a8 <DHT_Read+0xc>
	}
	return i;
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40010800 	.word	0x40010800

0800142c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001434:	f7ff ff62 	bl	80012fc <DHT_Start>
	Presence = DHT_Check_Response ();
 8001438:	f7ff ff82 	bl	8001340 <DHT_Check_Response>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <DHT_GetData+0xdc>)
 8001442:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001444:	f7ff ffaa 	bl	800139c <DHT_Read>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <DHT_GetData+0xe0>)
 800144e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001450:	f7ff ffa4 	bl	800139c <DHT_Read>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <DHT_GetData+0xe4>)
 800145a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800145c:	f7ff ff9e 	bl	800139c <DHT_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <DHT_GetData+0xe8>)
 8001466:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001468:	f7ff ff98 	bl	800139c <DHT_Read>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <DHT_GetData+0xec>)
 8001472:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001474:	f7ff ff92 	bl	800139c <DHT_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <DHT_GetData+0xf0>)
 800147e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <DHT_GetData+0xf0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <DHT_GetData+0xe0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <DHT_GetData+0xe4>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4413      	add	r3, r2
 8001492:	4a20      	ldr	r2, [pc, #128]	; (8001514 <DHT_GetData+0xe8>)
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <DHT_GetData+0xec>)
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	4413      	add	r3, r2
 800149e:	4299      	cmp	r1, r3
 80014a0:	d12d      	bne.n	80014fe <DHT_GetData+0xd2>
	{
		#if defined(TYPE_DHT11)
//			DHT_Data->Temperature = (float) Temp_byte1;
//			DHT_Data->Humidity = (float) Rh_byte1;
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <DHT_GetData+0xe8>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <DHT_GetData+0xec>)
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc1e 	bl	8000cf0 <__aeabi_i2f>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <DHT_GetData+0xe0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	4a13      	ldr	r2, [pc, #76]	; (8001510 <DHT_GetData+0xe4>)
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc12 	bl	8000cf0 <__aeabi_i2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
			DHT_Data->Temperature = (float)DHT_Data->Temperature/256;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd10 	bl	8000f00 <__aeabi_fdiv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = (float)DHT_Data->Humidity/256;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fd05 	bl	8000f00 <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	605a      	str	r2, [r3, #4]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
			DHT_Data->Temperature = (float)(DHT_Data->Temperature/10.0);
			DHT_Data->Humidity = (float)(DHT_Data->Humidity/10.0);
		#endif
	}
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000256 	.word	0x20000256
 800150c:	20000250 	.word	0x20000250
 8001510:	20000251 	.word	0x20000251
 8001514:	20000252 	.word	0x20000252
 8001518:	20000253 	.word	0x20000253
 800151c:	20000254 	.word	0x20000254

08001520 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f002 fb9b 	bl	8003c64 <HAL_TIM_Base_Start>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 800154a:	bf00      	nop
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3f9      	bcc.n	800154c <DELAY_TIM_Us+0x16>
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <DELAY_TIM_Ms>:
void DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t Time)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
	while(Time--)
 8001578:	e006      	b.n	8001588 <DELAY_TIM_Ms+0x24>
	{
		while(__HAL_TIM_GET_COUNTER(htim)<1000){}
 800157a:	bf00      	nop
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001586:	d3f9      	bcc.n	800157c <DELAY_TIM_Ms+0x18>
	while(Time--)
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	807a      	strh	r2, [r7, #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f3      	bne.n	800157a <DELAY_TIM_Ms+0x16>
	}
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffb8 	bl	8001520 <DELAY_TIM_Init>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	887a      	ldrh	r2, [r7, #2]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ffb2 	bl	8001536 <DELAY_TIM_Us>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ffb8 	bl	8001564 <DELAY_TIM_Ms>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	889b      	ldrh	r3, [r3, #4]
 8001616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2302      	movs	r3, #2
 800161e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f107 0208 	add.w	r2, r7, #8
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fccc 	bl	8002fc8 <HAL_GPIO_Init>
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	889b      	ldrh	r3, [r3, #4]
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fcae 	bl	8002fc8 <HAL_GPIO_Init>
}
 800166c:	bf00      	nop
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6898      	ldr	r0, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	4619      	mov	r1, r3
 800168c:	f001 fe37 	bl	80032fe <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f001 fe10 	bl	80032d0 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff98 	bl	80015fc <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffd0 	bl	8001674 <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);
 80016d4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff6d 	bl	80015b8 <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffaa 	bl	8001638 <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80);
 80016e4:	2150      	movs	r1, #80	; 0x50
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff66 	bl	80015b8 <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ffd3 	bl	8001698 <DS18B20_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <DS18B20_Start+0x44>
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <DS18B20_Start+0x48>
	else Response = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8001702:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff56 	bl	80015b8 <DS18B20_DelayUs>

	return Response;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff6a 	bl	80015fc <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e02b      	b.n	8001786 <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	fa42 f303 	asr.w	r3, r2, r3
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d012      	beq.n	8001764 <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ff5c 	bl	80015fc <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8001744:	2100      	movs	r1, #0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff94 	bl	8001674 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 800174c:	2101      	movs	r1, #1
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff32 	bl	80015b8 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff6f 	bl	8001638 <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 800175a:	2132      	movs	r1, #50	; 0x32
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2b 	bl	80015b8 <DS18B20_DelayUs>
 8001762:	e00d      	b.n	8001780 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff49 	bl	80015fc <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 800176a:	2100      	movs	r1, #0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff81 	bl	8001674 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8001772:	2132      	movs	r1, #50	; 0x32
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff1f 	bl	80015b8 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff5c 	bl	8001638 <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b07      	cmp	r3, #7
 800178a:	ddd0      	ble.n	800172e <DS18B20_Write+0x18>
		}
	}
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff48 	bl	8001638 <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	e024      	b.n	80017f8 <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff24 	bl	80015fc <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff5c 	bl	8001674 <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 80017bc:	2101      	movs	r1, #1
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fefa 	bl	80015b8 <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff37 	bl	8001638 <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff64 	bl	8001698 <DS18B20_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 80017d6:	2201      	movs	r2, #1
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 80017ea:	2132      	movs	r1, #50	; 0x32
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fee3 	bl	80015b8 <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	ddd7      	ble.n	80017ae <DS18B20_Read+0x18>
	}
	return Value;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff feb8 	bl	800159e <DS18B20_DelayInit>
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	uint16_t Temp;
	DS18B20_Start(DS18B20);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff3b 	bl	80016ba <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8001844:	2101      	movs	r1, #1
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fec7 	bl	80015da <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 800184c:	21cc      	movs	r1, #204	; 0xcc
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff61 	bl	8001716 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 8001854:	2144      	movs	r1, #68	; 0x44
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff5d 	bl	8001716 <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 800185c:	21c8      	movs	r1, #200	; 0xc8
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff febb 	bl	80015da <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff28 	bl	80016ba <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 800186a:	2101      	movs	r1, #1
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff feb4 	bl	80015da <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001872:	21cc      	movs	r1, #204	; 0xcc
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff4e 	bl	8001716 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 800187a:	21be      	movs	r1, #190	; 0xbe
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff4a 	bl	8001716 <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff87 	bl	8001796 <DS18B20_Read>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff82 	bl	8001796 <DS18B20_Read>
 8001892:	4603      	mov	r3, r0
 8001894:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	81bb      	strh	r3, [r7, #12]
	DS18B20->Temp = (float)Temp/16;
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fa1d 	bl	8000ce8 <__aeabi_ui2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fb23 	bl	8000f00 <__aeabi_fdiv>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <getKey>:
//	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
}

*/
char getKey(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
	char key = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
	//initKeyPad();
	for(int i = 0; i < ROWS; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e060      	b.n	80019a2 <getKey+0xd2>
	{
		HAL_GPIO_WritePin(rowPort_array[i], rowPin_array[i], 0);
 80018e0:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <getKey+0xe4>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018e8:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <getKey+0xe8>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	f001 fd03 	bl	80032fe <HAL_GPIO_WritePin>
		for(int m = 0; m < COLUMNS; m++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e03f      	b.n	800197e <getKey+0xae>
		{
			if(HAL_GPIO_ReadPin(columnPort_array[m], columnPin_array[m]) == 0)
 80018fe:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <getKey+0xec>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001906:	492e      	ldr	r1, [pc, #184]	; (80019c0 <getKey+0xf0>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800190e:	4619      	mov	r1, r3
 8001910:	4610      	mov	r0, r2
 8001912:	f001 fcdd 	bl	80032d0 <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d12d      	bne.n	8001978 <getKey+0xa8>
			{
				HAL_Delay(10);
 800191c:	200a      	movs	r0, #10
 800191e:	f001 f99f 	bl	8002c60 <HAL_Delay>
				if(HAL_GPIO_ReadPin(columnPort_array[m], columnPin_array[m]) == 0)
 8001922:	4a26      	ldr	r2, [pc, #152]	; (80019bc <getKey+0xec>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800192a:	4925      	ldr	r1, [pc, #148]	; (80019c0 <getKey+0xf0>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f001 fccb 	bl	80032d0 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d11b      	bne.n	8001978 <getKey+0xa8>
				{
					key = keyPad[i][m];
 8001940:	4920      	ldr	r1, [pc, #128]	; (80019c4 <getKey+0xf4>)
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	18ca      	adds	r2, r1, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
					while(!HAL_GPIO_ReadPin(columnPort_array[m], columnPin_array[m])){};
 8001954:	bf00      	nop
 8001956:	4a19      	ldr	r2, [pc, #100]	; (80019bc <getKey+0xec>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800195e:	4918      	ldr	r1, [pc, #96]	; (80019c0 <getKey+0xf0>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f001 fcb1 	bl	80032d0 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <getKey+0x86>
					return key;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	e018      	b.n	80019aa <getKey+0xda>
		for(int m = 0; m < COLUMNS; m++)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3301      	adds	r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b02      	cmp	r3, #2
 8001982:	ddbc      	ble.n	80018fe <getKey+0x2e>
				}
			}
		}
		HAL_GPIO_WritePin(rowPort_array[i], rowPin_array[i], 1);
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <getKey+0xe4>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <getKey+0xe8>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001994:	2201      	movs	r2, #1
 8001996:	4619      	mov	r1, r3
 8001998:	f001 fcb1 	bl	80032fe <HAL_GPIO_WritePin>
	for(int i = 0; i < ROWS; i++)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3301      	adds	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	dd9b      	ble.n	80018e0 <getKey+0x10>
	}
	return key;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000010 	.word	0x20000010
 80019bc:	20000018 	.word	0x20000018
 80019c0:	20000024 	.word	0x20000024
 80019c4:	2000002c 	.word	0x2000002c

080019c8 <display_digit>:
		0x80,
		0x90
};

void display_digit(uint8_t number)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(A_pin_GPIO_Port, A_pin_Pin, ((number>>0)&0x01));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e0:	4829      	ldr	r0, [pc, #164]	; (8001a88 <display_digit+0xc0>)
 80019e2:	f001 fc8c 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_pin_GPIO_Port, B_pin_Pin, ((number>>1)&0x01));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	2108      	movs	r1, #8
 80019f6:	4825      	ldr	r0, [pc, #148]	; (8001a8c <display_digit+0xc4>)
 80019f8:	f001 fc81 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_pin_GPIO_Port, C_pin_Pin, ((number>>2)&0x01));
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2140      	movs	r1, #64	; 0x40
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <display_digit+0xc4>)
 8001a0e:	f001 fc76 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_pin_GPIO_Port, D_pin_Pin, ((number>>3)&0x01));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <display_digit+0xc4>)
 8001a26:	f001 fc6a 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_pin_GPIO_Port, E_pin_Pin, ((number>>4)&0x01));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <display_digit+0xc4>)
 8001a3e:	f001 fc5e 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_pin_GPIO_Port, F_pin_Pin, ((number>>5)&0x01));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <display_digit+0xc0>)
 8001a56:	f001 fc52 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_pin_GPIO_Port, G_pin_Pin, ((number>>6)&0x01));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	2120      	movs	r1, #32
 8001a6a:	4808      	ldr	r0, [pc, #32]	; (8001a8c <display_digit+0xc4>)
 8001a6c:	f001 fc47 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dot_pin_GPIO_Port, Dot_pin_Pin, ((number>>7)&0x01));
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	09db      	lsrs	r3, r3, #7
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	4804      	ldr	r0, [pc, #16]	; (8001a8c <display_digit+0xc4>)
 8001a7c:	f001 fc3f 	bl	80032fe <HAL_GPIO_WritePin>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	40010c00 	.word	0x40010c00

08001a90 <display_float>:

void display_float(float temperature)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	int hundred_temp = (int)(temperature * 100);
 8001a98:	4957      	ldr	r1, [pc, #348]	; (8001bf8 <display_float+0x168>)
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff f97c 	bl	8000d98 <__aeabi_fmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fb3e 	bl	8001124 <__aeabi_f2iz>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

	digit1 = hundred_temp/1000;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a53      	ldr	r2, [pc, #332]	; (8001bfc <display_float+0x16c>)
 8001ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab4:	1192      	asrs	r2, r2, #6
 8001ab6:	17db      	asrs	r3, r3, #31
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <display_float+0x170>)
 8001abe:	701a      	strb	r2, [r3, #0]
	digit2 = ((hundred_temp/100)%10);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <display_float+0x174>)
 8001ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac8:	1152      	asrs	r2, r2, #5
 8001aca:	17db      	asrs	r3, r3, #31
 8001acc:	1ad2      	subs	r2, r2, r3
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <display_float+0x178>)
 8001ad0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ad4:	1099      	asrs	r1, r3, #2
 8001ad6:	17d3      	asrs	r3, r2, #31
 8001ad8:	1ac9      	subs	r1, r1, r3
 8001ada:	460b      	mov	r3, r1
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1ad1      	subs	r1, r2, r3
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <display_float+0x17c>)
 8001ae8:	701a      	strb	r2, [r3, #0]
	digit3 = ((hundred_temp/10)%10);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <display_float+0x178>)
 8001aee:	fb82 1203 	smull	r1, r2, r2, r3
 8001af2:	1092      	asrs	r2, r2, #2
 8001af4:	17db      	asrs	r3, r3, #31
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <display_float+0x178>)
 8001afa:	fb83 1302 	smull	r1, r3, r3, r2
 8001afe:	1099      	asrs	r1, r3, #2
 8001b00:	17d3      	asrs	r3, r2, #31
 8001b02:	1ac9      	subs	r1, r1, r3
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	1ad1      	subs	r1, r2, r3
 8001b0e:	b2ca      	uxtb	r2, r1
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <display_float+0x180>)
 8001b12:	701a      	strb	r2, [r3, #0]
	digit4 = (hundred_temp%10);
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <display_float+0x178>)
 8001b18:	fb83 1302 	smull	r1, r3, r3, r2
 8001b1c:	1099      	asrs	r1, r3, #2
 8001b1e:	17d3      	asrs	r3, r2, #31
 8001b20:	1ac9      	subs	r1, r1, r3
 8001b22:	460b      	mov	r3, r1
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	1ad1      	subs	r1, r2, r3
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <display_float+0x184>)
 8001b30:	701a      	strb	r2, [r3, #0]
	
	display_digit(numberOfSegment[digit1]);
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <display_float+0x170>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b37      	ldr	r3, [pc, #220]	; (8001c18 <display_float+0x188>)
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff43 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Digit1_pin_GPIO_Port, Digit1_pin_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b48:	4834      	ldr	r0, [pc, #208]	; (8001c1c <display_float+0x18c>)
 8001b4a:	f001 fbd8 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f001 f886 	bl	8002c60 <HAL_Delay>
	HAL_GPIO_WritePin(Digit1_pin_GPIO_Port, Digit1_pin_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5a:	4830      	ldr	r0, [pc, #192]	; (8001c1c <display_float+0x18c>)
 8001b5c:	f001 fbcf 	bl	80032fe <HAL_GPIO_WritePin>

	display_digit(numberOfSegment[digit2]);
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <display_float+0x17c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <display_float+0x188>)
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff2c 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Dot_pin_GPIO_Port, Dot_pin_Pin, GPIO_PIN_RESET);  //dot in 2nd section, move it if you want
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	482a      	ldr	r0, [pc, #168]	; (8001c20 <display_float+0x190>)
 8001b76:	f001 fbc2 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Digit2_pin_GPIO_Port, Digit2_pin_Pin, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b80:	4826      	ldr	r0, [pc, #152]	; (8001c1c <display_float+0x18c>)
 8001b82:	f001 fbbc 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f001 f86a 	bl	8002c60 <HAL_Delay>
	HAL_GPIO_WritePin(Digit2_pin_GPIO_Port, Digit2_pin_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b92:	4822      	ldr	r0, [pc, #136]	; (8001c1c <display_float+0x18c>)
 8001b94:	f001 fbb3 	bl	80032fe <HAL_GPIO_WritePin>

	display_digit(numberOfSegment[digit3]);
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <display_float+0x180>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <display_float+0x188>)
 8001ba0:	5c9b      	ldrb	r3, [r3, r2]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff10 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Digit3_pin_GPIO_Port, Digit3_pin_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	481b      	ldr	r0, [pc, #108]	; (8001c1c <display_float+0x18c>)
 8001bb0:	f001 fba5 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f001 f853 	bl	8002c60 <HAL_Delay>
	HAL_GPIO_WritePin(Digit3_pin_GPIO_Port, Digit3_pin_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc0:	4816      	ldr	r0, [pc, #88]	; (8001c1c <display_float+0x18c>)
 8001bc2:	f001 fb9c 	bl	80032fe <HAL_GPIO_WritePin>

	display_digit(numberOfSegment[digit4]);
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <display_float+0x184>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <display_float+0x188>)
 8001bce:	5c9b      	ldrb	r3, [r3, r2]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fef9 	bl	80019c8 <display_digit>
	HAL_GPIO_WritePin(Digit4_pin_GPIO_Port, Digit4_pin_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2110      	movs	r1, #16
 8001bda:	4811      	ldr	r0, [pc, #68]	; (8001c20 <display_float+0x190>)
 8001bdc:	f001 fb8f 	bl	80032fe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f001 f83d 	bl	8002c60 <HAL_Delay>
	HAL_GPIO_WritePin(Digit4_pin_GPIO_Port, Digit4_pin_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2110      	movs	r1, #16
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <display_float+0x190>)
 8001bec:	f001 fb87 	bl	80032fe <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	10624dd3 	.word	0x10624dd3
 8001c00:	20000257 	.word	0x20000257
 8001c04:	51eb851f 	.word	0x51eb851f
 8001c08:	66666667 	.word	0x66666667
 8001c0c:	20000258 	.word	0x20000258
 8001c10:	20000259 	.word	0x20000259
 8001c14:	2000025a 	.word	0x2000025a
 8001c18:	20000038 	.word	0x20000038
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40010c00 	.word	0x40010c00

08001c24 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001c2c:	1d39      	adds	r1, r7, #4
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	2201      	movs	r2, #1
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <__io_putchar+0x20>)
 8001c36:	f002 fc56 	bl	80044e6 <HAL_UART_Transmit>

  return ch;
 8001c3a:	687b      	ldr	r3, [r7, #4]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200002a4 	.word	0x200002a4

08001c48 <set_up_led>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_up_led(status_t getting)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	if(getting == ds_temp)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d112      	bne.n	8001c7e <set_up_led+0x36>
	{
		HAL_GPIO_WritePin(led_temp_ds_GPIO_Port, led_temp_ds_Pin, SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c5e:	4837      	ldr	r0, [pc, #220]	; (8001d3c <set_up_led+0xf4>)
 8001c60:	f001 fb4d 	bl	80032fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_temp_dht_GPIO_Port, led_temp_dht_Pin, RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	4834      	ldr	r0, [pc, #208]	; (8001d3c <set_up_led+0xf4>)
 8001c6c:	f001 fb47 	bl	80032fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_humi_dht_GPIO_Port, led_humi_dht_Pin, RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c76:	4831      	ldr	r0, [pc, #196]	; (8001d3c <set_up_led+0xf4>)
 8001c78:	f001 fb41 	bl	80032fe <HAL_GPIO_WritePin>
 8001c7c:	e02a      	b.n	8001cd4 <set_up_led+0x8c>
	}
	else if(getting == dht_temp)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d112      	bne.n	8001caa <set_up_led+0x62>
	{
		HAL_GPIO_WritePin(led_temp_ds_GPIO_Port, led_temp_ds_Pin, RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8a:	482c      	ldr	r0, [pc, #176]	; (8001d3c <set_up_led+0xf4>)
 8001c8c:	f001 fb37 	bl	80032fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_temp_dht_GPIO_Port, led_temp_dht_Pin, SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c96:	4829      	ldr	r0, [pc, #164]	; (8001d3c <set_up_led+0xf4>)
 8001c98:	f001 fb31 	bl	80032fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_humi_dht_GPIO_Port, led_humi_dht_Pin, RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca2:	4826      	ldr	r0, [pc, #152]	; (8001d3c <set_up_led+0xf4>)
 8001ca4:	f001 fb2b 	bl	80032fe <HAL_GPIO_WritePin>
 8001ca8:	e014      	b.n	8001cd4 <set_up_led+0x8c>
	}
	else if(getting == dht_humi)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d111      	bne.n	8001cd4 <set_up_led+0x8c>
	{
		HAL_GPIO_WritePin(led_temp_ds_GPIO_Port, led_temp_ds_Pin, RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb6:	4821      	ldr	r0, [pc, #132]	; (8001d3c <set_up_led+0xf4>)
 8001cb8:	f001 fb21 	bl	80032fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_temp_dht_GPIO_Port, led_temp_dht_Pin, RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc2:	481e      	ldr	r0, [pc, #120]	; (8001d3c <set_up_led+0xf4>)
 8001cc4:	f001 fb1b 	bl	80032fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_humi_dht_GPIO_Port, led_humi_dht_Pin, SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	481b      	ldr	r0, [pc, #108]	; (8001d3c <set_up_led+0xf4>)
 8001cd0:	f001 fb15 	bl	80032fe <HAL_GPIO_WritePin>
	}
	if((temp_ds > warning_temp) || (temp_dht > warning_temp) || (humi_dht > warning_humi))
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <set_up_led+0xf8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <set_up_led+0xfc>)
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa16 	bl	8001110 <__aeabi_fcmpgt>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d115      	bne.n	8001d16 <set_up_led+0xce>
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <set_up_led+0x100>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <set_up_led+0xfc>)
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fa0b 	bl	8001110 <__aeabi_fcmpgt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10a      	bne.n	8001d16 <set_up_led+0xce>
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <set_up_led+0x104>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <set_up_led+0x108>)
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fa00 	bl	8001110 <__aeabi_fcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <set_up_led+0xdc>
	{
		HAL_GPIO_WritePin(led_warning_GPIO_Port, led_warning_Pin, SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <set_up_led+0xf4>)
 8001d1e:	f001 faee 	bl	80032fe <HAL_GPIO_WritePin>
 8001d22:	e006      	b.n	8001d32 <set_up_led+0xea>
	}
	else
	{
		HAL_GPIO_WritePin(led_warning_GPIO_Port, led_warning_Pin, RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <set_up_led+0xf4>)
 8001d2c:	f001 fae7 	bl	80032fe <HAL_GPIO_WritePin>
	}

}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40010c00 	.word	0x40010c00
 8001d40:	20000318 	.word	0x20000318
 8001d44:	20000048 	.word	0x20000048
 8001d48:	2000031c 	.word	0x2000031c
 8001d4c:	20000320 	.word	0x20000320
 8001d50:	2000004c 	.word	0x2000004c

08001d54 <uart_received_task>:

void uart_received_task(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
	printf("Receive: %s\n", uart_receive);
 8001d5a:	495a      	ldr	r1, [pc, #360]	; (8001ec4 <uart_received_task+0x170>)
 8001d5c:	485a      	ldr	r0, [pc, #360]	; (8001ec8 <uart_received_task+0x174>)
 8001d5e:	f007 fe5d 	bl	8009a1c <iprintf>
		if(uart_receive[0] == '*')
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <uart_received_task+0x170>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b2a      	cmp	r3, #42	; 0x2a
 8001d68:	d11b      	bne.n	8001da2 <uart_received_task+0x4e>
		{
			char get_uart[2];
			strncpy(get_uart, uart_receive+1, 2);
 8001d6a:	4958      	ldr	r1, [pc, #352]	; (8001ecc <uart_received_task+0x178>)
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	2202      	movs	r2, #2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f007 ffc1 	bl	8009cfa <strncpy>
			printf("Get uart to change period: %s\n", get_uart);
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4854      	ldr	r0, [pc, #336]	; (8001ed0 <uart_received_task+0x17c>)
 8001d80:	f007 fe4c 	bl	8009a1c <iprintf>
			period = atoi(get_uart);
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 fe07 	bl	800899c <atoi>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <uart_received_task+0x180>)
 8001d92:	6013      	str	r3, [r2, #0]
			printf("Changed period: %d\n", period);
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <uart_received_task+0x180>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	484f      	ldr	r0, [pc, #316]	; (8001ed8 <uart_received_task+0x184>)
 8001d9c:	f007 fe3e 	bl	8009a1c <iprintf>
 8001da0:	e081      	b.n	8001ea6 <uart_received_task+0x152>
		}
		else if(uart_receive[0] == '#')
 8001da2:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <uart_received_task+0x170>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b23      	cmp	r3, #35	; 0x23
 8001da8:	d120      	bne.n	8001dec <uart_received_task+0x98>
		{
			char get_uart[2];
			strncpy(get_uart, uart_receive+1, 2);
 8001daa:	4948      	ldr	r1, [pc, #288]	; (8001ecc <uart_received_task+0x178>)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2202      	movs	r2, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f007 ffa2 	bl	8009cfa <strncpy>
			printf("Get uart to change level warning: %s\n", get_uart);
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4848      	ldr	r0, [pc, #288]	; (8001edc <uart_received_task+0x188>)
 8001dbc:	f007 fe2e 	bl	8009a1c <iprintf>
			warning_temp = (float) atoi(get_uart);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f006 fdea 	bl	800899c <atoi>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe ff90 	bl	8000cf0 <__aeabi_i2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a43      	ldr	r2, [pc, #268]	; (8001ee0 <uart_received_task+0x18c>)
 8001dd4:	6013      	str	r3, [r2, #0]
			printf("Changed warning_temp: %d\n", (int) warning_temp);
 8001dd6:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <uart_received_task+0x18c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f9a2 	bl	8001124 <__aeabi_f2iz>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4619      	mov	r1, r3
 8001de4:	483f      	ldr	r0, [pc, #252]	; (8001ee4 <uart_received_task+0x190>)
 8001de6:	f007 fe19 	bl	8009a1c <iprintf>
 8001dea:	e05c      	b.n	8001ea6 <uart_received_task+0x152>
		}
		else if(uart_receive[0] == '0')
 8001dec:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <uart_received_task+0x170>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b30      	cmp	r3, #48	; 0x30
 8001df2:	d120      	bne.n	8001e36 <uart_received_task+0xe2>
		{
			char get_uart[2];
			strncpy(get_uart, uart_receive+1, 2);
 8001df4:	4935      	ldr	r1, [pc, #212]	; (8001ecc <uart_received_task+0x178>)
 8001df6:	463b      	mov	r3, r7
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f007 ff7d 	bl	8009cfa <strncpy>
			printf("Get uart to change level warning_humi: %s\n", get_uart);
 8001e00:	463b      	mov	r3, r7
 8001e02:	4619      	mov	r1, r3
 8001e04:	4838      	ldr	r0, [pc, #224]	; (8001ee8 <uart_received_task+0x194>)
 8001e06:	f007 fe09 	bl	8009a1c <iprintf>
			warning_humi = (float) atoi(get_uart);
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f006 fdc5 	bl	800899c <atoi>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe ff6b 	bl	8000cf0 <__aeabi_i2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a33      	ldr	r2, [pc, #204]	; (8001eec <uart_received_task+0x198>)
 8001e1e:	6013      	str	r3, [r2, #0]
			printf("Changed warning_humi: %d\n", (int) warning_humi);
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <uart_received_task+0x198>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f97d 	bl	8001124 <__aeabi_f2iz>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4830      	ldr	r0, [pc, #192]	; (8001ef0 <uart_received_task+0x19c>)
 8001e30:	f007 fdf4 	bl	8009a1c <iprintf>
 8001e34:	e037      	b.n	8001ea6 <uart_received_task+0x152>
		}
		else if(strcmp(uart_receive, "md1") == 0)
 8001e36:	492f      	ldr	r1, [pc, #188]	; (8001ef4 <uart_received_task+0x1a0>)
 8001e38:	4822      	ldr	r0, [pc, #136]	; (8001ec4 <uart_received_task+0x170>)
 8001e3a:	f7fe f989 	bl	8000150 <strcmp>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <uart_received_task+0xfe>
		{
			getting = ds_temp;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <uart_received_task+0x1a4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to ds18b20 temperature!\n");
 8001e4a:	482c      	ldr	r0, [pc, #176]	; (8001efc <uart_received_task+0x1a8>)
 8001e4c:	f007 fe6c 	bl	8009b28 <puts>
 8001e50:	e029      	b.n	8001ea6 <uart_received_task+0x152>
		}
		else if(strcmp(uart_receive, "md2") == 0)
 8001e52:	492b      	ldr	r1, [pc, #172]	; (8001f00 <uart_received_task+0x1ac>)
 8001e54:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <uart_received_task+0x170>)
 8001e56:	f7fe f97b 	bl	8000150 <strcmp>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <uart_received_task+0x11a>
		{
			getting = dht_temp;
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <uart_received_task+0x1a4>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to dht11 temperature!\n");
 8001e66:	4827      	ldr	r0, [pc, #156]	; (8001f04 <uart_received_task+0x1b0>)
 8001e68:	f007 fe5e 	bl	8009b28 <puts>
 8001e6c:	e01b      	b.n	8001ea6 <uart_received_task+0x152>
		}
		else if(strcmp(uart_receive, "md3") == 0)
 8001e6e:	4926      	ldr	r1, [pc, #152]	; (8001f08 <uart_received_task+0x1b4>)
 8001e70:	4814      	ldr	r0, [pc, #80]	; (8001ec4 <uart_received_task+0x170>)
 8001e72:	f7fe f96d 	bl	8000150 <strcmp>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <uart_received_task+0x136>
		{
			getting = dht_humi;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <uart_received_task+0x1a4>)
 8001e7e:	2202      	movs	r2, #2
 8001e80:	701a      	strb	r2, [r3, #0]
			printf("Changed mode to dht11 humidity!\n");
 8001e82:	4822      	ldr	r0, [pc, #136]	; (8001f0c <uart_received_task+0x1b8>)
 8001e84:	f007 fe50 	bl	8009b28 <puts>
 8001e88:	e00d      	b.n	8001ea6 <uart_received_task+0x152>
		}
		else
		{
			for(int i = 0; i < 3; i ++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e007      	b.n	8001ea0 <uart_received_task+0x14c>
			{
				uart_receive[i] = '\0';
 8001e90:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <uart_received_task+0x170>)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4413      	add	r3, r2
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 3; i ++)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	ddf4      	ble.n	8001e90 <uart_received_task+0x13c>
			}
		}
		set_up_led(getting);
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <uart_received_task+0x1a4>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fecc 	bl	8001c48 <set_up_led>
		HAL_UART_Receive_IT(&huart2, (uint8_t *) uart_receive, 3);
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <uart_received_task+0x170>)
 8001eb4:	4816      	ldr	r0, [pc, #88]	; (8001f10 <uart_received_task+0x1bc>)
 8001eb6:	f002 fba8 	bl	800460a <HAL_UART_Receive_IT>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000328 	.word	0x20000328
 8001ec8:	0800d508 	.word	0x0800d508
 8001ecc:	20000329 	.word	0x20000329
 8001ed0:	0800d518 	.word	0x0800d518
 8001ed4:	20000044 	.word	0x20000044
 8001ed8:	0800d538 	.word	0x0800d538
 8001edc:	0800d54c 	.word	0x0800d54c
 8001ee0:	20000048 	.word	0x20000048
 8001ee4:	0800d574 	.word	0x0800d574
 8001ee8:	0800d590 	.word	0x0800d590
 8001eec:	2000004c 	.word	0x2000004c
 8001ef0:	0800d5bc 	.word	0x0800d5bc
 8001ef4:	0800d5d8 	.word	0x0800d5d8
 8001ef8:	20000324 	.word	0x20000324
 8001efc:	0800d5dc 	.word	0x0800d5dc
 8001f00:	0800d604 	.word	0x0800d604
 8001f04:	0800d608 	.word	0x0800d608
 8001f08:	0800d62c 	.word	0x0800d62c
 8001f0c:	0800d630 	.word	0x0800d630
 8001f10:	200002a4 	.word	0x200002a4

08001f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f18:	f000 fe70 	bl	8002bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f1c:	f000 f868 	bl	8001ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f20:	f000 f922 	bl	8002168 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f24:	f000 f8aa 	bl	800207c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001f28:	f000 f8f4 	bl	8002114 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *) uart_receive, 3);
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	491d      	ldr	r1, [pc, #116]	; (8001fa4 <main+0x90>)
 8001f30:	481d      	ldr	r0, [pc, #116]	; (8001fa8 <main+0x94>)
 8001f32:	f002 fb6a 	bl	800460a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f36:	f002 ffc1 	bl	8004ebc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semaphore_uart */
  semaphore_uartHandle = osSemaphoreNew(1, 1, &semaphore_uart_attributes);
 8001f3a:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <main+0x98>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f003 fa7a 	bl	8005438 <osSemaphoreNew>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <main+0x9c>)
 8001f48:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of timer_get_key_pad */
  timer_get_key_padHandle = osTimerNew(cb_timer_get_key_pad, osTimerOnce, NULL, &timer_get_key_pad_attributes);
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <main+0xa0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4819      	ldr	r0, [pc, #100]	; (8001fb8 <main+0xa4>)
 8001f52:	f003 f963 	bl	800521c <osTimerNew>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <main+0xa8>)
 8001f5a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of read_data */
  read_dataHandle = osThreadNew(read_data_Task, NULL, &read_data_attributes);
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <main+0xac>)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4818      	ldr	r0, [pc, #96]	; (8001fc4 <main+0xb0>)
 8001f62:	f003 f839 	bl	8004fd8 <osThreadNew>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <main+0xb4>)
 8001f6a:	6013      	str	r3, [r2, #0]

  /* creation of button_set_mode */
  button_set_modeHandle = osThreadNew(button_set_mode_Task, NULL, &button_set_mode_attributes);
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <main+0xb8>)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4817      	ldr	r0, [pc, #92]	; (8001fd0 <main+0xbc>)
 8001f72:	f003 f831 	bl	8004fd8 <osThreadNew>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <main+0xc0>)
 8001f7a:	6013      	str	r3, [r2, #0]

  /* creation of key_pad */
  key_padHandle = osThreadNew(key_pad_Task, NULL, &key_pad_attributes);
 8001f7c:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <main+0xc4>)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4816      	ldr	r0, [pc, #88]	; (8001fdc <main+0xc8>)
 8001f82:	f003 f829 	bl	8004fd8 <osThreadNew>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <main+0xcc>)
 8001f8a:	6013      	str	r3, [r2, #0]

  /* creation of display_led7seg */
  display_led7segHandle = osThreadNew(display_led7seg_Task, NULL, &display_led7seg_attributes);
 8001f8c:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <main+0xd0>)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4815      	ldr	r0, [pc, #84]	; (8001fe8 <main+0xd4>)
 8001f92:	f003 f821 	bl	8004fd8 <osThreadNew>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <main+0xd8>)
 8001f9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f9c:	f002 ffc0 	bl	8004f20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <main+0x8c>
 8001fa2:	bf00      	nop
 8001fa4:	20000328 	.word	0x20000328
 8001fa8:	200002a4 	.word	0x200002a4
 8001fac:	0800d7f4 	.word	0x0800d7f4
 8001fb0:	200002fc 	.word	0x200002fc
 8001fb4:	0800d7e4 	.word	0x0800d7e4
 8001fb8:	08002725 	.word	0x08002725
 8001fbc:	200002f8 	.word	0x200002f8
 8001fc0:	0800d754 	.word	0x0800d754
 8001fc4:	08002299 	.word	0x08002299
 8001fc8:	200002e8 	.word	0x200002e8
 8001fcc:	0800d778 	.word	0x0800d778
 8001fd0:	080023b5 	.word	0x080023b5
 8001fd4:	200002ec 	.word	0x200002ec
 8001fd8:	0800d79c 	.word	0x0800d79c
 8001fdc:	08002471 	.word	0x08002471
 8001fe0:	200002f0 	.word	0x200002f0
 8001fe4:	0800d7c0 	.word	0x0800d7c0
 8001fe8:	080026c9 	.word	0x080026c9
 8001fec:	200002f4 	.word	0x200002f4

08001ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b090      	sub	sp, #64	; 0x40
 8001ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff6:	f107 0318 	add.w	r3, r7, #24
 8001ffa:	2228      	movs	r2, #40	; 0x28
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f006 fe01 	bl	8008c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002020:	2301      	movs	r3, #1
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002024:	2302      	movs	r3, #2
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800202e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	4618      	mov	r0, r3
 800203a:	f001 f979 	bl	8003330 <HAL_RCC_OscConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002044:	f000 fba6 	bl	8002794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002048:	230f      	movs	r3, #15
 800204a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204c:	2302      	movs	r3, #2
 800204e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2102      	movs	r1, #2
 8002062:	4618      	mov	r0, r3
 8002064:	f001 fbe6 	bl	8003834 <HAL_RCC_ClockConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800206e:	f000 fb91 	bl	8002794 <Error_Handler>
  }
}
 8002072:	bf00      	nop
 8002074:	3740      	adds	r7, #64	; 0x40
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_TIM2_Init+0x94>)
 800209a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM2_Init+0x94>)
 80020a2:	2248      	movs	r2, #72	; 0x48
 80020a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_TIM2_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <MX_TIM2_Init+0x94>)
 80020ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM2_Init+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <MX_TIM2_Init+0x94>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c0:	4813      	ldr	r0, [pc, #76]	; (8002110 <MX_TIM2_Init+0x94>)
 80020c2:	f001 fd7f 	bl	8003bc4 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020cc:	f000 fb62 	bl	8002794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <MX_TIM2_Init+0x94>)
 80020de:	f001 ff65 	bl	8003fac <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020e8:	f000 fb54 	bl	8002794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_TIM2_Init+0x94>)
 80020fa:	f002 f937 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002104:	f000 fb46 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000025c 	.word	0x2000025c

08002114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <MX_USART2_UART_Init+0x50>)
 800211c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 8002120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_USART2_UART_Init+0x4c>)
 800214c:	f002 f97e 	bl	800444c <HAL_UART_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002156:	f000 fb1d 	bl	8002794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200002a4 	.word	0x200002a4
 8002164:	40004400 	.word	0x40004400

08002168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	f107 0310 	add.w	r3, r7, #16
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217c:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <MX_GPIO_Init+0x10c>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <MX_GPIO_Init+0x10c>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <MX_GPIO_Init+0x10c>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002194:	4b37      	ldr	r3, [pc, #220]	; (8002274 <MX_GPIO_Init+0x10c>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a36      	ldr	r2, [pc, #216]	; (8002274 <MX_GPIO_Init+0x10c>)
 800219a:	f043 0320 	orr.w	r3, r3, #32
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <MX_GPIO_Init+0x10c>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <MX_GPIO_Init+0x10c>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a30      	ldr	r2, [pc, #192]	; (8002274 <MX_GPIO_Init+0x10c>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <MX_GPIO_Init+0x10c>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <MX_GPIO_Init+0x10c>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <MX_GPIO_Init+0x10c>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b28      	ldr	r3, [pc, #160]	; (8002274 <MX_GPIO_Init+0x10c>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dht11_Pin|ds18b20_Pin, GPIO_PIN_SET);
 80021dc:	2201      	movs	r2, #1
 80021de:	2103      	movs	r1, #3
 80021e0:	4825      	ldr	r0, [pc, #148]	; (8002278 <MX_GPIO_Init+0x110>)
 80021e2:	f001 f88c 	bl	80032fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW4_Pin|Digit1_pin_Pin|A_pin_Pin|F_pin_Pin
 80021e6:	2200      	movs	r2, #0
 80021e8:	f649 6180 	movw	r1, #40576	; 0x9e80
 80021ec:	4822      	ldr	r0, [pc, #136]	; (8002278 <MX_GPIO_Init+0x110>)
 80021ee:	f001 f886 	bl	80032fe <HAL_GPIO_WritePin>
                          |Digit2_pin_Pin|Digit3_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW3_Pin|ROW2_Pin|ROW1_Pin|led_humi_dht_Pin
 80021f2:	2200      	movs	r2, #0
 80021f4:	f24f 71fb 	movw	r1, #63483	; 0xf7fb
 80021f8:	4820      	ldr	r0, [pc, #128]	; (800227c <MX_GPIO_Init+0x114>)
 80021fa:	f001 f880 	bl	80032fe <HAL_GPIO_WritePin>
                          |led_temp_dht_Pin|led_temp_ds_Pin|led_warning_Pin|B_pin_Pin
                          |Digit4_pin_Pin|G_pin_Pin|C_pin_Pin|Dot_pin_Pin
                          |D_pin_Pin|E_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : but_temp_ds_Pin but_temp_dht_Pin but_humi_dht_Pin */
  GPIO_InitStruct.Pin = but_temp_ds_Pin|but_temp_dht_Pin|but_humi_dht_Pin;
 80021fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002208:	2301      	movs	r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4619      	mov	r1, r3
 8002212:	481b      	ldr	r0, [pc, #108]	; (8002280 <MX_GPIO_Init+0x118>)
 8002214:	f000 fed8 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : dht11_Pin ds18b20_Pin ROW4_Pin Digit1_pin_Pin
                           A_pin_Pin F_pin_Pin Digit2_pin_Pin Digit3_pin_Pin */
  GPIO_InitStruct.Pin = dht11_Pin|ds18b20_Pin|ROW4_Pin|Digit1_pin_Pin
 8002218:	f649 6383 	movw	r3, #40579	; 0x9e83
 800221c:	613b      	str	r3, [r7, #16]
                          |A_pin_Pin|F_pin_Pin|Digit2_pin_Pin|Digit3_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2302      	movs	r3, #2
 8002228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4619      	mov	r1, r3
 8002230:	4811      	ldr	r0, [pc, #68]	; (8002278 <MX_GPIO_Init+0x110>)
 8002232:	f000 fec9 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN3_Pin COLUMN2_Pin COLUMN1_Pin */
  GPIO_InitStruct.Pin = COLUMN3_Pin|COLUMN2_Pin|COLUMN1_Pin;
 8002236:	2370      	movs	r3, #112	; 0x70
 8002238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4619      	mov	r1, r3
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <MX_GPIO_Init+0x110>)
 800224a:	f000 febd 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW3_Pin ROW2_Pin ROW1_Pin led_humi_dht_Pin
                           led_temp_dht_Pin led_temp_ds_Pin led_warning_Pin B_pin_Pin
                           Digit4_pin_Pin G_pin_Pin C_pin_Pin Dot_pin_Pin
                           D_pin_Pin E_pin_Pin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin|led_humi_dht_Pin
 800224e:	f24f 73fb 	movw	r3, #63483	; 0xf7fb
 8002252:	613b      	str	r3, [r7, #16]
                          |led_temp_dht_Pin|led_temp_ds_Pin|led_warning_Pin|B_pin_Pin
                          |Digit4_pin_Pin|G_pin_Pin|C_pin_Pin|Dot_pin_Pin
                          |D_pin_Pin|E_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2302      	movs	r3, #2
 800225e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4619      	mov	r1, r3
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_GPIO_Init+0x114>)
 8002268:	f000 feae 	bl	8002fc8 <HAL_GPIO_Init>

}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	40010800 	.word	0x40010800
 800227c:	40010c00 	.word	0x40010c00
 8002280:	40011000 	.word	0x40011000

08002284 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
		UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
		   the HAL_UART_RxCpltCallback could be implemented in the user file
	*/
	uart_received_task();
 800228c:	f7ff fd62 	bl	8001d54 <uart_received_task>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <read_data_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_read_data_Task */
void read_data_Task(void *argument)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
		DS18B20_Init(&DS1, &htim2, ds18b20_GPIO_Port, ds18b20_Pin);
 80022a0:	2302      	movs	r3, #2
 80022a2:	4a33      	ldr	r2, [pc, #204]	; (8002370 <read_data_Task+0xd8>)
 80022a4:	4933      	ldr	r1, [pc, #204]	; (8002374 <read_data_Task+0xdc>)
 80022a6:	4834      	ldr	r0, [pc, #208]	; (8002378 <read_data_Task+0xe0>)
 80022a8:	f7ff faae 	bl	8001808 <DS18B20_Init>
		HAL_Delay(2000);
 80022ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022b0:	f000 fcd6 	bl	8002c60 <HAL_Delay>
		uint32_t tick = osKernelGetTickCount();
 80022b4:	f002 fe68 	bl	8004f88 <osKernelGetTickCount>
 80022b8:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		osSemaphoreAcquire(semaphore_uartHandle, osWaitForever);
 80022ba:	4b30      	ldr	r3, [pc, #192]	; (800237c <read_data_Task+0xe4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f04f 31ff 	mov.w	r1, #4294967295
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f954 	bl	8005570 <osSemaphoreAcquire>
		printf("Tick:%ld\n", tick);
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	482d      	ldr	r0, [pc, #180]	; (8002380 <read_data_Task+0xe8>)
 80022cc:	f007 fba6 	bl	8009a1c <iprintf>
		tick = tick + period * 1000;
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <read_data_Task+0xec>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
		printf("In read_sensor_task!\n");
 80022e4:	4828      	ldr	r0, [pc, #160]	; (8002388 <read_data_Task+0xf0>)
 80022e6:	f007 fc1f 	bl	8009b28 <puts>
		temp_ds = DS18B20_ReadTemp(&DS1);
 80022ea:	4823      	ldr	r0, [pc, #140]	; (8002378 <read_data_Task+0xe0>)
 80022ec:	f7ff faa3 	bl	8001836 <DS18B20_ReadTemp>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4a26      	ldr	r2, [pc, #152]	; (800238c <read_data_Task+0xf4>)
 80022f4:	6013      	str	r3, [r2, #0]
		printf("Read DS12B20!\n");
 80022f6:	4826      	ldr	r0, [pc, #152]	; (8002390 <read_data_Task+0xf8>)
 80022f8:	f007 fc16 	bl	8009b28 <puts>
		DHT_GetData(&DHT11_Data);
 80022fc:	4825      	ldr	r0, [pc, #148]	; (8002394 <read_data_Task+0xfc>)
 80022fe:	f7ff f895 	bl	800142c <DHT_GetData>
		temp_dht = DHT11_Data.Temperature;
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <read_data_Task+0xfc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a24      	ldr	r2, [pc, #144]	; (8002398 <read_data_Task+0x100>)
 8002308:	6013      	str	r3, [r2, #0]
		humi_dht = DHT11_Data.Humidity;
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <read_data_Task+0xfc>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a23      	ldr	r2, [pc, #140]	; (800239c <read_data_Task+0x104>)
 8002310:	6013      	str	r3, [r2, #0]
		printf("Read DHT11!\n");
 8002312:	4823      	ldr	r0, [pc, #140]	; (80023a0 <read_data_Task+0x108>)
 8002314:	f007 fc08 	bl	8009b28 <puts>
		printf("Value temp_ds:%f!\n", temp_ds);
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <read_data_Task+0xf4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f88d 	bl	800043c <__aeabi_f2d>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	481f      	ldr	r0, [pc, #124]	; (80023a4 <read_data_Task+0x10c>)
 8002328:	f007 fb78 	bl	8009a1c <iprintf>
		printf("Value temp_dht:%f!\n", temp_dht);
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <read_data_Task+0x100>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f883 	bl	800043c <__aeabi_f2d>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	481b      	ldr	r0, [pc, #108]	; (80023a8 <read_data_Task+0x110>)
 800233c:	f007 fb6e 	bl	8009a1c <iprintf>
		printf("Value humi_dht:%f!\n", humi_dht);
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <read_data_Task+0x104>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f879 	bl	800043c <__aeabi_f2d>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4817      	ldr	r0, [pc, #92]	; (80023ac <read_data_Task+0x114>)
 8002350:	f007 fb64 	bl	8009a1c <iprintf>
		osSemaphoreRelease(semaphore_uartHandle);
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <read_data_Task+0xe4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f003 f96f 	bl	800563c <osSemaphoreRelease>
		set_up_led(getting);
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <read_data_Task+0x118>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc70 	bl	8001c48 <set_up_led>
		osDelayUntil(tick);
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f002 ff0d 	bl	8005188 <osDelayUntil>
		osSemaphoreAcquire(semaphore_uartHandle, osWaitForever);
 800236e:	e7a4      	b.n	80022ba <read_data_Task+0x22>
 8002370:	40010800 	.word	0x40010800
 8002374:	2000025c 	.word	0x2000025c
 8002378:	20000300 	.word	0x20000300
 800237c:	200002fc 	.word	0x200002fc
 8002380:	0800d650 	.word	0x0800d650
 8002384:	20000044 	.word	0x20000044
 8002388:	0800d65c 	.word	0x0800d65c
 800238c:	20000318 	.word	0x20000318
 8002390:	0800d674 	.word	0x0800d674
 8002394:	20000310 	.word	0x20000310
 8002398:	2000031c 	.word	0x2000031c
 800239c:	20000320 	.word	0x20000320
 80023a0:	0800d684 	.word	0x0800d684
 80023a4:	0800d690 	.word	0x0800d690
 80023a8:	0800d6a4 	.word	0x0800d6a4
 80023ac:	0800d6b8 	.word	0x0800d6b8
 80023b0:	20000324 	.word	0x20000324

080023b4 <button_set_mode_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_set_mode_Task */
void button_set_mode_Task(void *argument)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_set_mode_Task */
  /* Infinite loop */
  for(;;)
  {
		osSemaphoreAcquire(semaphore_uartHandle, osWaitForever);
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <button_set_mode_Task+0xa4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 f8d3 	bl	8005570 <osSemaphoreAcquire>
		if(HAL_GPIO_ReadPin(but_temp_ds_GPIO_Port, but_temp_ds_Pin) == 0)
 80023ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ce:	4823      	ldr	r0, [pc, #140]	; (800245c <button_set_mode_Task+0xa8>)
 80023d0:	f000 ff7e 	bl	80032d0 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <button_set_mode_Task+0x3c>
		{
			if(getting != ds_temp)
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <button_set_mode_Task+0xac>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d02b      	beq.n	800243a <button_set_mode_Task+0x86>
			{
				getting = ds_temp;
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <button_set_mode_Task+0xac>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
				printf("Changed mode to ds18b20 temperature!\n");
 80023e8:	481e      	ldr	r0, [pc, #120]	; (8002464 <button_set_mode_Task+0xb0>)
 80023ea:	f007 fb9d 	bl	8009b28 <puts>
 80023ee:	e024      	b.n	800243a <button_set_mode_Task+0x86>
			}
		}
		else if(HAL_GPIO_ReadPin(but_temp_dht_GPIO_Port, but_temp_dht_Pin) == 0)
 80023f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023f4:	4819      	ldr	r0, [pc, #100]	; (800245c <button_set_mode_Task+0xa8>)
 80023f6:	f000 ff6b 	bl	80032d0 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <button_set_mode_Task+0x62>
		{
			if(getting != dht_temp)
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <button_set_mode_Task+0xac>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d018      	beq.n	800243a <button_set_mode_Task+0x86>
			{
				getting = dht_temp;
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <button_set_mode_Task+0xac>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
				printf("Changed mode to dht11 temperature!\n");
 800240e:	4816      	ldr	r0, [pc, #88]	; (8002468 <button_set_mode_Task+0xb4>)
 8002410:	f007 fb8a 	bl	8009b28 <puts>
 8002414:	e011      	b.n	800243a <button_set_mode_Task+0x86>
			}
		}
		else if(HAL_GPIO_ReadPin(but_humi_dht_GPIO_Port, but_humi_dht_Pin) == 0)
 8002416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800241a:	4810      	ldr	r0, [pc, #64]	; (800245c <button_set_mode_Task+0xa8>)
 800241c:	f000 ff58 	bl	80032d0 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <button_set_mode_Task+0x86>
		{
			if(getting != dht_humi)
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <button_set_mode_Task+0xac>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d005      	beq.n	800243a <button_set_mode_Task+0x86>
			{
				getting = dht_humi;
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <button_set_mode_Task+0xac>)
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
				printf("Changed mode to dht11 humidity!\n");
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <button_set_mode_Task+0xb8>)
 8002436:	f007 fb77 	bl	8009b28 <puts>
			}
		}
		osSemaphoreRelease(semaphore_uartHandle);
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <button_set_mode_Task+0xa4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f8fc 	bl	800563c <osSemaphoreRelease>
		set_up_led(getting);
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <button_set_mode_Task+0xac>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fbfd 	bl	8001c48 <set_up_led>
		osDelay(10);
 800244e:	200a      	movs	r0, #10
 8002450:	f002 fe6c 	bl	800512c <osDelay>
		osSemaphoreAcquire(semaphore_uartHandle, osWaitForever);
 8002454:	e7b2      	b.n	80023bc <button_set_mode_Task+0x8>
 8002456:	bf00      	nop
 8002458:	200002fc 	.word	0x200002fc
 800245c:	40011000 	.word	0x40011000
 8002460:	20000324 	.word	0x20000324
 8002464:	0800d5dc 	.word	0x0800d5dc
 8002468:	0800d608 	.word	0x0800d608
 800246c:	0800d630 	.word	0x0800d630

08002470 <key_pad_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_key_pad_Task */
void key_pad_Task(void *argument)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN key_pad_Task */
	char set_up[3];// = {'\0', '\0', '\0'};
	int index_key = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
	char key;
  /* Infinite loop */
  for(;;)
  {
	  key = getKey();
 800247c:	f7ff fa28 	bl	80018d0 <getKey>
 8002480:	4603      	mov	r3, r0
 8002482:	72fb      	strb	r3, [r7, #11]
	  if(key)
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80f9 	beq.w	800267e <key_pad_Task+0x20e>
	  {
		  osSemaphoreAcquire(semaphore_uartHandle, osWaitForever);
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <key_pad_Task+0x218>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	4618      	mov	r0, r3
 8002496:	f003 f86b 	bl	8005570 <osSemaphoreAcquire>
		  printf("Key: %c\n", key);
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	4619      	mov	r1, r3
 800249e:	487b      	ldr	r0, [pc, #492]	; (800268c <key_pad_Task+0x21c>)
 80024a0:	f007 fabc 	bl	8009a1c <iprintf>
		  if(key == '*')
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	2b2a      	cmp	r3, #42	; 0x2a
 80024a8:	d111      	bne.n	80024ce <key_pad_Task+0x5e>
		  {
			  printf("Change period....\n");
 80024aa:	4879      	ldr	r0, [pc, #484]	; (8002690 <key_pad_Task+0x220>)
 80024ac:	f007 fb3c 	bl	8009b28 <puts>
			  getting_period = 1;
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <key_pad_Task+0x224>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
			  osTimerStart(timer_get_key_padHandle,5000);
 80024b6:	4b78      	ldr	r3, [pc, #480]	; (8002698 <key_pad_Task+0x228>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 ff30 	bl	8005324 <osTimerStart>
			  index_key = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
			  key = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	72fb      	strb	r3, [r7, #11]
 80024cc:	e0cb      	b.n	8002666 <key_pad_Task+0x1f6>
		  }
		  else if(key == '#')
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	2b23      	cmp	r3, #35	; 0x23
 80024d2:	d114      	bne.n	80024fe <key_pad_Task+0x8e>
		  {
			  printf("Change level....\n");
 80024d4:	4871      	ldr	r0, [pc, #452]	; (800269c <key_pad_Task+0x22c>)
 80024d6:	f007 fb27 	bl	8009b28 <puts>
			  getting_warning = 1;
 80024da:	4b71      	ldr	r3, [pc, #452]	; (80026a0 <key_pad_Task+0x230>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
			  getting_period = 0;
 80024e0:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <key_pad_Task+0x224>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
			  osTimerStart(timer_get_key_padHandle,5000);
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <key_pad_Task+0x228>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 ff18 	bl	8005324 <osTimerStart>
			  index_key = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
			  key = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	72fb      	strb	r3, [r7, #11]
 80024fc:	e0b3      	b.n	8002666 <key_pad_Task+0x1f6>
		  }
		  else if((key == '0') && (getting_period == 0) && (getting_warning == 0) && (getting_warning_humi == 0))
 80024fe:	7afb      	ldrb	r3, [r7, #11]
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d126      	bne.n	8002552 <key_pad_Task+0xe2>
 8002504:	4b63      	ldr	r3, [pc, #396]	; (8002694 <key_pad_Task+0x224>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01f      	beq.n	8002552 <key_pad_Task+0xe2>
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <key_pad_Task+0x230>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d018      	beq.n	8002552 <key_pad_Task+0xe2>
 8002520:	4b60      	ldr	r3, [pc, #384]	; (80026a4 <key_pad_Task+0x234>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d011      	beq.n	8002552 <key_pad_Task+0xe2>
		  {
			  printf("Change warning humidity....\n");
 800252e:	485e      	ldr	r0, [pc, #376]	; (80026a8 <key_pad_Task+0x238>)
 8002530:	f007 fafa 	bl	8009b28 <puts>
			  getting_warning_humi = 1;
 8002534:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <key_pad_Task+0x234>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
			  osTimerStart(timer_get_key_padHandle,5000);
 800253a:	4b57      	ldr	r3, [pc, #348]	; (8002698 <key_pad_Task+0x228>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002542:	4618      	mov	r0, r3
 8002544:	f002 feee 	bl	8005324 <osTimerStart>
			  index_key = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
			  key = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	72fb      	strb	r3, [r7, #11]
 8002550:	e089      	b.n	8002666 <key_pad_Task+0x1f6>
		  }
		  else if(getting_period)
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <key_pad_Task+0x224>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d024      	beq.n	80025a4 <key_pad_Task+0x134>
		  {
			  set_up[index_key] = key;
 800255a:	f107 0208 	add.w	r2, r7, #8
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	7afa      	ldrb	r2, [r7, #11]
 8002564:	701a      	strb	r2, [r3, #0]
			  index_key ++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3301      	adds	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
			  if(index_key > 1)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	dd79      	ble.n	8002666 <key_pad_Task+0x1f6>
			  {
				  period = atoi(set_up);
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	4618      	mov	r0, r3
 8002578:	f006 fa10 	bl	800899c <atoi>
 800257c:	4603      	mov	r3, r0
 800257e:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <key_pad_Task+0x23c>)
 8002580:	6013      	str	r3, [r2, #0]
				  printf("Changed period: %d\n", period);
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <key_pad_Task+0x23c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	4849      	ldr	r0, [pc, #292]	; (80026b0 <key_pad_Task+0x240>)
 800258a:	f007 fa47 	bl	8009a1c <iprintf>
				  osTimerStop(timer_get_key_padHandle);
 800258e:	4b42      	ldr	r3, [pc, #264]	; (8002698 <key_pad_Task+0x228>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 ff06 	bl	80053a4 <osTimerStop>
				  getting_period = 0;
 8002598:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <key_pad_Task+0x224>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
				  index_key = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e060      	b.n	8002666 <key_pad_Task+0x1f6>
			  }
		  }
		  else if(getting_warning)
 80025a4:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <key_pad_Task+0x230>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d02c      	beq.n	8002606 <key_pad_Task+0x196>
		  {
			  set_up[index_key] = key;
 80025ac:	f107 0208 	add.w	r2, r7, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	7afa      	ldrb	r2, [r7, #11]
 80025b6:	701a      	strb	r2, [r3, #0]
			  index_key ++;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
			  if(index_key > 1)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	dd50      	ble.n	8002666 <key_pad_Task+0x1f6>
			  {
				  warning_temp = (float) atoi(set_up);
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	4618      	mov	r0, r3
 80025ca:	f006 f9e7 	bl	800899c <atoi>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fb8d 	bl	8000cf0 <__aeabi_i2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a36      	ldr	r2, [pc, #216]	; (80026b4 <key_pad_Task+0x244>)
 80025da:	6013      	str	r3, [r2, #0]
				  printf("Changed warning_temp: %d\n", (int) warning_temp);
 80025dc:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <key_pad_Task+0x244>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fd9f 	bl	8001124 <__aeabi_f2iz>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4833      	ldr	r0, [pc, #204]	; (80026b8 <key_pad_Task+0x248>)
 80025ec:	f007 fa16 	bl	8009a1c <iprintf>
				  osTimerStop(timer_get_key_padHandle);
 80025f0:	4b29      	ldr	r3, [pc, #164]	; (8002698 <key_pad_Task+0x228>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fed5 	bl	80053a4 <osTimerStop>
				  getting_warning = 0;
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <key_pad_Task+0x230>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
				  index_key = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e02f      	b.n	8002666 <key_pad_Task+0x1f6>
			  }
		  }
		  else if(getting_warning_humi)
 8002606:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <key_pad_Task+0x234>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02b      	beq.n	8002666 <key_pad_Task+0x1f6>
		  {
			  set_up[index_key] = key;
 800260e:	f107 0208 	add.w	r2, r7, #8
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	7afa      	ldrb	r2, [r7, #11]
 8002618:	701a      	strb	r2, [r3, #0]
			  index_key ++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
			  if(index_key > 1)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	dd1f      	ble.n	8002666 <key_pad_Task+0x1f6>
			  {
				  warning_humi = (float) atoi(set_up);
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	4618      	mov	r0, r3
 800262c:	f006 f9b6 	bl	800899c <atoi>
 8002630:	4603      	mov	r3, r0
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fb5c 	bl	8000cf0 <__aeabi_i2f>
 8002638:	4603      	mov	r3, r0
 800263a:	4a20      	ldr	r2, [pc, #128]	; (80026bc <key_pad_Task+0x24c>)
 800263c:	6013      	str	r3, [r2, #0]
				  printf("Changed warning_humi: %d\n", (int) warning_humi);
 800263e:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <key_pad_Task+0x24c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fd6e 	bl	8001124 <__aeabi_f2iz>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	481c      	ldr	r0, [pc, #112]	; (80026c0 <key_pad_Task+0x250>)
 800264e:	f007 f9e5 	bl	8009a1c <iprintf>
				  osTimerStop(timer_get_key_padHandle);
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <key_pad_Task+0x228>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fea4 	bl	80053a4 <osTimerStop>
				  getting_warning_humi = 0;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <key_pad_Task+0x234>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
				  index_key = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
			  }
		  }
		  osSemaphoreRelease(semaphore_uartHandle);
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <key_pad_Task+0x218>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f002 ffe6 	bl	800563c <osSemaphoreRelease>
		  set_up_led(getting);
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <key_pad_Task+0x254>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fae7 	bl	8001c48 <set_up_led>
		  key = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	72fb      	strb	r3, [r7, #11]
	  }

	  osDelay(10);
 800267e:	200a      	movs	r0, #10
 8002680:	f002 fd54 	bl	800512c <osDelay>
	  key = getKey();
 8002684:	e6fa      	b.n	800247c <key_pad_Task+0xc>
 8002686:	bf00      	nop
 8002688:	200002fc 	.word	0x200002fc
 800268c:	0800d6cc 	.word	0x0800d6cc
 8002690:	0800d6d8 	.word	0x0800d6d8
 8002694:	20000325 	.word	0x20000325
 8002698:	200002f8 	.word	0x200002f8
 800269c:	0800d6ec 	.word	0x0800d6ec
 80026a0:	20000326 	.word	0x20000326
 80026a4:	20000327 	.word	0x20000327
 80026a8:	0800d700 	.word	0x0800d700
 80026ac:	20000044 	.word	0x20000044
 80026b0:	0800d538 	.word	0x0800d538
 80026b4:	20000048 	.word	0x20000048
 80026b8:	0800d574 	.word	0x0800d574
 80026bc:	2000004c 	.word	0x2000004c
 80026c0:	0800d5bc 	.word	0x0800d5bc
 80026c4:	20000324 	.word	0x20000324

080026c8 <display_led7seg_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_display_led7seg_Task */
void display_led7seg_Task(void *argument)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN display_led7seg_Task */
  /* Infinite loop */
  for(;;)
  {
	  if(getting == ds_temp)
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <display_led7seg_Task+0x4c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <display_led7seg_Task+0x1c>
	  {
		  display_float(temp_ds);
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <display_led7seg_Task+0x50>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f9d7 	bl	8001a90 <display_float>
 80026e2:	e012      	b.n	800270a <display_led7seg_Task+0x42>
	  }
	  else if(getting == dht_temp)
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <display_led7seg_Task+0x4c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <display_led7seg_Task+0x30>
	  {
		  display_float(temp_dht);
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <display_led7seg_Task+0x54>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f9cd 	bl	8001a90 <display_float>
 80026f6:	e008      	b.n	800270a <display_led7seg_Task+0x42>
	  }
	  else if(getting == dht_humi)
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <display_led7seg_Task+0x4c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d104      	bne.n	800270a <display_led7seg_Task+0x42>
	  {
		  display_float(humi_dht);
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <display_led7seg_Task+0x58>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f9c3 	bl	8001a90 <display_float>
	  }
	  osDelay(10);
 800270a:	200a      	movs	r0, #10
 800270c:	f002 fd0e 	bl	800512c <osDelay>
	  if(getting == ds_temp)
 8002710:	e7de      	b.n	80026d0 <display_led7seg_Task+0x8>
 8002712:	bf00      	nop
 8002714:	20000324 	.word	0x20000324
 8002718:	20000318 	.word	0x20000318
 800271c:	2000031c 	.word	0x2000031c
 8002720:	20000320 	.word	0x20000320

08002724 <cb_timer_get_key_pad>:
  /* USER CODE END display_led7seg_Task */
}

/* cb_timer_get_key_pad function */
void cb_timer_get_key_pad(void *argument)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cb_timer_get_key_pad */
	osSemaphoreAcquire(semaphore_uartHandle, osWaitForever);
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <cb_timer_get_key_pad+0x3c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	4618      	mov	r0, r3
 8002736:	f002 ff1b 	bl	8005570 <osSemaphoreAcquire>
	printf("Out setting!\n");
 800273a:	480a      	ldr	r0, [pc, #40]	; (8002764 <cb_timer_get_key_pad+0x40>)
 800273c:	f007 f9f4 	bl	8009b28 <puts>
	osSemaphoreRelease(semaphore_uartHandle);
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <cb_timer_get_key_pad+0x3c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f002 ff79 	bl	800563c <osSemaphoreRelease>
	getting_period = 0;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <cb_timer_get_key_pad+0x44>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
	getting_warning = 0;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <cb_timer_get_key_pad+0x48>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
  /* USER CODE END cb_timer_get_key_pad */
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002fc 	.word	0x200002fc
 8002764:	0800d71c 	.word	0x0800d71c
 8002768:	20000325 	.word	0x20000325
 800276c:	20000326 	.word	0x20000326

08002770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002782:	f000 fa51 	bl	8002c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00

08002794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800279c:	e7fe      	b.n	800279c <Error_Handler+0x8>
	...

080027a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <HAL_MspInit+0x68>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_MspInit+0x68>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6193      	str	r3, [r2, #24]
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_MspInit+0x68>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_MspInit+0x68>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_MspInit+0x68>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c8:	61d3      	str	r3, [r2, #28]
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_MspInit+0x68>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	210f      	movs	r1, #15
 80027da:	f06f 0001 	mvn.w	r0, #1
 80027de:	f000 fb18 	bl	8002e12 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_MspInit+0x6c>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_MspInit+0x6c>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000

08002810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d10b      	bne.n	800283a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_TIM_Base_MspInit+0x34>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_TIM_Base_MspInit+0x34>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_TIM_Base_MspInit+0x34>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_UART_MspInit+0x98>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d137      	bne.n	80028d8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_UART_MspInit+0x9c>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_UART_MspInit+0x9c>)
 800286e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002872:	61d3      	str	r3, [r2, #28]
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_UART_MspInit+0x9c>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_UART_MspInit+0x9c>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_UART_MspInit+0x9c>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_UART_MspInit+0x9c>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002898:	2304      	movs	r3, #4
 800289a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a0:	2303      	movs	r3, #3
 80028a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4619      	mov	r1, r3
 80028aa:	480f      	ldr	r0, [pc, #60]	; (80028e8 <HAL_UART_MspInit+0xa0>)
 80028ac:	f000 fb8c 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028b0:	2308      	movs	r3, #8
 80028b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	4619      	mov	r1, r3
 80028c2:	4809      	ldr	r0, [pc, #36]	; (80028e8 <HAL_UART_MspInit+0xa0>)
 80028c4:	f000 fb80 	bl	8002fc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2105      	movs	r1, #5
 80028cc:	2026      	movs	r0, #38	; 0x26
 80028ce:	f000 faa0 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028d2:	2026      	movs	r0, #38	; 0x26
 80028d4:	f000 fab9 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40004400 	.word	0x40004400
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40010800 	.word	0x40010800

080028ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	; 0x30
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002902:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_InitTick+0xd0>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <HAL_InitTick+0xd0>)
 8002908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800290c:	6193      	str	r3, [r2, #24]
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_InitTick+0xd0>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800291a:	f107 020c 	add.w	r2, r7, #12
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f8ff 	bl	8003b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800292a:	f001 f8e9 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 800292e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <HAL_InitTick+0xd4>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	0c9b      	lsrs	r3, r3, #18
 800293a:	3b01      	subs	r3, #1
 800293c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_InitTick+0xd8>)
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_InitTick+0xdc>)
 8002942:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_InitTick+0xd8>)
 8002946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800294a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_InitTick+0xd8>)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_InitTick+0xd8>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_InitTick+0xd8>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_InitTick+0xd8>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002964:	4817      	ldr	r0, [pc, #92]	; (80029c4 <HAL_InitTick+0xd8>)
 8002966:	f001 f92d 	bl	8003bc4 <HAL_TIM_Base_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11b      	bne.n	80029b0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002978:	4812      	ldr	r0, [pc, #72]	; (80029c4 <HAL_InitTick+0xd8>)
 800297a:	f001 f9bd 	bl	8003cf8 <HAL_TIM_Base_Start_IT>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800298c:	2019      	movs	r0, #25
 800298e:	f000 fa5c 	bl	8002e4a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0f      	cmp	r3, #15
 8002996:	d808      	bhi.n	80029aa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002998:	2200      	movs	r2, #0
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	2019      	movs	r0, #25
 800299e:	f000 fa38 	bl	8002e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_InitTick+0xe0>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e002      	b.n	80029b0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80029b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3730      	adds	r7, #48	; 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	2000032c 	.word	0x2000032c
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	20000054 	.word	0x20000054

080029d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <NMI_Handler+0x4>

080029d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <HardFault_Handler+0x4>

080029dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <MemManage_Handler+0x4>

080029e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e6:	e7fe      	b.n	80029e6 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <UsageFault_Handler+0x4>

080029ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
	...

080029fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <TIM1_UP_IRQHandler+0x10>)
 8002a02:	f001 f9cb 	bl	8003d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000032c 	.word	0x2000032c

08002a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <USART2_IRQHandler+0x10>)
 8002a16:	f001 fe29 	bl	800466c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200002a4 	.word	0x200002a4

08002a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return 1;
 8002a28:	2301      	movs	r3, #1
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <_kill>:

int _kill(int pid, int sig)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a3c:	f005 ffb2 	bl	80089a4 <__errno>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2216      	movs	r2, #22
 8002a44:	601a      	str	r2, [r3, #0]
  return -1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_exit>:

void _exit (int status)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffe7 	bl	8002a32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a64:	e7fe      	b.n	8002a64 <_exit+0x12>

08002a66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e00a      	b.n	8002a8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a78:	f3af 8000 	nop.w
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	60ba      	str	r2, [r7, #8]
 8002a84:	b2ca      	uxtb	r2, r1
 8002a86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	dbf0      	blt.n	8002a78 <_read+0x12>
  }

  return len;
 8002a96:	687b      	ldr	r3, [r7, #4]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e009      	b.n	8002ac6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	60ba      	str	r2, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f8b2 	bl	8001c24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dbf1      	blt.n	8002ab2 <_write+0x12>
  }
  return len;
 8002ace:	687b      	ldr	r3, [r7, #4]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_close>:

int _close(int file)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afe:	605a      	str	r2, [r3, #4]
  return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <_isatty>:

int _isatty(int file)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b14:	2301      	movs	r3, #1
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <_sbrk+0x5c>)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <_sbrk+0x60>)
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <_sbrk+0x64>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <_sbrk+0x68>)
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b68:	f005 ff1c 	bl	80089a4 <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	220c      	movs	r2, #12
 8002b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e009      	b.n	8002b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <_sbrk+0x64>)
 8002b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20005000 	.word	0x20005000
 8002b98:	00000400 	.word	0x00000400
 8002b9c:	20000374 	.word	0x20000374
 8002ba0:	20002598 	.word	0x20002598

08002ba4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bb2:	490d      	ldr	r1, [pc, #52]	; (8002be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	; (8002bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bd6:	f7ff ffe5 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bda:	f005 ffdf 	bl	8008b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bde:	f7ff f999 	bl	8001f14 <main>
  bx lr
 8002be2:	4770      	bx	lr
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002bec:	0800dccc 	.word	0x0800dccc
  ldr r2, =_sbss
 8002bf0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002bf4:	20002594 	.word	0x20002594

08002bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC1_2_IRQHandler>
	...

08002bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_Init+0x28>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_Init+0x28>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f000 f8f5 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c12:	200f      	movs	r0, #15
 8002c14:	f7ff fe6a 	bl	80028ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c18:	f7ff fdc2 	bl	80027a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40022000 	.word	0x40022000

08002c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_IncTick+0x1c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_IncTick+0x20>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	4a03      	ldr	r2, [pc, #12]	; (8002c48 <HAL_IncTick+0x20>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	20000058 	.word	0x20000058
 8002c48:	20000378 	.word	0x20000378

08002c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b02      	ldr	r3, [pc, #8]	; (8002c5c <HAL_GetTick+0x10>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	20000378 	.word	0x20000378

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff fff0 	bl	8002c4c <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffe0 	bl	8002c4c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000058 	.word	0x20000058

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4906      	ldr	r1, [pc, #24]	; (8002d40 <__NVIC_EnableIRQ+0x34>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0a      	blt.n	8002d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	490c      	ldr	r1, [pc, #48]	; (8002d90 <__NVIC_SetPriority+0x4c>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	440b      	add	r3, r1
 8002d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d6c:	e00a      	b.n	8002d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <__NVIC_SetPriority+0x50>)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	761a      	strb	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000e100 	.word	0xe000e100
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	4313      	orrs	r3, r2
         );
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff4f 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff64 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ffb2 	bl	8002d98 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff81 	bl	8002d44 <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff57 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d008      	beq.n	8002e8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e020      	b.n	8002ed0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 020e 	bic.w	r2, r2, #14
 8002e9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d005      	beq.n	8002efe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e051      	b.n	8002fa2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 020e 	bic.w	r2, r2, #14
 8002f0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a22      	ldr	r2, [pc, #136]	; (8002fac <HAL_DMA_Abort_IT+0xd0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d029      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xa0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <HAL_DMA_Abort_IT+0xd4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d022      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x9c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <HAL_DMA_Abort_IT+0xd8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d01a      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x96>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <HAL_DMA_Abort_IT+0xdc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d012      	beq.n	8002f6c <HAL_DMA_Abort_IT+0x90>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <HAL_DMA_Abort_IT+0xe0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00a      	beq.n	8002f66 <HAL_DMA_Abort_IT+0x8a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_DMA_Abort_IT+0xe4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d102      	bne.n	8002f60 <HAL_DMA_Abort_IT+0x84>
 8002f5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f5e:	e00e      	b.n	8002f7e <HAL_DMA_Abort_IT+0xa2>
 8002f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f64:	e00b      	b.n	8002f7e <HAL_DMA_Abort_IT+0xa2>
 8002f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6a:	e008      	b.n	8002f7e <HAL_DMA_Abort_IT+0xa2>
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f70:	e005      	b.n	8002f7e <HAL_DMA_Abort_IT+0xa2>
 8002f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f76:	e002      	b.n	8002f7e <HAL_DMA_Abort_IT+0xa2>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	e000      	b.n	8002f7e <HAL_DMA_Abort_IT+0xa2>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <HAL_DMA_Abort_IT+0xe8>)
 8002f80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
    } 
  }
  return status;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40020008 	.word	0x40020008
 8002fb0:	4002001c 	.word	0x4002001c
 8002fb4:	40020030 	.word	0x40020030
 8002fb8:	40020044 	.word	0x40020044
 8002fbc:	40020058 	.word	0x40020058
 8002fc0:	4002006c 	.word	0x4002006c
 8002fc4:	40020000 	.word	0x40020000

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fda:	e169      	b.n	80032b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8158 	bne.w	80032aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a9a      	ldr	r2, [pc, #616]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d05e      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003004:	4a98      	ldr	r2, [pc, #608]	; (8003268 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d875      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800300a:	4a98      	ldr	r2, [pc, #608]	; (800326c <HAL_GPIO_Init+0x2a4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d058      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003010:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_GPIO_Init+0x2a4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d86f      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003016:	4a96      	ldr	r2, [pc, #600]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d052      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 800301c:	4a94      	ldr	r2, [pc, #592]	; (8003270 <HAL_GPIO_Init+0x2a8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d869      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003022:	4a94      	ldr	r2, [pc, #592]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04c      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003028:	4a92      	ldr	r2, [pc, #584]	; (8003274 <HAL_GPIO_Init+0x2ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d863      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800302e:	4a92      	ldr	r2, [pc, #584]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d046      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003034:	4a90      	ldr	r2, [pc, #576]	; (8003278 <HAL_GPIO_Init+0x2b0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d85d      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800303a:	2b12      	cmp	r3, #18
 800303c:	d82a      	bhi.n	8003094 <HAL_GPIO_Init+0xcc>
 800303e:	2b12      	cmp	r3, #18
 8003040:	d859      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <HAL_GPIO_Init+0x80>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	080030c3 	.word	0x080030c3
 800304c:	0800309d 	.word	0x0800309d
 8003050:	080030af 	.word	0x080030af
 8003054:	080030f1 	.word	0x080030f1
 8003058:	080030f7 	.word	0x080030f7
 800305c:	080030f7 	.word	0x080030f7
 8003060:	080030f7 	.word	0x080030f7
 8003064:	080030f7 	.word	0x080030f7
 8003068:	080030f7 	.word	0x080030f7
 800306c:	080030f7 	.word	0x080030f7
 8003070:	080030f7 	.word	0x080030f7
 8003074:	080030f7 	.word	0x080030f7
 8003078:	080030f7 	.word	0x080030f7
 800307c:	080030f7 	.word	0x080030f7
 8003080:	080030f7 	.word	0x080030f7
 8003084:	080030f7 	.word	0x080030f7
 8003088:	080030f7 	.word	0x080030f7
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030b9 	.word	0x080030b9
 8003094:	4a79      	ldr	r2, [pc, #484]	; (800327c <HAL_GPIO_Init+0x2b4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800309a:	e02c      	b.n	80030f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e029      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	623b      	str	r3, [r7, #32]
          break;
 80030ac:	e024      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	3308      	adds	r3, #8
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e01f      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	330c      	adds	r3, #12
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e01a      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ca:	2304      	movs	r3, #4
 80030cc:	623b      	str	r3, [r7, #32]
          break;
 80030ce:	e013      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d8:	2308      	movs	r3, #8
 80030da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	611a      	str	r2, [r3, #16]
          break;
 80030e2:	e009      	b.n	80030f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e4:	2308      	movs	r3, #8
 80030e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	615a      	str	r2, [r3, #20]
          break;
 80030ee:	e003      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          break;
 80030f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	d801      	bhi.n	8003102 <HAL_GPIO_Init+0x13a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	e001      	b.n	8003106 <HAL_GPIO_Init+0x13e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2bff      	cmp	r3, #255	; 0xff
 800310c:	d802      	bhi.n	8003114 <HAL_GPIO_Init+0x14c>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	e002      	b.n	800311a <HAL_GPIO_Init+0x152>
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	3b08      	subs	r3, #8
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	210f      	movs	r1, #15
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80b1 	beq.w	80032aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a4c      	ldr	r2, [pc, #304]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_GPIO_Init+0x2b8>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	; (8003288 <HAL_GPIO_Init+0x2c0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_GPIO_Init+0x1ec>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_GPIO_Init+0x2c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00d      	beq.n	80031b0 <HAL_GPIO_Init+0x1e8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3e      	ldr	r2, [pc, #248]	; (8003290 <HAL_GPIO_Init+0x2c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3d      	ldr	r2, [pc, #244]	; (8003294 <HAL_GPIO_Init+0x2cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_GPIO_Init+0x1e0>
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e004      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b4:	2300      	movs	r3, #0
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	f002 0203 	and.w	r2, r2, #3
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	4093      	lsls	r3, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031c6:	492f      	ldr	r1, [pc, #188]	; (8003284 <HAL_GPIO_Init+0x2bc>)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	492c      	ldr	r1, [pc, #176]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4928      	ldr	r1, [pc, #160]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	43db      	mvns	r3, r3
 800321e:	491e      	ldr	r1, [pc, #120]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003220:	4013      	ands	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4918      	ldr	r1, [pc, #96]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	43db      	mvns	r3, r3
 8003246:	4914      	ldr	r1, [pc, #80]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003248:	4013      	ands	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
 8003264:	e021      	b.n	80032aa <HAL_GPIO_Init+0x2e2>
 8003266:	bf00      	nop
 8003268:	10320000 	.word	0x10320000
 800326c:	10310000 	.word	0x10310000
 8003270:	10220000 	.word	0x10220000
 8003274:	10210000 	.word	0x10210000
 8003278:	10120000 	.word	0x10120000
 800327c:	10110000 	.word	0x10110000
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	40010800 	.word	0x40010800
 800328c:	40010c00 	.word	0x40010c00
 8003290:	40011000 	.word	0x40011000
 8003294:	40011400 	.word	0x40011400
 8003298:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_GPIO_Init+0x304>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4909      	ldr	r1, [pc, #36]	; (80032cc <HAL_GPIO_Init+0x304>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f ae8e 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	372c      	adds	r7, #44	; 0x2c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e001      	b.n	80032f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
 800330a:	4613      	mov	r3, r2
 800330c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800330e:	787b      	ldrb	r3, [r7, #1]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003314:	887a      	ldrh	r2, [r7, #2]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800331a:	e003      	b.n	8003324 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	041a      	lsls	r2, r3, #16
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
	...

08003330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e272      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b04      	cmp	r3, #4
 800335a:	d00c      	beq.n	8003376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800335c:	4b8f      	ldr	r3, [pc, #572]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d112      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
 8003368:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d10b      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d06c      	beq.n	800345c <HAL_RCC_OscConfig+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e24c      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x76>
 8003398:	4b80      	ldr	r3, [pc, #512]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7f      	ldr	r2, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b7b      	ldr	r3, [pc, #492]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7a      	ldr	r2, [pc, #488]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b78      	ldr	r3, [pc, #480]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0xbc>
 80033d2:	4b72      	ldr	r3, [pc, #456]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a71      	ldr	r2, [pc, #452]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033ec:	4b6b      	ldr	r3, [pc, #428]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6a      	ldr	r2, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7ff fc1e 	bl	8002c4c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7ff fc1a 	bl	8002c4c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e200      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5d      	ldr	r3, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xe4>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7ff fc0a 	bl	8002c4c <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7ff fc06 	bl	8002c4c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1ec      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x10c>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346a:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1c0      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4939      	ldr	r1, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7ff fbbf 	bl	8002c4c <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d2:	f7ff fbbb 	bl	8002c4c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1a1      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4927      	ldr	r1, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7ff fb9e 	bl	8002c4c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7ff fb9a 	bl	8002c4c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e180      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03a      	beq.n	80035b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7ff fb7e 	bl	8002c4c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7ff fb7a 	bl	8002c4c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e160      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 fb08 	bl	8003b88 <RCC_Delay>
 8003578:	e01c      	b.n	80035b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7ff fb64 	bl	8002c4c <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003586:	e00f      	b.n	80035a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7ff fb60 	bl	8002c4c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e146      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	42420000 	.word	0x42420000
 80035a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	4b92      	ldr	r3, [pc, #584]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e9      	bne.n	8003588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a6 	beq.w	800370e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c6:	4b8b      	ldr	r3, [pc, #556]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4a87      	ldr	r2, [pc, #540]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	61d3      	str	r3, [r2, #28]
 80035de:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d118      	bne.n	800362c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b7f      	ldr	r3, [pc, #508]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7ff fb21 	bl	8002c4c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7ff fb1d 	bl	8002c4c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	; 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e103      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b75      	ldr	r3, [pc, #468]	; (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x312>
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6213      	str	r3, [r2, #32]
 8003640:	e02d      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x334>
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4a69      	ldr	r2, [pc, #420]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6213      	str	r3, [r2, #32]
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a66      	ldr	r2, [pc, #408]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6213      	str	r3, [r2, #32]
 8003662:	e01c      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d10c      	bne.n	8003686 <HAL_RCC_OscConfig+0x356>
 800366c:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4a60      	ldr	r2, [pc, #384]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6213      	str	r3, [r2, #32]
 8003678:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	e00b      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6213      	str	r3, [r2, #32]
 8003692:	4b58      	ldr	r3, [pc, #352]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a57      	ldr	r2, [pc, #348]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7ff fad1 	bl	8002c4c <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7ff facd 	bl	8002c4c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0b1      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ee      	beq.n	80036ae <HAL_RCC_OscConfig+0x37e>
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7ff fabb 	bl	8002c4c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7ff fab7 	bl	8002c4c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e09b      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8087 	beq.w	8003826 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d061      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d146      	bne.n	80037ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b33      	ldr	r3, [pc, #204]	; (80037fc <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7ff fa8b 	bl	8002c4c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7ff fa87 	bl	8002c4c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e06d      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d108      	bne.n	8003774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4921      	ldr	r1, [pc, #132]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a19      	ldr	r1, [r3, #32]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	430b      	orrs	r3, r1
 8003786:	491b      	ldr	r1, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x4cc>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7ff fa5b 	bl	8002c4c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379a:	f7ff fa57 	bl	8002c4c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e03d      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x46a>
 80037b8:	e035      	b.n	8003826 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_OscConfig+0x4cc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7ff fa44 	bl	8002c4c <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7ff fa40 	bl	8002c4c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e026      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x498>
 80037e6:	e01e      	b.n	8003826 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e019      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
 80037fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_OscConfig+0x500>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	429a      	cmp	r2, r3
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0d0      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800389a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e073      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7ff f992 	bl	8002c4c <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7ff f98e 	bl	8002c4c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e053      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4922      	ldr	r1, [pc, #136]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1cc>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe ff82 	bl	80028ec <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	0800d804 	.word	0x0800d804
 8003a00:	20000050 	.word	0x20000050
 8003a04:	20000054 	.word	0x20000054

08003a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b490      	push	{r4, r7}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a10:	1d3c      	adds	r4, r7, #4
 8003a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a18:	f240 2301 	movw	r3, #513	; 0x201
 8003a1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x40>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x46>
 8003a46:	e02b      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a48:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a4a:	623b      	str	r3, [r7, #32]
      break;
 8003a4c:	e02b      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	0c9b      	lsrs	r3, r3, #18
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3328      	adds	r3, #40	; 0x28
 8003a58:	443b      	add	r3, r7
 8003a5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a5e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	0c5b      	lsrs	r3, r3, #17
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	3328      	adds	r3, #40	; 0x28
 8003a76:	443b      	add	r3, r7
 8003a78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a82:	fb03 f202 	mul.w	r2, r3, r2
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	e004      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	623b      	str	r3, [r7, #32]
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003aa2:	623b      	str	r3, [r7, #32]
      break;
 8003aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc90      	pop	{r4, r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	0800d72c 	.word	0x0800d72c
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	007a1200 	.word	0x007a1200
 8003ac0:	003d0900 	.word	0x003d0900

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	20000050 	.word	0x20000050

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff2 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800d814 	.word	0x0800d814

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffde 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0adb      	lsrs	r3, r3, #11
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800d814 	.word	0x0800d814

08003b28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	220f      	movs	r2, #15
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_GetClockConfig+0x58>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0203 	and.w	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <HAL_RCC_GetClockConfig+0x58>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_GetClockConfig+0x58>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_RCC_GetClockConfig+0x58>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0207 	and.w	r2, r3, #7
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40022000 	.word	0x40022000

08003b88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <RCC_Delay+0x34>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <RCC_Delay+0x38>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0a5b      	lsrs	r3, r3, #9
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba4:	bf00      	nop
  }
  while (Delay --);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1e5a      	subs	r2, r3, #1
 8003baa:	60fa      	str	r2, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f9      	bne.n	8003ba4 <RCC_Delay+0x1c>
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	20000050 	.word	0x20000050
 8003bc0:	10624dd3 	.word	0x10624dd3

08003bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e041      	b.n	8003c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fe10 	bl	8002810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 faba 	bl	800417c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <HAL_TIM_Base_Start+0x88>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_TIM_Base_Start+0x48>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_Base_Start+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <HAL_TIM_Base_Start+0x8c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_Base_Start+0x48>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <HAL_TIM_Base_Start+0x90>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d111      	bne.n	8003cd0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d010      	beq.n	8003ce0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	e007      	b.n	8003ce0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800

08003cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d001      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e03a      	b.n	8003d86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_TIM_Base_Start_IT+0x98>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00e      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x58>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d009      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x58>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x58>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d010      	beq.n	8003d84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	e007      	b.n	8003d84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800

08003d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0202 	mvn.w	r2, #2
 8003dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f9b1 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9a4 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f9b3 	bl	8004158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0204 	mvn.w	r2, #4
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f987 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f97a 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f989 	bl	8004158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d122      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0208 	mvn.w	r2, #8
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2204      	movs	r2, #4
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f95d 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f950 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f95f 	bl	8004158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d122      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d11b      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0210 	mvn.w	r2, #16
 8003ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2208      	movs	r2, #8
 8003eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f933 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003ee0:	e005      	b.n	8003eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f926 	bl	8004134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f935 	bl	8004158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10e      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0201 	mvn.w	r2, #1
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe fc28 	bl	8002770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b80      	cmp	r3, #128	; 0x80
 8003f2c:	d10e      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b80      	cmp	r3, #128	; 0x80
 8003f3a:	d107      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa77 	bl	800443a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d10e      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8f9 	bl	800416a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d10e      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0220 	mvn.w	r2, #32
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa42 	bl	8004428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_ConfigClockSource+0x18>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0b3      	b.n	800412c <HAL_TIM_ConfigClockSource+0x180>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d03e      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xd0>
 8003ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004002:	f200 8087 	bhi.w	8004114 <HAL_TIM_ConfigClockSource+0x168>
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400a:	f000 8085 	beq.w	8004118 <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004012:	d87f      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
 8004014:	2b70      	cmp	r3, #112	; 0x70
 8004016:	d01a      	beq.n	800404e <HAL_TIM_ConfigClockSource+0xa2>
 8004018:	2b70      	cmp	r3, #112	; 0x70
 800401a:	d87b      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
 800401c:	2b60      	cmp	r3, #96	; 0x60
 800401e:	d050      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x116>
 8004020:	2b60      	cmp	r3, #96	; 0x60
 8004022:	d877      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
 8004024:	2b50      	cmp	r3, #80	; 0x50
 8004026:	d03c      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0xf6>
 8004028:	2b50      	cmp	r3, #80	; 0x50
 800402a:	d873      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d058      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x136>
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d86f      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
 8004034:	2b30      	cmp	r3, #48	; 0x30
 8004036:	d064      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x156>
 8004038:	2b30      	cmp	r3, #48	; 0x30
 800403a:	d86b      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
 800403c:	2b20      	cmp	r3, #32
 800403e:	d060      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x156>
 8004040:	2b20      	cmp	r3, #32
 8004042:	d867      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05c      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x156>
 8004048:	2b10      	cmp	r3, #16
 800404a:	d05a      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800404c:	e062      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f000 f966 	bl	800432e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004070:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	609a      	str	r2, [r3, #8]
      break;
 800407a:	e04e      	b.n	800411a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6899      	ldr	r1, [r3, #8]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f000 f94f 	bl	800432e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409e:	609a      	str	r2, [r3, #8]
      break;
 80040a0:	e03b      	b.n	800411a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 f8c6 	bl	8004240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2150      	movs	r1, #80	; 0x50
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f91d 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 80040c0:	e02b      	b.n	800411a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 f8e4 	bl	800429c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2160      	movs	r1, #96	; 0x60
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f90d 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 80040e0:	e01b      	b.n	800411a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 f8a6 	bl	8004240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2140      	movs	r1, #64	; 0x40
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f8fd 	bl	80042fa <TIM_ITRx_SetConfig>
      break;
 8004100:	e00b      	b.n	800411a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f000 f8f4 	bl	80042fa <TIM_ITRx_SetConfig>
        break;
 8004112:	e002      	b.n	800411a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004118:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a29      	ldr	r2, [pc, #164]	; (8004234 <TIM_Base_SetConfig+0xb8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00b      	beq.n	80041ac <TIM_Base_SetConfig+0x30>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0x30>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a26      	ldr	r2, [pc, #152]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0x30>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a25      	ldr	r2, [pc, #148]	; (800423c <TIM_Base_SetConfig+0xc0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d108      	bne.n	80041be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <TIM_Base_SetConfig+0xb8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0x62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0x62>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <TIM_Base_SetConfig+0xc0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a07      	ldr	r2, [pc, #28]	; (8004234 <TIM_Base_SetConfig+0xb8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800

08004240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f023 0201 	bic.w	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 030a 	bic.w	r3, r3, #10
 800427c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f023 0210 	bic.w	r2, r3, #16
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	031b      	lsls	r3, r3, #12
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	f043 0307 	orr.w	r3, r3, #7
 800431c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800432e:	b480      	push	{r7}
 8004330:	b087      	sub	sp, #28
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004348:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	021a      	lsls	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	431a      	orrs	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4313      	orrs	r3, r2
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	609a      	str	r2, [r3, #8]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004380:	2302      	movs	r3, #2
 8004382:	e046      	b.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d009      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800

08004428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e03f      	b.n	80044de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fe f9e8 	bl	8002848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fc85 	bl	8004da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b08a      	sub	sp, #40	; 0x28
 80044ea:	af02      	add	r7, sp, #8
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b20      	cmp	r3, #32
 8004504:	d17c      	bne.n	8004600 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_UART_Transmit+0x2c>
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e075      	b.n	8004602 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_UART_Transmit+0x3e>
 8004520:	2302      	movs	r3, #2
 8004522:	e06e      	b.n	8004602 <HAL_UART_Transmit+0x11c>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2221      	movs	r2, #33	; 0x21
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800453a:	f7fe fb87 	bl	8002c4c <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004554:	d108      	bne.n	8004568 <HAL_UART_Transmit+0x82>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e003      	b.n	8004570 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004578:	e02a      	b.n	80045d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2200      	movs	r2, #0
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fa38 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e036      	b.n	8004602 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	3302      	adds	r3, #2
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e007      	b.n	80045c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	3301      	adds	r3, #1
 80045c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1cf      	bne.n	800457a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	2140      	movs	r1, #64	; 0x40
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fa08 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e006      	b.n	8004602 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b20      	cmp	r3, #32
 8004622:	d11d      	bne.n	8004660 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_UART_Receive_IT+0x26>
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e016      	b.n	8004662 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_UART_Receive_IT+0x38>
 800463e:	2302      	movs	r3, #2
 8004640:	e00f      	b.n	8004662 <HAL_UART_Receive_IT+0x58>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	461a      	mov	r2, r3
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fa19 	bl	8004a8e <UART_Start_Receive_IT>
 800465c:	4603      	mov	r3, r0
 800465e:	e000      	b.n	8004662 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10d      	bne.n	80046be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x52>
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fac9 	bl	8004c4e <UART_Receive_IT>
      return;
 80046bc:	e17b      	b.n	80049b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80b1 	beq.w	8004828 <HAL_UART_IRQHandler+0x1bc>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_UART_IRQHandler+0x70>
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80a6 	beq.w	8004828 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_UART_IRQHandler+0x90>
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_UART_IRQHandler+0xb0>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f043 0202 	orr.w	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_UART_IRQHandler+0xd0>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00f      	beq.n	8004766 <HAL_UART_IRQHandler+0xfa>
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <HAL_UART_IRQHandler+0xee>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0208 	orr.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 811e 	beq.w	80049ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_UART_IRQHandler+0x11e>
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fa62 	bl	8004c4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <HAL_UART_IRQHandler+0x146>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d031      	beq.n	8004816 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9a4 	bl	8004b00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d023      	beq.n	800480e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d013      	beq.n	8004806 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	4a76      	ldr	r2, [pc, #472]	; (80049bc <HAL_UART_IRQHandler+0x350>)
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe fb76 	bl	8002edc <HAL_DMA_Abort_IT>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	e00e      	b.n	8004824 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8e3 	bl	80049d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	e00a      	b.n	8004824 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f8df 	bl	80049d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	e006      	b.n	8004824 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f8db 	bl	80049d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004822:	e0c3      	b.n	80049ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	bf00      	nop
    return;
 8004826:	e0c1      	b.n	80049ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 80a1 	bne.w	8004974 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 809b 	beq.w	8004974 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8095 	beq.w	8004974 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d04e      	beq.n	800490c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004878:	8a3b      	ldrh	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8098 	beq.w	80049b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004884:	8a3a      	ldrh	r2, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	f080 8092 	bcs.w	80049b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8a3a      	ldrh	r2, [r7, #16]
 8004890:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b20      	cmp	r3, #32
 800489a:	d02b      	beq.n	80048f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0210 	bic.w	r2, r2, #16
 80048e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fab9 	bl	8002e66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	b29b      	uxth	r3, r3
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f86d 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800490a:	e051      	b.n	80049b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004914:	b29b      	uxth	r3, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d047      	beq.n	80049b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004924:	8a7b      	ldrh	r3, [r7, #18]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d044      	beq.n	80049b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004938:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0210 	bic.w	r2, r2, #16
 8004966:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f839 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004972:	e01f      	b.n	80049b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_UART_IRQHandler+0x324>
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8f9 	bl	8004b80 <UART_Transmit_IT>
    return;
 800498e:	e012      	b.n	80049b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_UART_IRQHandler+0x34a>
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f93a 	bl	8004c1e <UART_EndTransmit_IT>
    return;
 80049aa:	e004      	b.n	80049b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80049ac:	bf00      	nop
 80049ae:	e002      	b.n	80049b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80049b0:	bf00      	nop
 80049b2:	e000      	b.n	80049b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80049b4:	bf00      	nop
  }
}
 80049b6:	3728      	adds	r7, #40	; 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	08004b59 	.word	0x08004b59

080049c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0a:	e02c      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d028      	beq.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1a:	f7fe f917 	bl	8002c4c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d21d      	bcs.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e00f      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d0c3      	beq.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2222      	movs	r2, #34	; 0x22
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0220 	orr.w	r2, r2, #32
 8004af2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b16:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d107      	bne.n	8004b40 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0210 	bic.w	r2, r2, #16
 8004b3e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff ff2d 	bl	80049d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b21      	cmp	r3, #33	; 0x21
 8004b92:	d13e      	bne.n	8004c12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d114      	bne.n	8004bc8 <UART_Transmit_IT+0x48>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d110      	bne.n	8004bc8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]
 8004bc6:	e008      	b.n	8004bda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	1c59      	adds	r1, r3, #1
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6211      	str	r1, [r2, #32]
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	4619      	mov	r1, r3
 8004be8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10f      	bne.n	8004c0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e000      	b.n	8004c14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff febe 	bl	80049c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b22      	cmp	r3, #34	; 0x22
 8004c60:	f040 8099 	bne.w	8004d96 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6c:	d117      	bne.n	8004c9e <UART_Receive_IT+0x50>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d113      	bne.n	8004c9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c9c:	e026      	b.n	8004cec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb0:	d007      	beq.n	8004cc2 <UART_Receive_IT+0x74>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <UART_Receive_IT+0x82>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e008      	b.n	8004ce2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d148      	bne.n	8004d92 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0220 	bic.w	r2, r2, #32
 8004d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d123      	bne.n	8004d88 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0210 	bic.w	r2, r2, #16
 8004d54:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d10a      	bne.n	8004d7a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fe2f 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
 8004d86:	e002      	b.n	8004d8e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fd fa7b 	bl	8002284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e002      	b.n	8004d98 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dda:	f023 030c 	bic.w	r3, r3, #12
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <UART_SetConfig+0x114>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d103      	bne.n	8004e10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fe fe7a 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	e002      	b.n	8004e16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e10:	f7fe fe62 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8004e14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009a      	lsls	r2, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	0119      	lsls	r1, r3, #4
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009a      	lsls	r2, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2064      	movs	r0, #100	; 0x64
 8004e56:	fb00 f303 	mul.w	r3, r0, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	3332      	adds	r3, #50	; 0x32
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6c:	4419      	add	r1, r3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009a      	lsls	r2, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e86:	fba3 0302 	umull	r0, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2064      	movs	r0, #100	; 0x64
 8004e8e:	fb00 f303 	mul.w	r3, r0, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	; 0x32
 8004e98:	4a07      	ldr	r2, [pc, #28]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40013800 	.word	0x40013800
 8004eb8:	51eb851f 	.word	0x51eb851f

08004ebc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec2:	f3ef 8305 	mrs	r3, IPSR
 8004ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ece:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed2:	607b      	str	r3, [r7, #4]
  return(result);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <osKernelInitialize+0x32>
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <osKernelInitialize+0x60>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d109      	bne.n	8004ef6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004eee:	f06f 0305 	mvn.w	r3, #5
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e00c      	b.n	8004f10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <osKernelInitialize+0x60>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <osKernelInitialize+0x60>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e002      	b.n	8004f10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f10:	68fb      	ldr	r3, [r7, #12]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	2000037c 	.word	0x2000037c

08004f20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f26:	f3ef 8305 	mrs	r3, IPSR
 8004f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10f      	bne.n	8004f52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f32:	f3ef 8310 	mrs	r3, PRIMASK
 8004f36:	607b      	str	r3, [r7, #4]
  return(result);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <osKernelStart+0x32>
 8004f3e:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <osKernelStart+0x64>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d109      	bne.n	8004f5a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f46:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f52:	f06f 0305 	mvn.w	r3, #5
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e00e      	b.n	8004f78 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <osKernelStart+0x64>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <osKernelStart+0x64>)
 8004f64:	2202      	movs	r2, #2
 8004f66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004f68:	f001 ff0e 	bl	8006d88 <vTaskStartScheduler>
      stat = osOK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e002      	b.n	8004f78 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
 8004f76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f78:	68fb      	ldr	r3, [r7, #12]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	2000037c 	.word	0x2000037c

08004f88 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f8e:	f3ef 8305 	mrs	r3, IPSR
 8004f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f94:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10f      	bne.n	8004fba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <osKernelGetTickCount+0x32>
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <osKernelGetTickCount+0x4c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d109      	bne.n	8004fc2 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fae:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004fba:	f002 f80f 	bl	8006fdc <xTaskGetTickCountFromISR>
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	e002      	b.n	8004fc8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004fc2:	f001 fffd 	bl	8006fc0 <xTaskGetTickCount>
 8004fc6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000037c 	.word	0x2000037c

08004fd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b092      	sub	sp, #72	; 0x48
 8004fdc:	af04      	add	r7, sp, #16
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fe8:	f3ef 8305 	mrs	r3, IPSR
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f040 8094 	bne.w	800511e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffa:	623b      	str	r3, [r7, #32]
  return(result);
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 808d 	bne.w	800511e <osThreadNew+0x146>
 8005004:	4b48      	ldr	r3, [pc, #288]	; (8005128 <osThreadNew+0x150>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d106      	bne.n	800501a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800500c:	f3ef 8311 	mrs	r3, BASEPRI
 8005010:	61fb      	str	r3, [r7, #28]
  return(result);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 8082 	bne.w	800511e <osThreadNew+0x146>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d07e      	beq.n	800511e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005024:	2318      	movs	r3, #24
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005028:	2300      	movs	r3, #0
 800502a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800502c:	f107 031b 	add.w	r3, r7, #27
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005032:	f04f 33ff 	mov.w	r3, #4294967295
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d045      	beq.n	80050ca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <osThreadNew+0x74>
        name = attr->name;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <osThreadNew+0x9a>
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b38      	cmp	r3, #56	; 0x38
 8005064:	d805      	bhi.n	8005072 <osThreadNew+0x9a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <osThreadNew+0x9e>
        return (NULL);
 8005072:	2300      	movs	r3, #0
 8005074:	e054      	b.n	8005120 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00e      	beq.n	80050ac <osThreadNew+0xd4>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2bbb      	cmp	r3, #187	; 0xbb
 8005094:	d90a      	bls.n	80050ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <osThreadNew+0xd4>
        mem = 1;
 80050a6:	2301      	movs	r3, #1
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050aa:	e010      	b.n	80050ce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10c      	bne.n	80050ce <osThreadNew+0xf6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d108      	bne.n	80050ce <osThreadNew+0xf6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <osThreadNew+0xf6>
          mem = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c8:	e001      	b.n	80050ce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d110      	bne.n	80050f6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050dc:	9202      	str	r2, [sp, #8]
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f001 fbea 	bl	80068c4 <xTaskCreateStatic>
 80050f0:	4603      	mov	r3, r0
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e013      	b.n	800511e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d110      	bne.n	800511e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	b29a      	uxth	r2, r3
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f001 fc34 	bl	800697c <xTaskCreate>
 8005114:	4603      	mov	r3, r0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d001      	beq.n	800511e <osThreadNew+0x146>
          hTask = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800511e:	697b      	ldr	r3, [r7, #20]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3738      	adds	r7, #56	; 0x38
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	2000037c 	.word	0x2000037c

0800512c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005134:	f3ef 8305 	mrs	r3, IPSR
 8005138:	613b      	str	r3, [r7, #16]
  return(result);
 800513a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10f      	bne.n	8005160 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005140:	f3ef 8310 	mrs	r3, PRIMASK
 8005144:	60fb      	str	r3, [r7, #12]
  return(result);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <osDelay+0x34>
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <osDelay+0x58>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d109      	bne.n	8005168 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005154:	f3ef 8311 	mrs	r3, BASEPRI
 8005158:	60bb      	str	r3, [r7, #8]
  return(result);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <osDelay+0x3c>
    stat = osErrorISR;
 8005160:	f06f 0305 	mvn.w	r3, #5
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e007      	b.n	8005178 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 fdd4 	bl	8006d20 <vTaskDelay>
    }
  }

  return (stat);
 8005178:	697b      	ldr	r3, [r7, #20]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	2000037c 	.word	0x2000037c

08005188 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005190:	f3ef 8305 	mrs	r3, IPSR
 8005194:	61bb      	str	r3, [r7, #24]
  return(result);
 8005196:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10f      	bne.n	80051bc <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519c:	f3ef 8310 	mrs	r3, PRIMASK
 80051a0:	617b      	str	r3, [r7, #20]
  return(result);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <osDelayUntil+0x34>
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <osDelayUntil+0x64>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d109      	bne.n	80051c4 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051b0:	f3ef 8311 	mrs	r3, BASEPRI
 80051b4:	613b      	str	r3, [r7, #16]
  return(result);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80051bc:	f06f 0305 	mvn.w	r3, #5
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	e00e      	b.n	80051e2 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80051c8:	f001 fefa 	bl	8006fc0 <xTaskGetTickCount>
 80051cc:	4603      	mov	r3, r0
 80051ce:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 fd21 	bl	8006c24 <vTaskDelayUntil>
  }

  return (stat);
 80051e2:	69fb      	ldr	r3, [r7, #28]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	2000037c 	.word	0x2000037c

080051f0 <TimerCallback>:

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f002 ffe8 	bl	80081ce <pvTimerGetTimerID>
 80051fe:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	6852      	ldr	r2, [r2, #4]
 800520e:	4610      	mov	r0, r2
 8005210:	4798      	blx	r3
  }
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b08e      	sub	sp, #56	; 0x38
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	460b      	mov	r3, r1
 800522a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005230:	f3ef 8305 	mrs	r3, IPSR
 8005234:	61bb      	str	r3, [r7, #24]
  return(result);
 8005236:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005238:	2b00      	cmp	r3, #0
 800523a:	d16a      	bne.n	8005312 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	617b      	str	r3, [r7, #20]
  return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d164      	bne.n	8005312 <osTimerNew+0xf6>
 8005248:	4b34      	ldr	r3, [pc, #208]	; (800531c <osTimerNew+0x100>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d105      	bne.n	800525c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005250:	f3ef 8311 	mrs	r3, BASEPRI
 8005254:	613b      	str	r3, [r7, #16]
  return(result);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d15a      	bne.n	8005312 <osTimerNew+0xf6>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d057      	beq.n	8005312 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005262:	2008      	movs	r0, #8
 8005264:	f003 f9c2 	bl	80085ec <pvPortMalloc>
 8005268:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d050      	beq.n	8005312 <osTimerNew+0xf6>
      callb->func = func;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <osTimerNew+0x6c>
        reload = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	e001      	b.n	800528c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800528c:	f04f 33ff 	mov.w	r3, #4294967295
 8005290:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01c      	beq.n	80052d6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <osTimerNew+0x8e>
          name = attr->name;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <osTimerNew+0xa4>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b2f      	cmp	r3, #47	; 0x2f
 80052b8:	d902      	bls.n	80052c0 <osTimerNew+0xa4>
          mem = 1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	e00c      	b.n	80052da <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d108      	bne.n	80052da <osTimerNew+0xbe>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <osTimerNew+0xbe>
            mem = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	623b      	str	r3, [r7, #32]
 80052d4:	e001      	b.n	80052da <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10c      	bne.n	80052fa <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <osTimerNew+0x104>)
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	2101      	movs	r1, #1
 80052f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052f2:	f002 fc0e 	bl	8007b12 <xTimerCreateStatic>
 80052f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80052f8:	e00b      	b.n	8005312 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d108      	bne.n	8005312 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <osTimerNew+0x104>)
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	2101      	movs	r1, #1
 800530a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800530c:	f002 fbe0 	bl	8007ad0 <xTimerCreate>
 8005310:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005314:	4618      	mov	r0, r3
 8005316:	3730      	adds	r7, #48	; 0x30
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	2000037c 	.word	0x2000037c
 8005320:	080051f1 	.word	0x080051f1

08005324 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005332:	f3ef 8305 	mrs	r3, IPSR
 8005336:	617b      	str	r3, [r7, #20]
  return(result);
 8005338:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533e:	f3ef 8310 	mrs	r3, PRIMASK
 8005342:	613b      	str	r3, [r7, #16]
  return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <osTimerStart+0x3a>
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <osTimerStart+0x7c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d109      	bne.n	8005366 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005352:	f3ef 8311 	mrs	r3, BASEPRI
 8005356:	60fb      	str	r3, [r7, #12]
  return(result);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <osTimerStart+0x42>
    stat = osErrorISR;
 800535e:	f06f 0305 	mvn.w	r3, #5
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	e017      	b.n	8005396 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <osTimerStart+0x50>
    stat = osErrorParameter;
 800536c:	f06f 0303 	mvn.w	r3, #3
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e010      	b.n	8005396 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005374:	2300      	movs	r3, #0
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	2104      	movs	r1, #4
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f002 fc36 	bl	8007bf0 <xTimerGenericCommand>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d102      	bne.n	8005390 <osTimerStart+0x6c>
      stat = osOK;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	e002      	b.n	8005396 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005390:	f06f 0302 	mvn.w	r3, #2
 8005394:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005396:	69fb      	ldr	r3, [r7, #28]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	2000037c 	.word	0x2000037c

080053a4 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b0:	f3ef 8305 	mrs	r3, IPSR
 80053b4:	617b      	str	r3, [r7, #20]
  return(result);
 80053b6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10f      	bne.n	80053dc <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053bc:	f3ef 8310 	mrs	r3, PRIMASK
 80053c0:	613b      	str	r3, [r7, #16]
  return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <osTimerStop+0x38>
 80053c8:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <osTimerStop+0x90>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d109      	bne.n	80053e4 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d0:	f3ef 8311 	mrs	r3, BASEPRI
 80053d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <osTimerStop+0x40>
    stat = osErrorISR;
 80053dc:	f06f 0305 	mvn.w	r3, #5
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	e021      	b.n	8005428 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <osTimerStop+0x4e>
    stat = osErrorParameter;
 80053ea:	f06f 0303 	mvn.w	r3, #3
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e01a      	b.n	8005428 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80053f2:	69b8      	ldr	r0, [r7, #24]
 80053f4:	f002 fec6 	bl	8008184 <xTimerIsTimerActive>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <osTimerStop+0x62>
      stat = osErrorResource;
 80053fe:	f06f 0302 	mvn.w	r3, #2
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	e010      	b.n	8005428 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8005406:	2300      	movs	r3, #0
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2300      	movs	r3, #0
 800540c:	2200      	movs	r2, #0
 800540e:	2103      	movs	r1, #3
 8005410:	69b8      	ldr	r0, [r7, #24]
 8005412:	f002 fbed 	bl	8007bf0 <xTimerGenericCommand>
 8005416:	4603      	mov	r3, r0
 8005418:	2b01      	cmp	r3, #1
 800541a:	d102      	bne.n	8005422 <osTimerStop+0x7e>
        stat = osOK;
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	e002      	b.n	8005428 <osTimerStop+0x84>
      } else {
        stat = osError;
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005428:	69fb      	ldr	r3, [r7, #28]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2000037c 	.word	0x2000037c

08005438 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	; 0x30
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005448:	f3ef 8305 	mrs	r3, IPSR
 800544c:	61bb      	str	r3, [r7, #24]
  return(result);
 800544e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 8086 	bne.w	8005562 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005456:	f3ef 8310 	mrs	r3, PRIMASK
 800545a:	617b      	str	r3, [r7, #20]
  return(result);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d17f      	bne.n	8005562 <osSemaphoreNew+0x12a>
 8005462:	4b42      	ldr	r3, [pc, #264]	; (800556c <osSemaphoreNew+0x134>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d105      	bne.n	8005476 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800546a:	f3ef 8311 	mrs	r3, BASEPRI
 800546e:	613b      	str	r3, [r7, #16]
  return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d175      	bne.n	8005562 <osSemaphoreNew+0x12a>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d072      	beq.n	8005562 <osSemaphoreNew+0x12a>
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d86e      	bhi.n	8005562 <osSemaphoreNew+0x12a>
    mem = -1;
 8005484:	f04f 33ff 	mov.w	r3, #4294967295
 8005488:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d015      	beq.n	80054bc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d006      	beq.n	80054a6 <osSemaphoreNew+0x6e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b4f      	cmp	r3, #79	; 0x4f
 800549e:	d902      	bls.n	80054a6 <osSemaphoreNew+0x6e>
        mem = 1;
 80054a0:	2301      	movs	r3, #1
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	e00c      	b.n	80054c0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <osSemaphoreNew+0x88>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <osSemaphoreNew+0x88>
          mem = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
 80054ba:	e001      	b.n	80054c0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d04c      	beq.n	8005562 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d128      	bne.n	8005520 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d10a      	bne.n	80054ea <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2203      	movs	r2, #3
 80054da:	9200      	str	r2, [sp, #0]
 80054dc:	2200      	movs	r2, #0
 80054de:	2100      	movs	r1, #0
 80054e0:	2001      	movs	r0, #1
 80054e2:	f000 fa4d 	bl	8005980 <xQueueGenericCreateStatic>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24
 80054e8:	e005      	b.n	80054f6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80054ea:	2203      	movs	r2, #3
 80054ec:	2100      	movs	r1, #0
 80054ee:	2001      	movs	r0, #1
 80054f0:	f000 fabd 	bl	8005a6e <xQueueGenericCreate>
 80054f4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d022      	beq.n	8005542 <osSemaphoreNew+0x10a>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01f      	beq.n	8005542 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005502:	2300      	movs	r3, #0
 8005504:	2200      	movs	r2, #0
 8005506:	2100      	movs	r1, #0
 8005508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550a:	f000 fb7b 	bl	8005c04 <xQueueGenericSend>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d016      	beq.n	8005542 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005516:	f001 f805 	bl	8006524 <vQueueDelete>
            hSemaphore = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e010      	b.n	8005542 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d108      	bne.n	8005538 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	461a      	mov	r2, r3
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fafe 	bl	8005b30 <xQueueCreateCountingSemaphoreStatic>
 8005534:	6278      	str	r0, [r7, #36]	; 0x24
 8005536:	e004      	b.n	8005542 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fb2f 	bl	8005b9e <xQueueCreateCountingSemaphore>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00c      	beq.n	8005562 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <osSemaphoreNew+0x11e>
          name = attr->name;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	e001      	b.n	800555a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800555a:	69f9      	ldr	r1, [r7, #28]
 800555c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800555e:	f001 f92b 	bl	80067b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	; 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	2000037c 	.word	0x2000037c

08005570 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d103      	bne.n	8005590 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005588:	f06f 0303 	mvn.w	r3, #3
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e04b      	b.n	8005628 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005590:	f3ef 8305 	mrs	r3, IPSR
 8005594:	617b      	str	r3, [r7, #20]
  return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10f      	bne.n	80055bc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559c:	f3ef 8310 	mrs	r3, PRIMASK
 80055a0:	613b      	str	r3, [r7, #16]
  return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <osSemaphoreAcquire+0x4c>
 80055a8:	4b22      	ldr	r3, [pc, #136]	; (8005634 <osSemaphoreAcquire+0xc4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d128      	bne.n	8005602 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055b0:	f3ef 8311 	mrs	r3, BASEPRI
 80055b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d022      	beq.n	8005602 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80055c2:	f06f 0303 	mvn.w	r3, #3
 80055c6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80055c8:	e02d      	b.n	8005626 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	461a      	mov	r2, r3
 80055d4:	2100      	movs	r1, #0
 80055d6:	69b8      	ldr	r0, [r7, #24]
 80055d8:	f000 ff24 	bl	8006424 <xQueueReceiveFromISR>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d003      	beq.n	80055ea <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80055e2:	f06f 0302 	mvn.w	r3, #2
 80055e6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80055e8:	e01d      	b.n	8005626 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01a      	beq.n	8005626 <osSemaphoreAcquire+0xb6>
 80055f0:	4b11      	ldr	r3, [pc, #68]	; (8005638 <osSemaphoreAcquire+0xc8>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005600:	e011      	b.n	8005626 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	69b8      	ldr	r0, [r7, #24]
 8005606:	f000 fe01 	bl	800620c <xQueueSemaphoreTake>
 800560a:	4603      	mov	r3, r0
 800560c:	2b01      	cmp	r3, #1
 800560e:	d00b      	beq.n	8005628 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005616:	f06f 0301 	mvn.w	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e004      	b.n	8005628 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800561e:	f06f 0302 	mvn.w	r3, #2
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	e000      	b.n	8005628 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005626:	bf00      	nop
      }
    }
  }

  return (stat);
 8005628:	69fb      	ldr	r3, [r7, #28]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	2000037c 	.word	0x2000037c
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005652:	f06f 0303 	mvn.w	r3, #3
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	e03e      	b.n	80056d8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800565a:	f3ef 8305 	mrs	r3, IPSR
 800565e:	617b      	str	r3, [r7, #20]
  return(result);
 8005660:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005666:	f3ef 8310 	mrs	r3, PRIMASK
 800566a:	613b      	str	r3, [r7, #16]
  return(result);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <osSemaphoreRelease+0x4a>
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <osSemaphoreRelease+0xa8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d120      	bne.n	80056bc <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800567a:	f3ef 8311 	mrs	r3, BASEPRI
 800567e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01a      	beq.n	80056bc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	4619      	mov	r1, r3
 8005690:	69b8      	ldr	r0, [r7, #24]
 8005692:	f000 fc4d 	bl	8005f30 <xQueueGiveFromISR>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d003      	beq.n	80056a4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800569c:	f06f 0302 	mvn.w	r3, #2
 80056a0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056a2:	e018      	b.n	80056d6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d015      	beq.n	80056d6 <osSemaphoreRelease+0x9a>
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <osSemaphoreRelease+0xac>)
 80056ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056ba:	e00c      	b.n	80056d6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056bc:	2300      	movs	r3, #0
 80056be:	2200      	movs	r2, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	69b8      	ldr	r0, [r7, #24]
 80056c4:	f000 fa9e 	bl	8005c04 <xQueueGenericSend>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d004      	beq.n	80056d8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80056ce:	f06f 0302 	mvn.w	r3, #2
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	e000      	b.n	80056d8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056d6:	bf00      	nop
    }
  }

  return (stat);
 80056d8:	69fb      	ldr	r3, [r7, #28]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	2000037c 	.word	0x2000037c
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a06      	ldr	r2, [pc, #24]	; (8005714 <vApplicationGetIdleTaskMemory+0x28>)
 80056fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a05      	ldr	r2, [pc, #20]	; (8005718 <vApplicationGetIdleTaskMemory+0x2c>)
 8005702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	20000380 	.word	0x20000380
 8005718:	2000043c 	.word	0x2000043c

0800571c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4a07      	ldr	r2, [pc, #28]	; (8005748 <vApplicationGetTimerTaskMemory+0x2c>)
 800572c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4a06      	ldr	r2, [pc, #24]	; (800574c <vApplicationGetTimerTaskMemory+0x30>)
 8005732:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573a:	601a      	str	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	2000063c 	.word	0x2000063c
 800574c:	200006f8 	.word	0x200006f8

08005750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f103 0208 	add.w	r2, r3, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f103 0208 	add.w	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f103 0208 	add.w	r2, r3, #8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d103      	bne.n	800580c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e00c      	b.n	8005826 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3308      	adds	r3, #8
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e002      	b.n	800581a <vListInsert+0x2e>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	d2f6      	bcs.n	8005814 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6892      	ldr	r2, [r2, #8]
 8005872:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6852      	ldr	r2, [r2, #4]
 800587c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	d103      	bne.n	8005890 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1e5a      	subs	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr
	...

080058b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058da:	f002 fd87 	bl	80083ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	441a      	add	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	3b01      	subs	r3, #1
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d114      	bne.n	800595a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01a      	beq.n	800596e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3310      	adds	r3, #16
 800593c:	4618      	mov	r0, r3
 800593e:	f001 fcd1 	bl	80072e4 <xTaskRemoveFromEventList>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d012      	beq.n	800596e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <xQueueGenericReset+0xcc>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	e009      	b.n	800596e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3310      	adds	r3, #16
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fef6 	bl	8005750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3324      	adds	r3, #36	; 0x24
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fef1 	bl	8005750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800596e:	f002 fd6d 	bl	800844c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005972:	2301      	movs	r3, #1
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08e      	sub	sp, #56	; 0x38
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <xQueueGenericCreateStatic+0x52>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <xQueueGenericCreateStatic+0x56>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <xQueueGenericCreateStatic+0x58>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	623b      	str	r3, [r7, #32]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <xQueueGenericCreateStatic+0x7e>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <xQueueGenericCreateStatic+0x82>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <xQueueGenericCreateStatic+0x84>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10a      	bne.n	8005a1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	61fb      	str	r3, [r7, #28]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a1e:	2350      	movs	r3, #80	; 0x50
 8005a20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b50      	cmp	r3, #80	; 0x50
 8005a26:	d00a      	beq.n	8005a3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	61bb      	str	r3, [r7, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00d      	beq.n	8005a64 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f843 	bl	8005aea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3730      	adds	r7, #48	; 0x30
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08a      	sub	sp, #40	; 0x28
 8005a72:	af02      	add	r7, sp, #8
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	613b      	str	r3, [r7, #16]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e004      	b.n	8005aae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
 8005aac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3350      	adds	r3, #80	; 0x50
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f002 fd9a 	bl	80085ec <pvPortMalloc>
 8005ab8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00f      	beq.n	8005ae0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	3350      	adds	r3, #80	; 0x50
 8005ac4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ace:	79fa      	ldrb	r2, [r7, #7]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f805 	bl	8005aea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e002      	b.n	8005b0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b18:	2101      	movs	r1, #1
 8005b1a:	69b8      	ldr	r0, [r7, #24]
 8005b1c:	f7ff fec8 	bl	80058b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	78fa      	ldrb	r2, [r7, #3]
 8005b24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	61bb      	str	r3, [r7, #24]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d90a      	bls.n	8005b76 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	617b      	str	r3, [r7, #20]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b76:	2302      	movs	r3, #2
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2100      	movs	r1, #0
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff fefd 	bl	8005980 <xQueueGenericCreateStatic>
 8005b86:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b94:	69fb      	ldr	r3, [r7, #28]
	}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	613b      	str	r3, [r7, #16]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d90a      	bls.n	8005be2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60fb      	str	r3, [r7, #12]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005be2:	2202      	movs	r2, #2
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ff41 	bl	8005a6e <xQueueGenericCreate>
 8005bec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005bfa:	697b      	ldr	r3, [r7, #20]
	}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08e      	sub	sp, #56	; 0x38
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c12:	2300      	movs	r3, #0
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xQueueGenericSend+0x32>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <xQueueGenericSend+0x40>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <xQueueGenericSend+0x44>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <xQueueGenericSend+0x46>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <xQueueGenericSend+0x60>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d103      	bne.n	8005c72 <xQueueGenericSend+0x6e>
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <xQueueGenericSend+0x72>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <xQueueGenericSend+0x74>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xQueueGenericSend+0x8e>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	623b      	str	r3, [r7, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c92:	f001 fced 	bl	8007670 <xTaskGetSchedulerState>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <xQueueGenericSend+0x9e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <xQueueGenericSend+0xa2>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xQueueGenericSend+0xa4>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61fb      	str	r3, [r7, #28]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cc2:	f002 fb93 	bl	80083ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <xQueueGenericSend+0xd4>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d129      	bne.n	8005d2c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cde:	f000 fc5b 	bl	8006598 <prvCopyDataToQueue>
 8005ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d010      	beq.n	8005d0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	3324      	adds	r3, #36	; 0x24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 faf7 	bl	80072e4 <xTaskRemoveFromEventList>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cfc:	4b3f      	ldr	r3, [pc, #252]	; (8005dfc <xQueueGenericSend+0x1f8>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	e00a      	b.n	8005d24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d14:	4b39      	ldr	r3, [pc, #228]	; (8005dfc <xQueueGenericSend+0x1f8>)
 8005d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d24:	f002 fb92 	bl	800844c <vPortExitCritical>
				return pdPASS;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e063      	b.n	8005df4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d32:	f002 fb8b 	bl	800844c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e05c      	b.n	8005df4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d40:	f107 0314 	add.w	r3, r7, #20
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 fb31 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d4e:	f002 fb7d 	bl	800844c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d52:	f001 f889 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d56:	f002 fb49 	bl	80083ec <vPortEnterCritical>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d60:	b25b      	sxtb	r3, r3
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d66:	d103      	bne.n	8005d70 <xQueueGenericSend+0x16c>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d76:	b25b      	sxtb	r3, r3
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d103      	bne.n	8005d86 <xQueueGenericSend+0x182>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d86:	f002 fb61 	bl	800844c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d8a:	1d3a      	adds	r2, r7, #4
 8005d8c:	f107 0314 	add.w	r3, r7, #20
 8005d90:	4611      	mov	r1, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fb20 	bl	80073d8 <xTaskCheckForTimeOut>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d124      	bne.n	8005de8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005da0:	f000 fcf2 	bl	8006788 <prvIsQueueFull>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d018      	beq.n	8005ddc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	3310      	adds	r3, #16
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 fa46 	bl	8007244 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dba:	f000 fc7d 	bl	80066b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dbe:	f001 f861 	bl	8006e84 <xTaskResumeAll>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f af7c 	bne.w	8005cc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <xQueueGenericSend+0x1f8>)
 8005dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	e772      	b.n	8005cc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dde:	f000 fc6b 	bl	80066b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005de2:	f001 f84f 	bl	8006e84 <xTaskResumeAll>
 8005de6:	e76c      	b.n	8005cc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dea:	f000 fc65 	bl	80066b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dee:	f001 f849 	bl	8006e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005df2:	2300      	movs	r3, #0
		}
	}
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3738      	adds	r7, #56	; 0x38
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	e000ed04 	.word	0xe000ed04

08005e00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08e      	sub	sp, #56	; 0x38
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <xQueueGenericSendFromISR+0x3c>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <xQueueGenericSendFromISR+0x40>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <xQueueGenericSendFromISR+0x42>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	623b      	str	r3, [r7, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d103      	bne.n	8005e6a <xQueueGenericSendFromISR+0x6a>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <xQueueGenericSendFromISR+0x6e>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueGenericSendFromISR+0x70>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61fb      	str	r3, [r7, #28]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e8a:	f002 fb71 	bl	8008570 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	61ba      	str	r2, [r7, #24]
 8005ea4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <xQueueGenericSendFromISR+0xbc>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d12c      	bne.n	8005f16 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ecc:	f000 fb64 	bl	8006598 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ed0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d112      	bne.n	8005f00 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	3324      	adds	r3, #36	; 0x24
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 f9fc 	bl	80072e4 <xTaskRemoveFromEventList>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e007      	b.n	8005f10 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f04:	3301      	adds	r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	b25a      	sxtb	r2, r3
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f10:	2301      	movs	r3, #1
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f14:	e001      	b.n	8005f1a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3738      	adds	r7, #56	; 0x38
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	; 0x38
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	623b      	str	r3, [r7, #32]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	61fb      	str	r3, [r7, #28]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <xQueueGiveFromISR+0x58>
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <xQueueGiveFromISR+0x5c>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <xQueueGiveFromISR+0x5e>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	61bb      	str	r3, [r7, #24]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fa8:	f002 fae2 	bl	8008570 <vPortValidateInterruptPriority>
	__asm volatile
 8005fac:	f3ef 8211 	mrs	r2, BASEPRI
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	617a      	str	r2, [r7, #20]
 8005fc2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005fc4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d22b      	bcs.n	8006030 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d112      	bne.n	800601a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d016      	beq.n	800602a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	3324      	adds	r3, #36	; 0x24
 8006000:	4618      	mov	r0, r3
 8006002:	f001 f96f 	bl	80072e4 <xTaskRemoveFromEventList>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2201      	movs	r2, #1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e007      	b.n	800602a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800601a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800601e:	3301      	adds	r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	b25a      	sxtb	r2, r3
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800602a:	2301      	movs	r3, #1
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	e001      	b.n	8006034 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006030:	2300      	movs	r3, #0
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f383 8811 	msr	BASEPRI, r3
}
 800603e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006042:	4618      	mov	r0, r3
 8006044:	3738      	adds	r7, #56	; 0x38
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08c      	sub	sp, #48	; 0x30
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006058:	2300      	movs	r3, #0
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <xQueueReceive+0x30>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	623b      	str	r3, [r7, #32]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <xQueueReceive+0x3e>
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <xQueueReceive+0x42>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueReceive+0x44>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueReceive+0x5e>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	61fb      	str	r3, [r7, #28]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060aa:	f001 fae1 	bl	8007670 <xTaskGetSchedulerState>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <xQueueReceive+0x6e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <xQueueReceive+0x72>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueReceive+0x74>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueReceive+0x8e>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	61bb      	str	r3, [r7, #24]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060da:	f002 f987 	bl	80083ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01f      	beq.n	800612a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ee:	f000 fabd 	bl	800666c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	3310      	adds	r3, #16
 8006106:	4618      	mov	r0, r3
 8006108:	f001 f8ec 	bl	80072e4 <xTaskRemoveFromEventList>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006112:	4b3d      	ldr	r3, [pc, #244]	; (8006208 <xQueueReceive+0x1bc>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006122:	f002 f993 	bl	800844c <vPortExitCritical>
				return pdPASS;
 8006126:	2301      	movs	r3, #1
 8006128:	e069      	b.n	80061fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006130:	f002 f98c 	bl	800844c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006134:	2300      	movs	r3, #0
 8006136:	e062      	b.n	80061fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800613e:	f107 0310 	add.w	r3, r7, #16
 8006142:	4618      	mov	r0, r3
 8006144:	f001 f932 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006148:	2301      	movs	r3, #1
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800614c:	f002 f97e 	bl	800844c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006150:	f000 fe8a 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006154:	f002 f94a 	bl	80083ec <vPortEnterCritical>
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800615e:	b25b      	sxtb	r3, r3
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d103      	bne.n	800616e <xQueueReceive+0x122>
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006174:	b25b      	sxtb	r3, r3
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d103      	bne.n	8006184 <xQueueReceive+0x138>
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006184:	f002 f962 	bl	800844c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006188:	1d3a      	adds	r2, r7, #4
 800618a:	f107 0310 	add.w	r3, r7, #16
 800618e:	4611      	mov	r1, r2
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f921 	bl	80073d8 <xTaskCheckForTimeOut>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d123      	bne.n	80061e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800619c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800619e:	f000 fadd 	bl	800675c <prvIsQueueEmpty>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d017      	beq.n	80061d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	4611      	mov	r1, r2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 f847 	bl	8007244 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b8:	f000 fa7e 	bl	80066b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061bc:	f000 fe62 	bl	8006e84 <xTaskResumeAll>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d189      	bne.n	80060da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061c6:	4b10      	ldr	r3, [pc, #64]	; (8006208 <xQueueReceive+0x1bc>)
 80061c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	e780      	b.n	80060da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061da:	f000 fa6d 	bl	80066b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061de:	f000 fe51 	bl	8006e84 <xTaskResumeAll>
 80061e2:	e77a      	b.n	80060da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e6:	f000 fa67 	bl	80066b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061ea:	f000 fe4b 	bl	8006e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f0:	f000 fab4 	bl	800675c <prvIsQueueEmpty>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f43f af6f 	beq.w	80060da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3730      	adds	r7, #48	; 0x30
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08e      	sub	sp, #56	; 0x38
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10a      	bne.n	800623e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	623b      	str	r3, [r7, #32]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	61fb      	str	r3, [r7, #28]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625c:	f001 fa08 	bl	8007670 <xTaskGetSchedulerState>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <xQueueSemaphoreTake+0x60>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <xQueueSemaphoreTake+0x64>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <xQueueSemaphoreTake+0x66>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	61bb      	str	r3, [r7, #24]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800628c:	f002 f8ae 	bl	80083ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d024      	beq.n	80062e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80062ac:	f001 fb60 	bl	8007970 <pvTaskIncrementMutexHeldCount>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00f      	beq.n	80062de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	3310      	adds	r3, #16
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 f80e 	bl	80072e4 <xTaskRemoveFromEventList>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ce:	4b54      	ldr	r3, [pc, #336]	; (8006420 <xQueueSemaphoreTake+0x214>)
 80062d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062de:	f002 f8b5 	bl	800844c <vPortExitCritical>
				return pdPASS;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e097      	b.n	8006416 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d111      	bne.n	8006310 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	617b      	str	r3, [r7, #20]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006308:	f002 f8a0 	bl	800844c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800630c:	2300      	movs	r3, #0
 800630e:	e082      	b.n	8006416 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006316:	f107 030c 	add.w	r3, r7, #12
 800631a:	4618      	mov	r0, r3
 800631c:	f001 f846 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006324:	f002 f892 	bl	800844c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006328:	f000 fd9e 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800632c:	f002 f85e 	bl	80083ec <vPortEnterCritical>
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d103      	bne.n	8006346 <xQueueSemaphoreTake+0x13a>
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d103      	bne.n	800635c <xQueueSemaphoreTake+0x150>
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800635c:	f002 f876 	bl	800844c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006360:	463a      	mov	r2, r7
 8006362:	f107 030c 	add.w	r3, r7, #12
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f001 f835 	bl	80073d8 <xTaskCheckForTimeOut>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d132      	bne.n	80063da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006376:	f000 f9f1 	bl	800675c <prvIsQueueEmpty>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d026      	beq.n	80063ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006388:	f002 f830 	bl	80083ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	f001 f98b 	bl	80076ac <xTaskPriorityInherit>
 8006396:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006398:	f002 f858 	bl	800844c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	3324      	adds	r3, #36	; 0x24
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	4611      	mov	r1, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 ff4d 	bl	8007244 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ac:	f000 f984 	bl	80066b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063b0:	f000 fd68 	bl	8006e84 <xTaskResumeAll>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f47f af68 	bne.w	800628c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063bc:	4b18      	ldr	r3, [pc, #96]	; (8006420 <xQueueSemaphoreTake+0x214>)
 80063be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	e75e      	b.n	800628c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063d0:	f000 f972 	bl	80066b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063d4:	f000 fd56 	bl	8006e84 <xTaskResumeAll>
 80063d8:	e758      	b.n	800628c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063dc:	f000 f96c 	bl	80066b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063e0:	f000 fd50 	bl	8006e84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e6:	f000 f9b9 	bl	800675c <prvIsQueueEmpty>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f43f af4d 	beq.w	800628c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80063f8:	f001 fff8 	bl	80083ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063fe:	f000 f8b4 	bl	800656a <prvGetDisinheritPriorityAfterTimeout>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800640a:	4618      	mov	r0, r3
 800640c:	f001 fa2a 	bl	8007864 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006410:	f002 f81c 	bl	800844c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006414:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006416:	4618      	mov	r0, r3
 8006418:	3738      	adds	r7, #56	; 0x38
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08e      	sub	sp, #56	; 0x38
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	623b      	str	r3, [r7, #32]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <xQueueReceiveFromISR+0x3a>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <xQueueReceiveFromISR+0x3e>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <xQueueReceiveFromISR+0x40>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61fb      	str	r3, [r7, #28]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800647e:	f002 f877 	bl	8008570 <vPortValidateInterruptPriority>
	__asm volatile
 8006482:	f3ef 8211 	mrs	r2, BASEPRI
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	61ba      	str	r2, [r7, #24]
 8006498:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800649a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02f      	beq.n	800650a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b8:	f000 f8d8 	bl	800666c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	1e5a      	subs	r2, r3, #1
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d112      	bne.n	80064f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	3310      	adds	r3, #16
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 ff02 	bl	80072e4 <xTaskRemoveFromEventList>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e007      	b.n	8006504 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f8:	3301      	adds	r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	b25a      	sxtb	r2, r3
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006504:	2301      	movs	r3, #1
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
 8006508:	e001      	b.n	800650e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800650a:	2300      	movs	r3, #0
 800650c:	637b      	str	r3, [r7, #52]	; 0x34
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f383 8811 	msr	BASEPRI, r3
}
 8006518:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800651c:	4618      	mov	r0, r3
 800651e:	3738      	adds	r7, #56	; 0x38
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <vQueueDelete+0x28>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	60bb      	str	r3, [r7, #8]
}
 8006548:	bf00      	nop
 800654a:	e7fe      	b.n	800654a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f95b 	bl	8006808 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f002 f909 	bl	8008774 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d006      	beq.n	8006588 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e001      	b.n	800658c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800658c:	68fb      	ldr	r3, [r7, #12]
	}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10d      	bne.n	80065d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d14d      	bne.n	800665a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f8e0 	bl	8007788 <xTaskPriorityDisinherit>
 80065c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	e043      	b.n	800665a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d119      	bne.n	800660c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6898      	ldr	r0, [r3, #8]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	461a      	mov	r2, r3
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	f002 fb01 	bl	8008bea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	441a      	add	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d32b      	bcc.n	800665a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	609a      	str	r2, [r3, #8]
 800660a:	e026      	b.n	800665a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68d8      	ldr	r0, [r3, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	461a      	mov	r2, r3
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	f002 fae7 	bl	8008bea <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	425b      	negs	r3, r3
 8006626:	441a      	add	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d207      	bcs.n	8006648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	425b      	negs	r3, r3
 8006642:	441a      	add	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d105      	bne.n	800665a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	3b01      	subs	r3, #1
 8006658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006662:	697b      	ldr	r3, [r7, #20]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d018      	beq.n	80066b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	441a      	add	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d303      	bcc.n	80066a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68d9      	ldr	r1, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	461a      	mov	r2, r3
 80066aa:	6838      	ldr	r0, [r7, #0]
 80066ac:	f002 fa9d 	bl	8008bea <memcpy>
	}
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066c0:	f001 fe94 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066cc:	e011      	b.n	80066f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d012      	beq.n	80066fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3324      	adds	r3, #36	; 0x24
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fe02 	bl	80072e4 <xTaskRemoveFromEventList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066e6:	f000 fed9 	bl	800749c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dce9      	bgt.n	80066ce <prvUnlockQueue+0x16>
 80066fa:	e000      	b.n	80066fe <prvUnlockQueue+0x46>
					break;
 80066fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	22ff      	movs	r2, #255	; 0xff
 8006702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006706:	f001 fea1 	bl	800844c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800670a:	f001 fe6f 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006714:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006716:	e011      	b.n	800673c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3310      	adds	r3, #16
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fddd 	bl	80072e4 <xTaskRemoveFromEventList>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006730:	f000 feb4 	bl	800749c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	3b01      	subs	r3, #1
 8006738:	b2db      	uxtb	r3, r3
 800673a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800673c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	dce9      	bgt.n	8006718 <prvUnlockQueue+0x60>
 8006744:	e000      	b.n	8006748 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006746:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006750:	f001 fe7c 	bl	800844c <vPortExitCritical>
}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006764:	f001 fe42 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e001      	b.n	800677a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800677a:	f001 fe67 	bl	800844c <vPortExitCritical>

	return xReturn;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006790:	f001 fe2c 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679c:	429a      	cmp	r2, r3
 800679e:	d102      	bne.n	80067a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e001      	b.n	80067aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067aa:	f001 fe4f 	bl	800844c <vPortExitCritical>

	return xReturn;
 80067ae:	68fb      	ldr	r3, [r7, #12]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	e014      	b.n	80067f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067c8:	4a0e      	ldr	r2, [pc, #56]	; (8006804 <vQueueAddToRegistry+0x4c>)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067d4:	490b      	ldr	r1, [pc, #44]	; (8006804 <vQueueAddToRegistry+0x4c>)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <vQueueAddToRegistry+0x4c>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4413      	add	r3, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067ea:	e006      	b.n	80067fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b07      	cmp	r3, #7
 80067f6:	d9e7      	bls.n	80067c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr
 8006804:	20000af8 	.word	0x20000af8

08006808 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e016      	b.n	8006844 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006816:	4a10      	ldr	r2, [pc, #64]	; (8006858 <vQueueUnregisterQueue+0x50>)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d10b      	bne.n	800683e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006826:	4a0c      	ldr	r2, [pc, #48]	; (8006858 <vQueueUnregisterQueue+0x50>)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2100      	movs	r1, #0
 800682c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006830:	4a09      	ldr	r2, [pc, #36]	; (8006858 <vQueueUnregisterQueue+0x50>)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4413      	add	r3, r2
 8006838:	2200      	movs	r2, #0
 800683a:	605a      	str	r2, [r3, #4]
				break;
 800683c:	e006      	b.n	800684c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b07      	cmp	r3, #7
 8006848:	d9e5      	bls.n	8006816 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000af8 	.word	0x20000af8

0800685c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800686c:	f001 fdbe 	bl	80083ec <vPortEnterCritical>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006876:	b25b      	sxtb	r3, r3
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d103      	bne.n	8006886 <vQueueWaitForMessageRestricted+0x2a>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800688c:	b25b      	sxtb	r3, r3
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006892:	d103      	bne.n	800689c <vQueueWaitForMessageRestricted+0x40>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800689c:	f001 fdd6 	bl	800844c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	3324      	adds	r3, #36	; 0x24
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fceb 	bl	800728c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068b6:	6978      	ldr	r0, [r7, #20]
 80068b8:	f7ff fefe 	bl	80066b8 <prvUnlockQueue>
	}
 80068bc:	bf00      	nop
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08e      	sub	sp, #56	; 0x38
 80068c8:	af04      	add	r7, sp, #16
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <xTaskCreateStatic+0x46>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	61fb      	str	r3, [r7, #28]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800690a:	23bc      	movs	r3, #188	; 0xbc
 800690c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2bbc      	cmp	r3, #188	; 0xbc
 8006912:	d00a      	beq.n	800692a <xTaskCreateStatic+0x66>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	61bb      	str	r3, [r7, #24]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01e      	beq.n	800696e <xTaskCreateStatic+0xaa>
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01b      	beq.n	800696e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800693e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	2202      	movs	r2, #2
 8006944:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006948:	2300      	movs	r3, #0
 800694a:	9303      	str	r3, [sp, #12]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f851 	bl	8006a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006968:	f000 f8ec 	bl	8006b44 <prvAddNewTaskToReadyList>
 800696c:	e001      	b.n	8006972 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006972:	697b      	ldr	r3, [r7, #20]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	3728      	adds	r7, #40	; 0x28
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	; 0x30
 8006980:	af04      	add	r7, sp, #16
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fe2b 	bl	80085ec <pvPortMalloc>
 8006996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800699e:	20bc      	movs	r0, #188	; 0xbc
 80069a0:	f001 fe24 	bl	80085ec <pvPortMalloc>
 80069a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
 80069b2:	e005      	b.n	80069c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f001 fedd 	bl	8008774 <vPortFree>
 80069ba:	e001      	b.n	80069c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d017      	beq.n	80069f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069ce:	88fa      	ldrh	r2, [r7, #6]
 80069d0:	2300      	movs	r3, #0
 80069d2:	9303      	str	r3, [sp, #12]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	9302      	str	r3, [sp, #8]
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f80f 	bl	8006a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ea:	69f8      	ldr	r0, [r7, #28]
 80069ec:	f000 f8aa 	bl	8006b44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e002      	b.n	80069fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069f6:	f04f 33ff 	mov.w	r3, #4294967295
 80069fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069fc:	69bb      	ldr	r3, [r7, #24]
	}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	461a      	mov	r2, r3
 8006a20:	21a5      	movs	r1, #165	; 0xa5
 8006a22:	f002 f8f0 	bl	8008c06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a30:	3b01      	subs	r3, #1
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e012      	b.n	8006a8c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	7819      	ldrb	r1, [r3, #0]
 8006a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	3334      	adds	r3, #52	; 0x34
 8006a76:	460a      	mov	r2, r1
 8006a78:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d006      	beq.n	8006a94 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	d9e9      	bls.n	8006a66 <prvInitialiseNewTask+0x5e>
 8006a92:	e000      	b.n	8006a96 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006a94:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	2b37      	cmp	r3, #55	; 0x37
 8006aa2:	d901      	bls.n	8006aa8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006aa4:	2337      	movs	r3, #55	; 0x37
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	3304      	adds	r3, #4
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fe65 	bl	800578e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	3318      	adds	r3, #24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fe60 	bl	800578e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	3354      	adds	r3, #84	; 0x54
 8006af8:	2260      	movs	r2, #96	; 0x60
 8006afa:	2100      	movs	r1, #0
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 f882 	bl	8008c06 <memset>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <prvInitialiseNewTask+0x130>)
 8006b06:	659a      	str	r2, [r3, #88]	; 0x58
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	4a0c      	ldr	r2, [pc, #48]	; (8006b3c <prvInitialiseNewTask+0x134>)
 8006b0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	4a0b      	ldr	r2, [pc, #44]	; (8006b40 <prvInitialiseNewTask+0x138>)
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	69b8      	ldr	r0, [r7, #24]
 8006b1a:	f001 fb79 	bl	8008210 <pxPortInitialiseStack>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b30:	bf00      	nop
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	0800d83c 	.word	0x0800d83c
 8006b3c:	0800d85c 	.word	0x0800d85c
 8006b40:	0800d81c 	.word	0x0800d81c

08006b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b4c:	f001 fc4e 	bl	80083ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b50:	4b2d      	ldr	r3, [pc, #180]	; (8006c08 <prvAddNewTaskToReadyList+0xc4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <prvAddNewTaskToReadyList+0xc4>)
 8006b58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b5a:	4b2c      	ldr	r3, [pc, #176]	; (8006c0c <prvAddNewTaskToReadyList+0xc8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b62:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <prvAddNewTaskToReadyList+0xc8>)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b68:	4b27      	ldr	r3, [pc, #156]	; (8006c08 <prvAddNewTaskToReadyList+0xc4>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d110      	bne.n	8006b92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b70:	f000 fcb8 	bl	80074e4 <prvInitialiseTaskLists>
 8006b74:	e00d      	b.n	8006b92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b76:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <prvAddNewTaskToReadyList+0xcc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b7e:	4b23      	ldr	r3, [pc, #140]	; (8006c0c <prvAddNewTaskToReadyList+0xc8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d802      	bhi.n	8006b92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b8c:	4a1f      	ldr	r2, [pc, #124]	; (8006c0c <prvAddNewTaskToReadyList+0xc8>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b92:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <prvAddNewTaskToReadyList+0xd0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <prvAddNewTaskToReadyList+0xd0>)
 8006b9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <prvAddNewTaskToReadyList+0xd0>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <prvAddNewTaskToReadyList+0xd4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d903      	bls.n	8006bb8 <prvAddNewTaskToReadyList+0x74>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <prvAddNewTaskToReadyList+0xd4>)
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <prvAddNewTaskToReadyList+0xd8>)
 8006bc6:	441a      	add	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f7fe fde9 	bl	80057a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bd4:	f001 fc3a 	bl	800844c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <prvAddNewTaskToReadyList+0xcc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00e      	beq.n	8006bfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <prvAddNewTaskToReadyList+0xc8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d207      	bcs.n	8006bfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <prvAddNewTaskToReadyList+0xdc>)
 8006bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	2000100c 	.word	0x2000100c
 8006c0c:	20000b38 	.word	0x20000b38
 8006c10:	20001018 	.word	0x20001018
 8006c14:	20001028 	.word	0x20001028
 8006c18:	20001014 	.word	0x20001014
 8006c1c:	20000b3c 	.word	0x20000b3c
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	; 0x28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <vTaskDelayUntil+0x2a>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	617b      	str	r3, [r7, #20]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <vTaskDelayUntil+0x46>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	613b      	str	r3, [r7, #16]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006c6a:	4b2a      	ldr	r3, [pc, #168]	; (8006d14 <vTaskDelayUntil+0xf0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <vTaskDelayUntil+0x64>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	60fb      	str	r3, [r7, #12]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006c88:	f000 f8ee 	bl	8006e68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006c8c:	4b22      	ldr	r3, [pc, #136]	; (8006d18 <vTaskDelayUntil+0xf4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	4413      	add	r3, r2
 8006c9a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a3a      	ldr	r2, [r7, #32]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d20b      	bcs.n	8006cbe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d211      	bcs.n	8006cd4 <vTaskDelayUntil+0xb0>
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d90d      	bls.n	8006cd4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
 8006cbc:	e00a      	b.n	8006cd4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d303      	bcc.n	8006cd0 <vTaskDelayUntil+0xac>
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d901      	bls.n	8006cd4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fe55 	bl	8007998 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006cee:	f000 f8c9 	bl	8006e84 <xTaskResumeAll>
 8006cf2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d107      	bne.n	8006d0a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006cfa:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <vTaskDelayUntil+0xf8>)
 8006cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d0a:	bf00      	nop
 8006d0c:	3728      	adds	r7, #40	; 0x28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20001034 	.word	0x20001034
 8006d18:	20001010 	.word	0x20001010
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d017      	beq.n	8006d62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d32:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <vTaskDelay+0x60>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <vTaskDelay+0x30>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60bb      	str	r3, [r7, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d50:	f000 f88a 	bl	8006e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fe1e 	bl	8007998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d5c:	f000 f892 	bl	8006e84 <xTaskResumeAll>
 8006d60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d107      	bne.n	8006d78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <vTaskDelay+0x64>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20001034 	.word	0x20001034
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	; 0x28
 8006d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d96:	463a      	mov	r2, r7
 8006d98:	1d39      	adds	r1, r7, #4
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fca4 	bl	80056ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	9202      	str	r2, [sp, #8]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2300      	movs	r3, #0
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	460a      	mov	r2, r1
 8006db6:	4924      	ldr	r1, [pc, #144]	; (8006e48 <vTaskStartScheduler+0xc0>)
 8006db8:	4824      	ldr	r0, [pc, #144]	; (8006e4c <vTaskStartScheduler+0xc4>)
 8006dba:	f7ff fd83 	bl	80068c4 <xTaskCreateStatic>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4a23      	ldr	r2, [pc, #140]	; (8006e50 <vTaskStartScheduler+0xc8>)
 8006dc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dc4:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <vTaskStartScheduler+0xc8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e001      	b.n	8006dd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d102      	bne.n	8006de2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ddc:	f000 fe30 	bl	8007a40 <xTimerCreateTimerTask>
 8006de0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d11b      	bne.n	8006e20 <vTaskStartScheduler+0x98>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	613b      	str	r3, [r7, #16]
}
 8006dfa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dfc:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <vTaskStartScheduler+0xcc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3354      	adds	r3, #84	; 0x54
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <vTaskStartScheduler+0xd0>)
 8006e04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <vTaskStartScheduler+0xd4>)
 8006e08:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <vTaskStartScheduler+0xd8>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006e14:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <vTaskStartScheduler+0xdc>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e1a:	f001 fa75 	bl	8008308 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e1e:	e00e      	b.n	8006e3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d10a      	bne.n	8006e3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	60fb      	str	r3, [r7, #12]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <vTaskStartScheduler+0xb4>
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	0800d73c 	.word	0x0800d73c
 8006e4c:	080074b5 	.word	0x080074b5
 8006e50:	20001030 	.word	0x20001030
 8006e54:	20000b38 	.word	0x20000b38
 8006e58:	20000060 	.word	0x20000060
 8006e5c:	2000102c 	.word	0x2000102c
 8006e60:	20001018 	.word	0x20001018
 8006e64:	20001010 	.word	0x20001010

08006e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e6c:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	4a03      	ldr	r2, [pc, #12]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e74:	6013      	str	r3, [r2, #0]
}
 8006e76:	bf00      	nop
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20001034 	.word	0x20001034

08006e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e92:	4b42      	ldr	r3, [pc, #264]	; (8006f9c <xTaskResumeAll+0x118>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	603b      	str	r3, [r7, #0]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eb0:	f001 fa9c 	bl	80083ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006eb4:	4b39      	ldr	r3, [pc, #228]	; (8006f9c <xTaskResumeAll+0x118>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4a38      	ldr	r2, [pc, #224]	; (8006f9c <xTaskResumeAll+0x118>)
 8006ebc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ebe:	4b37      	ldr	r3, [pc, #220]	; (8006f9c <xTaskResumeAll+0x118>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d162      	bne.n	8006f8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ec6:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <xTaskResumeAll+0x11c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d05e      	beq.n	8006f8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ece:	e02f      	b.n	8006f30 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ed0:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <xTaskResumeAll+0x120>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3318      	adds	r3, #24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe fcbd 	bl	800585c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fcb8 	bl	800585c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <xTaskResumeAll+0x7c>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4a27      	ldr	r2, [pc, #156]	; (8006fac <xTaskResumeAll+0x128>)
 8006f0e:	441a      	add	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fe fc45 	bl	80057a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <xTaskResumeAll+0x12c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f2a:	4b22      	ldr	r3, [pc, #136]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xTaskResumeAll+0x120>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1cb      	bne.n	8006ed0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f3e:	f000 fb73 	bl	8007628 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f4e:	f000 f857 	bl	8007000 <xTaskIncrementTick>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f1      	bne.n	8006f4e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d009      	beq.n	8006f8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <xTaskResumeAll+0x138>)
 8006f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f8c:	f001 fa5e 	bl	800844c <vPortExitCritical>

	return xAlreadyYielded;
 8006f90:	68bb      	ldr	r3, [r7, #8]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20001034 	.word	0x20001034
 8006fa0:	2000100c 	.word	0x2000100c
 8006fa4:	20000fcc 	.word	0x20000fcc
 8006fa8:	20001014 	.word	0x20001014
 8006fac:	20000b3c 	.word	0x20000b3c
 8006fb0:	20000b38 	.word	0x20000b38
 8006fb4:	20001020 	.word	0x20001020
 8006fb8:	2000101c 	.word	0x2000101c
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fc6:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <xTaskGetTickCount+0x18>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fcc:	687b      	ldr	r3, [r7, #4]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr
 8006fd8:	20001010 	.word	0x20001010

08006fdc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fe2:	f001 fac5 	bl	8008570 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fea:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <xTaskGetTickCountFromISR+0x20>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ff0:	683b      	ldr	r3, [r7, #0]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20001010 	.word	0x20001010

08007000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b51      	ldr	r3, [pc, #324]	; (8007150 <xTaskIncrementTick+0x150>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 808e 	bne.w	8007130 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007014:	4b4f      	ldr	r3, [pc, #316]	; (8007154 <xTaskIncrementTick+0x154>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800701c:	4a4d      	ldr	r2, [pc, #308]	; (8007154 <xTaskIncrementTick+0x154>)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d120      	bne.n	800706a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007028:	4b4b      	ldr	r3, [pc, #300]	; (8007158 <xTaskIncrementTick+0x158>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <xTaskIncrementTick+0x48>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	603b      	str	r3, [r7, #0]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <xTaskIncrementTick+0x46>
 8007048:	4b43      	ldr	r3, [pc, #268]	; (8007158 <xTaskIncrementTick+0x158>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	4b43      	ldr	r3, [pc, #268]	; (800715c <xTaskIncrementTick+0x15c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a41      	ldr	r2, [pc, #260]	; (8007158 <xTaskIncrementTick+0x158>)
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4a41      	ldr	r2, [pc, #260]	; (800715c <xTaskIncrementTick+0x15c>)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	4b40      	ldr	r3, [pc, #256]	; (8007160 <xTaskIncrementTick+0x160>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	4a3f      	ldr	r2, [pc, #252]	; (8007160 <xTaskIncrementTick+0x160>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	f000 fadf 	bl	8007628 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800706a:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <xTaskIncrementTick+0x164>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d34e      	bcc.n	8007112 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007074:	4b38      	ldr	r3, [pc, #224]	; (8007158 <xTaskIncrementTick+0x158>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <xTaskIncrementTick+0x82>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <xTaskIncrementTick+0x84>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007088:	4b36      	ldr	r3, [pc, #216]	; (8007164 <xTaskIncrementTick+0x164>)
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	601a      	str	r2, [r3, #0]
					break;
 8007090:	e03f      	b.n	8007112 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007092:	4b31      	ldr	r3, [pc, #196]	; (8007158 <xTaskIncrementTick+0x158>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d203      	bcs.n	80070b2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070aa:	4a2e      	ldr	r2, [pc, #184]	; (8007164 <xTaskIncrementTick+0x164>)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6013      	str	r3, [r2, #0]
						break;
 80070b0:	e02f      	b.n	8007112 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3304      	adds	r3, #4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fbd0 	bl	800585c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3318      	adds	r3, #24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fbc7 	bl	800585c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d2:	4b25      	ldr	r3, [pc, #148]	; (8007168 <xTaskIncrementTick+0x168>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d903      	bls.n	80070e2 <xTaskIncrementTick+0xe2>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4a22      	ldr	r2, [pc, #136]	; (8007168 <xTaskIncrementTick+0x168>)
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4a1f      	ldr	r2, [pc, #124]	; (800716c <xTaskIncrementTick+0x16c>)
 80070f0:	441a      	add	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	3304      	adds	r3, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7fe fb54 	bl	80057a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	4b1b      	ldr	r3, [pc, #108]	; (8007170 <xTaskIncrementTick+0x170>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	429a      	cmp	r2, r3
 800710a:	d3b3      	bcc.n	8007074 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800710c:	2301      	movs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007110:	e7b0      	b.n	8007074 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007112:	4b17      	ldr	r3, [pc, #92]	; (8007170 <xTaskIncrementTick+0x170>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4914      	ldr	r1, [pc, #80]	; (800716c <xTaskIncrementTick+0x16c>)
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d907      	bls.n	800713a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800712a:	2301      	movs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	e004      	b.n	800713a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007130:	4b10      	ldr	r3, [pc, #64]	; (8007174 <xTaskIncrementTick+0x174>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	4a0f      	ldr	r2, [pc, #60]	; (8007174 <xTaskIncrementTick+0x174>)
 8007138:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <xTaskIncrementTick+0x178>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007142:	2301      	movs	r3, #1
 8007144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007146:	697b      	ldr	r3, [r7, #20]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20001034 	.word	0x20001034
 8007154:	20001010 	.word	0x20001010
 8007158:	20000fc4 	.word	0x20000fc4
 800715c:	20000fc8 	.word	0x20000fc8
 8007160:	20001024 	.word	0x20001024
 8007164:	2000102c 	.word	0x2000102c
 8007168:	20001014 	.word	0x20001014
 800716c:	20000b3c 	.word	0x20000b3c
 8007170:	20000b38 	.word	0x20000b38
 8007174:	2000101c 	.word	0x2000101c
 8007178:	20001020 	.word	0x20001020

0800717c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007182:	4b2a      	ldr	r3, [pc, #168]	; (800722c <vTaskSwitchContext+0xb0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800718a:	4b29      	ldr	r3, [pc, #164]	; (8007230 <vTaskSwitchContext+0xb4>)
 800718c:	2201      	movs	r2, #1
 800718e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007190:	e046      	b.n	8007220 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007192:	4b27      	ldr	r3, [pc, #156]	; (8007230 <vTaskSwitchContext+0xb4>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007198:	4b26      	ldr	r3, [pc, #152]	; (8007234 <vTaskSwitchContext+0xb8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	e010      	b.n	80071c2 <vTaskSwitchContext+0x46>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <vTaskSwitchContext+0x40>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	607b      	str	r3, [r7, #4]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <vTaskSwitchContext+0x3e>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3b01      	subs	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	491d      	ldr	r1, [pc, #116]	; (8007238 <vTaskSwitchContext+0xbc>)
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0e4      	beq.n	80071a0 <vTaskSwitchContext+0x24>
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4a15      	ldr	r2, [pc, #84]	; (8007238 <vTaskSwitchContext+0xbc>)
 80071e2:	4413      	add	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	605a      	str	r2, [r3, #4]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3308      	adds	r3, #8
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d104      	bne.n	8007206 <vTaskSwitchContext+0x8a>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	4a0b      	ldr	r2, [pc, #44]	; (800723c <vTaskSwitchContext+0xc0>)
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	4a08      	ldr	r2, [pc, #32]	; (8007234 <vTaskSwitchContext+0xb8>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <vTaskSwitchContext+0xc0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3354      	adds	r3, #84	; 0x54
 800721c:	4a08      	ldr	r2, [pc, #32]	; (8007240 <vTaskSwitchContext+0xc4>)
 800721e:	6013      	str	r3, [r2, #0]
}
 8007220:	bf00      	nop
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20001034 	.word	0x20001034
 8007230:	20001020 	.word	0x20001020
 8007234:	20001014 	.word	0x20001014
 8007238:	20000b3c 	.word	0x20000b3c
 800723c:	20000b38 	.word	0x20000b38
 8007240:	20000060 	.word	0x20000060

08007244 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60fb      	str	r3, [r7, #12]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800726a:	4b07      	ldr	r3, [pc, #28]	; (8007288 <vTaskPlaceOnEventList+0x44>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3318      	adds	r3, #24
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fe faba 	bl	80057ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007278:	2101      	movs	r1, #1
 800727a:	6838      	ldr	r0, [r7, #0]
 800727c:	f000 fb8c 	bl	8007998 <prvAddCurrentTaskToDelayedList>
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000b38 	.word	0x20000b38

0800728c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	617b      	str	r3, [r7, #20]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072b4:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3318      	adds	r3, #24
 80072ba:	4619      	mov	r1, r3
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7fe fa72 	bl	80057a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072c8:	f04f 33ff 	mov.w	r3, #4294967295
 80072cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68b8      	ldr	r0, [r7, #8]
 80072d2:	f000 fb61 	bl	8007998 <prvAddCurrentTaskToDelayedList>
	}
 80072d6:	bf00      	nop
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000b38 	.word	0x20000b38

080072e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10a      	bne.n	8007310 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	60fb      	str	r3, [r7, #12]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	3318      	adds	r3, #24
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe faa1 	bl	800585c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <xTaskRemoveFromEventList+0xb0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11d      	bne.n	800735e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3304      	adds	r3, #4
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fa98 	bl	800585c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4b19      	ldr	r3, [pc, #100]	; (8007398 <xTaskRemoveFromEventList+0xb4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d903      	bls.n	8007340 <xTaskRemoveFromEventList+0x5c>
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	4a16      	ldr	r2, [pc, #88]	; (8007398 <xTaskRemoveFromEventList+0xb4>)
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4a13      	ldr	r2, [pc, #76]	; (800739c <xTaskRemoveFromEventList+0xb8>)
 800734e:	441a      	add	r2, r3
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f7fe fa25 	bl	80057a6 <vListInsertEnd>
 800735c:	e005      	b.n	800736a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	3318      	adds	r3, #24
 8007362:	4619      	mov	r1, r3
 8007364:	480e      	ldr	r0, [pc, #56]	; (80073a0 <xTaskRemoveFromEventList+0xbc>)
 8007366:	f7fe fa1e 	bl	80057a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <xTaskRemoveFromEventList+0xc0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	429a      	cmp	r2, r3
 8007376:	d905      	bls.n	8007384 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <xTaskRemoveFromEventList+0xc4>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e001      	b.n	8007388 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007388:	697b      	ldr	r3, [r7, #20]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20001034 	.word	0x20001034
 8007398:	20001014 	.word	0x20001014
 800739c:	20000b3c 	.word	0x20000b3c
 80073a0:	20000fcc 	.word	0x20000fcc
 80073a4:	20000b38 	.word	0x20000b38
 80073a8:	20001020 	.word	0x20001020

080073ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <vTaskInternalSetTimeOutState+0x24>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <vTaskInternalSetTimeOutState+0x28>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	605a      	str	r2, [r3, #4]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20001024 	.word	0x20001024
 80073d4:	20001010 	.word	0x20001010

080073d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	60fb      	str	r3, [r7, #12]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800741a:	f000 ffe7 	bl	80083ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <xTaskCheckForTimeOut+0xbc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d102      	bne.n	800743e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e023      	b.n	8007486 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <xTaskCheckForTimeOut+0xc0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d007      	beq.n	800745a <xTaskCheckForTimeOut+0x82>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	429a      	cmp	r2, r3
 8007452:	d302      	bcc.n	800745a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007454:	2301      	movs	r3, #1
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e015      	b.n	8007486 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	429a      	cmp	r2, r3
 8007462:	d20b      	bcs.n	800747c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	1ad2      	subs	r2, r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff9b 	bl	80073ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	e004      	b.n	8007486 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007482:	2301      	movs	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007486:	f000 ffe1 	bl	800844c <vPortExitCritical>

	return xReturn;
 800748a:	69fb      	ldr	r3, [r7, #28]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20001010 	.word	0x20001010
 8007498:	20001024 	.word	0x20001024

0800749c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074a0:	4b03      	ldr	r3, [pc, #12]	; (80074b0 <vTaskMissedYield+0x14>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	20001020 	.word	0x20001020

080074b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074bc:	f000 f852 	bl	8007564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <prvIdleTask+0x28>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d9f9      	bls.n	80074bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <prvIdleTask+0x2c>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d8:	e7f0      	b.n	80074bc <prvIdleTask+0x8>
 80074da:	bf00      	nop
 80074dc:	20000b3c 	.word	0x20000b3c
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ea:	2300      	movs	r3, #0
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	e00c      	b.n	800750a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4a12      	ldr	r2, [pc, #72]	; (8007544 <prvInitialiseTaskLists+0x60>)
 80074fc:	4413      	add	r3, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe f926 	bl	8005750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3301      	adds	r3, #1
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b37      	cmp	r3, #55	; 0x37
 800750e:	d9ef      	bls.n	80074f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007510:	480d      	ldr	r0, [pc, #52]	; (8007548 <prvInitialiseTaskLists+0x64>)
 8007512:	f7fe f91d 	bl	8005750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007516:	480d      	ldr	r0, [pc, #52]	; (800754c <prvInitialiseTaskLists+0x68>)
 8007518:	f7fe f91a 	bl	8005750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800751c:	480c      	ldr	r0, [pc, #48]	; (8007550 <prvInitialiseTaskLists+0x6c>)
 800751e:	f7fe f917 	bl	8005750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007522:	480c      	ldr	r0, [pc, #48]	; (8007554 <prvInitialiseTaskLists+0x70>)
 8007524:	f7fe f914 	bl	8005750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007528:	480b      	ldr	r0, [pc, #44]	; (8007558 <prvInitialiseTaskLists+0x74>)
 800752a:	f7fe f911 	bl	8005750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <prvInitialiseTaskLists+0x78>)
 8007530:	4a05      	ldr	r2, [pc, #20]	; (8007548 <prvInitialiseTaskLists+0x64>)
 8007532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <prvInitialiseTaskLists+0x7c>)
 8007536:	4a05      	ldr	r2, [pc, #20]	; (800754c <prvInitialiseTaskLists+0x68>)
 8007538:	601a      	str	r2, [r3, #0]
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000b3c 	.word	0x20000b3c
 8007548:	20000f9c 	.word	0x20000f9c
 800754c:	20000fb0 	.word	0x20000fb0
 8007550:	20000fcc 	.word	0x20000fcc
 8007554:	20000fe0 	.word	0x20000fe0
 8007558:	20000ff8 	.word	0x20000ff8
 800755c:	20000fc4 	.word	0x20000fc4
 8007560:	20000fc8 	.word	0x20000fc8

08007564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800756a:	e019      	b.n	80075a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800756c:	f000 ff3e 	bl	80083ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007570:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <prvCheckTasksWaitingTermination+0x50>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe f96d 	bl	800585c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <prvCheckTasksWaitingTermination+0x54>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3b01      	subs	r3, #1
 8007588:	4a0b      	ldr	r2, [pc, #44]	; (80075b8 <prvCheckTasksWaitingTermination+0x54>)
 800758a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <prvCheckTasksWaitingTermination+0x58>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <prvCheckTasksWaitingTermination+0x58>)
 8007594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007596:	f000 ff59 	bl	800844c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f810 	bl	80075c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075a0:	4b06      	ldr	r3, [pc, #24]	; (80075bc <prvCheckTasksWaitingTermination+0x58>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e1      	bne.n	800756c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000fe0 	.word	0x20000fe0
 80075b8:	2000100c 	.word	0x2000100c
 80075bc:	20000ff4 	.word	0x20000ff4

080075c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3354      	adds	r3, #84	; 0x54
 80075cc:	4618      	mov	r0, r3
 80075ce:	f002 fac1 	bl	8009b54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 f8c7 	bl	8008774 <vPortFree>
				vPortFree( pxTCB );
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f8c4 	bl	8008774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075ec:	e018      	b.n	8007620 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d103      	bne.n	8007600 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f8bb 	bl	8008774 <vPortFree>
	}
 80075fe:	e00f      	b.n	8007620 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007606:	2b02      	cmp	r3, #2
 8007608:	d00a      	beq.n	8007620 <prvDeleteTCB+0x60>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	60fb      	str	r3, [r7, #12]
}
 800761c:	bf00      	nop
 800761e:	e7fe      	b.n	800761e <prvDeleteTCB+0x5e>
	}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800762e:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <prvResetNextTaskUnblockTime+0x40>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <prvResetNextTaskUnblockTime+0x14>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <prvResetNextTaskUnblockTime+0x16>
 800763c:	2300      	movs	r3, #0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007642:	4b0a      	ldr	r3, [pc, #40]	; (800766c <prvResetNextTaskUnblockTime+0x44>)
 8007644:	f04f 32ff 	mov.w	r2, #4294967295
 8007648:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800764a:	e008      	b.n	800765e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <prvResetNextTaskUnblockTime+0x40>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4a04      	ldr	r2, [pc, #16]	; (800766c <prvResetNextTaskUnblockTime+0x44>)
 800765c:	6013      	str	r3, [r2, #0]
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr
 8007668:	20000fc4 	.word	0x20000fc4
 800766c:	2000102c 	.word	0x2000102c

08007670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <xTaskGetSchedulerState+0x34>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800767e:	2301      	movs	r3, #1
 8007680:	607b      	str	r3, [r7, #4]
 8007682:	e008      	b.n	8007696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007684:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <xTaskGetSchedulerState+0x38>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800768c:	2302      	movs	r3, #2
 800768e:	607b      	str	r3, [r7, #4]
 8007690:	e001      	b.n	8007696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007692:	2300      	movs	r3, #0
 8007694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007696:	687b      	ldr	r3, [r7, #4]
	}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20001018 	.word	0x20001018
 80076a8:	20001034 	.word	0x20001034

080076ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d056      	beq.n	8007770 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	4b2d      	ldr	r3, [pc, #180]	; (800777c <xTaskPriorityInherit+0xd0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d246      	bcs.n	800775e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	db06      	blt.n	80076e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d8:	4b28      	ldr	r3, [pc, #160]	; (800777c <xTaskPriorityInherit+0xd0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6959      	ldr	r1, [r3, #20]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4a22      	ldr	r2, [pc, #136]	; (8007780 <xTaskPriorityInherit+0xd4>)
 80076f8:	4413      	add	r3, r2
 80076fa:	4299      	cmp	r1, r3
 80076fc:	d101      	bne.n	8007702 <xTaskPriorityInherit+0x56>
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <xTaskPriorityInherit+0x58>
 8007702:	2300      	movs	r3, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d022      	beq.n	800774e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	3304      	adds	r3, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f7fe f8a5 	bl	800585c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007712:	4b1a      	ldr	r3, [pc, #104]	; (800777c <xTaskPriorityInherit+0xd0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007720:	4b18      	ldr	r3, [pc, #96]	; (8007784 <xTaskPriorityInherit+0xd8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d903      	bls.n	8007730 <xTaskPriorityInherit+0x84>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <xTaskPriorityInherit+0xd8>)
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4a10      	ldr	r2, [pc, #64]	; (8007780 <xTaskPriorityInherit+0xd4>)
 800773e:	441a      	add	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fe f82d 	bl	80057a6 <vListInsertEnd>
 800774c:	e004      	b.n	8007758 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800774e:	4b0b      	ldr	r3, [pc, #44]	; (800777c <xTaskPriorityInherit+0xd0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007758:	2301      	movs	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e008      	b.n	8007770 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <xTaskPriorityInherit+0xd0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	429a      	cmp	r2, r3
 800776a:	d201      	bcs.n	8007770 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007770:	68fb      	ldr	r3, [r7, #12]
	}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000b38 	.word	0x20000b38
 8007780:	20000b3c 	.word	0x20000b3c
 8007784:	20001014 	.word	0x20001014

08007788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d056      	beq.n	800784c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800779e:	4b2e      	ldr	r3, [pc, #184]	; (8007858 <xTaskPriorityDisinherit+0xd0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d00a      	beq.n	80077be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60bb      	str	r3, [r7, #8]
}
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	1e5a      	subs	r2, r3, #1
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d02c      	beq.n	800784c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d128      	bne.n	800784c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3304      	adds	r3, #4
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe f82c 	bl	800585c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <xTaskPriorityDisinherit+0xd4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <xTaskPriorityDisinherit+0xa4>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	4a0c      	ldr	r2, [pc, #48]	; (800785c <xTaskPriorityDisinherit+0xd4>)
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4a09      	ldr	r2, [pc, #36]	; (8007860 <xTaskPriorityDisinherit+0xd8>)
 800783a:	441a      	add	r2, r3
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f7fd ffaf 	bl	80057a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800784c:	697b      	ldr	r3, [r7, #20]
	}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000b38 	.word	0x20000b38
 800785c:	20001014 	.word	0x20001014
 8007860:	20000b3c 	.word	0x20000b3c

08007864 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007872:	2301      	movs	r3, #1
 8007874:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d06f      	beq.n	800795c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	60fb      	str	r3, [r7, #12]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d902      	bls.n	80078aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	e002      	b.n	80078b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d050      	beq.n	800795c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d14b      	bne.n	800795c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078c4:	4b27      	ldr	r3, [pc, #156]	; (8007964 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d10a      	bne.n	80078e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	60bb      	str	r3, [r7, #8]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db04      	blt.n	8007902 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	6959      	ldr	r1, [r3, #20]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4a15      	ldr	r2, [pc, #84]	; (8007968 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007912:	4413      	add	r3, r2
 8007914:	4299      	cmp	r1, r3
 8007916:	d101      	bne.n	800791c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01c      	beq.n	800795c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fd ff98 	bl	800585c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4b0e      	ldr	r3, [pc, #56]	; (800796c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d903      	bls.n	8007940 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	4a0b      	ldr	r2, [pc, #44]	; (800796c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4a06      	ldr	r2, [pc, #24]	; (8007968 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800794e:	441a      	add	r2, r3
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	3304      	adds	r3, #4
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f7fd ff25 	bl	80057a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800795c:	bf00      	nop
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000b38 	.word	0x20000b38
 8007968:	20000b3c 	.word	0x20000b3c
 800796c:	20001014 	.word	0x20001014

08007970 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007974:	4b07      	ldr	r3, [pc, #28]	; (8007994 <pvTaskIncrementMutexHeldCount+0x24>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800797c:	4b05      	ldr	r3, [pc, #20]	; (8007994 <pvTaskIncrementMutexHeldCount+0x24>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007982:	3201      	adds	r2, #1
 8007984:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007986:	4b03      	ldr	r3, [pc, #12]	; (8007994 <pvTaskIncrementMutexHeldCount+0x24>)
 8007988:	681b      	ldr	r3, [r3, #0]
	}
 800798a:	4618      	mov	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000b38 	.word	0x20000b38

08007998 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079a2:	4b21      	ldr	r3, [pc, #132]	; (8007a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a8:	4b20      	ldr	r3, [pc, #128]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fd ff54 	bl	800585c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ba:	d10a      	bne.n	80079d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c2:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4819      	ldr	r0, [pc, #100]	; (8007a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80079cc:	f7fd feeb 	bl	80057a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079d0:	e026      	b.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d209      	bcs.n	80079fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fd fef8 	bl	80057ec <vListInsert>
}
 80079fc:	e010      	b.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079fe:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fd feee 	bl	80057ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d202      	bcs.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a1a:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6013      	str	r3, [r2, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20001010 	.word	0x20001010
 8007a2c:	20000b38 	.word	0x20000b38
 8007a30:	20000ff8 	.word	0x20000ff8
 8007a34:	20000fc8 	.word	0x20000fc8
 8007a38:	20000fc4 	.word	0x20000fc4
 8007a3c:	2000102c 	.word	0x2000102c

08007a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	; 0x28
 8007a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a4a:	f000 fb5b 	bl	8008104 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <xTimerCreateTimerTask+0x80>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d021      	beq.n	8007a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a5e:	1d3a      	adds	r2, r7, #4
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fd fe57 	bl	800571c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	9202      	str	r2, [sp, #8]
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	2302      	movs	r3, #2
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	460a      	mov	r2, r1
 8007a80:	4910      	ldr	r1, [pc, #64]	; (8007ac4 <xTimerCreateTimerTask+0x84>)
 8007a82:	4811      	ldr	r0, [pc, #68]	; (8007ac8 <xTimerCreateTimerTask+0x88>)
 8007a84:	f7fe ff1e 	bl	80068c4 <xTaskCreateStatic>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4a10      	ldr	r2, [pc, #64]	; (8007acc <xTimerCreateTimerTask+0x8c>)
 8007a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <xTimerCreateTimerTask+0x8c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a96:	2301      	movs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ab6:	697b      	ldr	r3, [r7, #20]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20001068 	.word	0x20001068
 8007ac4:	0800d744 	.word	0x0800d744
 8007ac8:	08007d0d 	.word	0x08007d0d
 8007acc:	2000106c 	.word	0x2000106c

08007ad0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007ade:	2030      	movs	r0, #48	; 0x30
 8007ae0:	f000 fd84 	bl	80085ec <pvPortMalloc>
 8007ae4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00d      	beq.n	8007b08 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f846 	bl	8007b8c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007b08:	697b      	ldr	r3, [r7, #20]
	}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b08a      	sub	sp, #40	; 0x28
 8007b16:	af02      	add	r7, sp, #8
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007b20:	2330      	movs	r3, #48	; 0x30
 8007b22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b30      	cmp	r3, #48	; 0x30
 8007b28:	d00a      	beq.n	8007b40 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	61bb      	str	r3, [r7, #24]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <xTimerCreateStatic+0x4a>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	617b      	str	r3, [r7, #20]
}
 8007b58:	bf00      	nop
 8007b5a:	e7fe      	b.n	8007b5a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00d      	beq.n	8007b82 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f809 	bl	8007b8c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007b82:	69fb      	ldr	r3, [r7, #28]
	}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3720      	adds	r7, #32
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	617b      	str	r3, [r7, #20]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d015      	beq.n	8007be8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007bbc:	f000 faa2 	bl	8008104 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	3304      	adds	r3, #4
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fd fdd3 	bl	800578e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007be8:	bf00      	nop
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	623b      	str	r3, [r7, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c1e:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <xTimerGenericCommand+0x98>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d02a      	beq.n	8007c7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	dc18      	bgt.n	8007c6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c38:	f7ff fd1a 	bl	8007670 <xTaskGetSchedulerState>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d109      	bne.n	8007c56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c42:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <xTimerGenericCommand+0x98>)
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	f107 0110 	add.w	r1, r7, #16
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4e:	f7fd ffd9 	bl	8005c04 <xQueueGenericSend>
 8007c52:	6278      	str	r0, [r7, #36]	; 0x24
 8007c54:	e012      	b.n	8007c7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <xTimerGenericCommand+0x98>)
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f107 0110 	add.w	r1, r7, #16
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	f7fd ffcf 	bl	8005c04 <xQueueGenericSend>
 8007c66:	6278      	str	r0, [r7, #36]	; 0x24
 8007c68:	e008      	b.n	8007c7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <xTimerGenericCommand+0x98>)
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f107 0110 	add.w	r1, r7, #16
 8007c72:	2300      	movs	r3, #0
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	f7fe f8c3 	bl	8005e00 <xQueueGenericSendFromISR>
 8007c7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3728      	adds	r7, #40	; 0x28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20001068 	.word	0x20001068

08007c8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c96:	4b1c      	ldr	r3, [pc, #112]	; (8007d08 <prvProcessExpiredTimer+0x7c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fd fdd9 	bl	800585c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d122      	bne.n	8007cf8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	18d1      	adds	r1, r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	6978      	ldr	r0, [r7, #20]
 8007cc0:	f000 f8c8 	bl	8007e54 <prvInsertTimerInActiveList>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	6978      	ldr	r0, [r7, #20]
 8007cd6:	f7ff ff8b 	bl	8007bf0 <xTimerGenericCommand>
 8007cda:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	60fb      	str	r3, [r7, #12]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	6978      	ldr	r0, [r7, #20]
 8007cfe:	4798      	blx	r3
}
 8007d00:	bf00      	nop
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20001060 	.word	0x20001060

08007d0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d14:	f107 0308 	add.w	r3, r7, #8
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f857 	bl	8007dcc <prvGetNextExpireTime>
 8007d1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4619      	mov	r1, r3
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 f803 	bl	8007d30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d2a:	f000 f8d5 	bl	8007ed8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d2e:	e7f1      	b.n	8007d14 <prvTimerTask+0x8>

08007d30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d3a:	f7ff f895 	bl	8006e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f866 	bl	8007e14 <prvSampleTimeNow>
 8007d48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d130      	bne.n	8007db2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <prvProcessTimerOrBlockTask+0x3c>
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d806      	bhi.n	8007d6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d5e:	f7ff f891 	bl	8006e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff91 	bl	8007c8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d6a:	e024      	b.n	8007db6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d008      	beq.n	8007d84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d72:	4b13      	ldr	r3, [pc, #76]	; (8007dc0 <prvProcessTimerOrBlockTask+0x90>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2301      	moveq	r3, #1
 8007d7e:	2300      	movne	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <prvProcessTimerOrBlockTask+0x94>)
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f7fe fd63 	bl	800685c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d96:	f7ff f875 	bl	8006e84 <xTaskResumeAll>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007da0:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <prvProcessTimerOrBlockTask+0x98>)
 8007da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
}
 8007db0:	e001      	b.n	8007db6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007db2:	f7ff f867 	bl	8006e84 <xTaskResumeAll>
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20001064 	.word	0x20001064
 8007dc4:	20001068 	.word	0x20001068
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <prvGetNextExpireTime+0x44>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d105      	bne.n	8007dfe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <prvGetNextExpireTime+0x44>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e001      	b.n	8007e02 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e02:	68fb      	ldr	r3, [r7, #12]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20001060 	.word	0x20001060

08007e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e1c:	f7ff f8d0 	bl	8006fc0 <xTaskGetTickCount>
 8007e20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e22:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <prvSampleTimeNow+0x3c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d205      	bcs.n	8007e38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e2c:	f000 f908 	bl	8008040 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e002      	b.n	8007e3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e3e:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <prvSampleTimeNow+0x3c>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e44:	68fb      	ldr	r3, [r7, #12]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20001070 	.word	0x20001070

08007e54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d812      	bhi.n	8007ea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	e01b      	b.n	8007ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <prvInsertTimerInActiveList+0x7c>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fd fca7 	bl	80057ec <vListInsert>
 8007e9e:	e012      	b.n	8007ec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d206      	bcs.n	8007eb6 <prvInsertTimerInActiveList+0x62>
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e007      	b.n	8007ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eb6:	4b07      	ldr	r3, [pc, #28]	; (8007ed4 <prvInsertTimerInActiveList+0x80>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f7fd fc93 	bl	80057ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ec6:	697b      	ldr	r3, [r7, #20]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20001064 	.word	0x20001064
 8007ed4:	20001060 	.word	0x20001060

08007ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	; 0x38
 8007edc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ede:	e09d      	b.n	800801c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da18      	bge.n	8007f18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ee6:	1d3b      	adds	r3, r7, #4
 8007ee8:	3304      	adds	r3, #4
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	61fb      	str	r3, [r7, #28]
}
 8007f04:	bf00      	nop
 8007f06:	e7fe      	b.n	8007f06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f0e:	6850      	ldr	r0, [r2, #4]
 8007f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f12:	6892      	ldr	r2, [r2, #8]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	db7d      	blt.n	800801a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d004      	beq.n	8007f34 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fd fc94 	bl	800585c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f34:	463b      	mov	r3, r7
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff ff6c 	bl	8007e14 <prvSampleTimeNow>
 8007f3c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b09      	cmp	r3, #9
 8007f42:	d86b      	bhi.n	800801c <prvProcessReceivedCommands+0x144>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <prvProcessReceivedCommands+0x74>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f75 	.word	0x08007f75
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f75 	.word	0x08007f75
 8007f58:	0800801d 	.word	0x0800801d
 8007f5c:	08007fd1 	.word	0x08007fd1
 8007f60:	08008009 	.word	0x08008009
 8007f64:	08007f75 	.word	0x08007f75
 8007f68:	08007f75 	.word	0x08007f75
 8007f6c:	0800801d 	.word	0x0800801d
 8007f70:	08007fd1 	.word	0x08007fd1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	18d1      	adds	r1, r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f82:	f7ff ff67 	bl	8007e54 <prvInsertTimerInActiveList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d047      	beq.n	800801c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f92:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d13f      	bne.n	800801c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	441a      	add	r2, r3
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2100      	movs	r1, #0
 8007fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fae:	f7ff fe1f 	bl	8007bf0 <xTimerGenericCommand>
 8007fb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d130      	bne.n	800801c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	61bb      	str	r3, [r7, #24]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	617b      	str	r3, [r7, #20]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	18d1      	adds	r1, r2, r3
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008002:	f7ff ff27 	bl	8007e54 <prvInsertTimerInActiveList>
					break;
 8008006:	e009      	b.n	800801c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008014:	f000 fbae 	bl	8008774 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008018:	e000      	b.n	800801c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800801a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800801c:	4b07      	ldr	r3, [pc, #28]	; (800803c <prvProcessReceivedCommands+0x164>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	1d39      	adds	r1, r7, #4
 8008022:	2200      	movs	r2, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe f811 	bl	800604c <xQueueReceive>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f af57 	bne.w	8007ee0 <prvProcessReceivedCommands+0x8>
	}
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	3730      	adds	r7, #48	; 0x30
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20001068 	.word	0x20001068

08008040 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008046:	e045      	b.n	80080d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008048:	4b2c      	ldr	r3, [pc, #176]	; (80080fc <prvSwitchTimerLists+0xbc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008052:	4b2a      	ldr	r3, [pc, #168]	; (80080fc <prvSwitchTimerLists+0xbc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3304      	adds	r3, #4
 8008060:	4618      	mov	r0, r3
 8008062:	f7fd fbfb 	bl	800585c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d12e      	bne.n	80080d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4413      	add	r3, r2
 800807e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	429a      	cmp	r2, r3
 8008086:	d90e      	bls.n	80080a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008094:	4b19      	ldr	r3, [pc, #100]	; (80080fc <prvSwitchTimerLists+0xbc>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7fd fba4 	bl	80057ec <vListInsert>
 80080a4:	e016      	b.n	80080d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080a6:	2300      	movs	r3, #0
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	2300      	movs	r3, #0
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	2100      	movs	r1, #0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff fd9d 	bl	8007bf0 <xTimerGenericCommand>
 80080b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	603b      	str	r3, [r7, #0]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <prvSwitchTimerLists+0xbc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1b4      	bne.n	8008048 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080de:	4b07      	ldr	r3, [pc, #28]	; (80080fc <prvSwitchTimerLists+0xbc>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <prvSwitchTimerLists+0xc0>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a04      	ldr	r2, [pc, #16]	; (80080fc <prvSwitchTimerLists+0xbc>)
 80080ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080ec:	4a04      	ldr	r2, [pc, #16]	; (8008100 <prvSwitchTimerLists+0xc0>)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	6013      	str	r3, [r2, #0]
}
 80080f2:	bf00      	nop
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20001060 	.word	0x20001060
 8008100:	20001064 	.word	0x20001064

08008104 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800810a:	f000 f96f 	bl	80083ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800810e:	4b15      	ldr	r3, [pc, #84]	; (8008164 <prvCheckForValidListAndQueue+0x60>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d120      	bne.n	8008158 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008116:	4814      	ldr	r0, [pc, #80]	; (8008168 <prvCheckForValidListAndQueue+0x64>)
 8008118:	f7fd fb1a 	bl	8005750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800811c:	4813      	ldr	r0, [pc, #76]	; (800816c <prvCheckForValidListAndQueue+0x68>)
 800811e:	f7fd fb17 	bl	8005750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008122:	4b13      	ldr	r3, [pc, #76]	; (8008170 <prvCheckForValidListAndQueue+0x6c>)
 8008124:	4a10      	ldr	r2, [pc, #64]	; (8008168 <prvCheckForValidListAndQueue+0x64>)
 8008126:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008128:	4b12      	ldr	r3, [pc, #72]	; (8008174 <prvCheckForValidListAndQueue+0x70>)
 800812a:	4a10      	ldr	r2, [pc, #64]	; (800816c <prvCheckForValidListAndQueue+0x68>)
 800812c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800812e:	2300      	movs	r3, #0
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	4b11      	ldr	r3, [pc, #68]	; (8008178 <prvCheckForValidListAndQueue+0x74>)
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <prvCheckForValidListAndQueue+0x78>)
 8008136:	2110      	movs	r1, #16
 8008138:	200a      	movs	r0, #10
 800813a:	f7fd fc21 	bl	8005980 <xQueueGenericCreateStatic>
 800813e:	4603      	mov	r3, r0
 8008140:	4a08      	ldr	r2, [pc, #32]	; (8008164 <prvCheckForValidListAndQueue+0x60>)
 8008142:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008144:	4b07      	ldr	r3, [pc, #28]	; (8008164 <prvCheckForValidListAndQueue+0x60>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d005      	beq.n	8008158 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <prvCheckForValidListAndQueue+0x60>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	490b      	ldr	r1, [pc, #44]	; (8008180 <prvCheckForValidListAndQueue+0x7c>)
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fb30 	bl	80067b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008158:	f000 f978 	bl	800844c <vPortExitCritical>
}
 800815c:	bf00      	nop
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20001068 	.word	0x20001068
 8008168:	20001038 	.word	0x20001038
 800816c:	2000104c 	.word	0x2000104c
 8008170:	20001060 	.word	0x20001060
 8008174:	20001064 	.word	0x20001064
 8008178:	20001114 	.word	0x20001114
 800817c:	20001074 	.word	0x20001074
 8008180:	0800d74c 	.word	0x0800d74c

08008184 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <xTimerIsTimerActive+0x28>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80081ac:	f000 f91e 	bl	80083ec <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bf14      	ite	ne
 80081b8:	2301      	movne	r3, #1
 80081ba:	2300      	moveq	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80081c0:	f000 f944 	bl	800844c <vPortExitCritical>

	return xTimerIsInActiveList;
 80081c4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <pvTimerGetTimerID+0x28>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80081f6:	f000 f8f9 	bl	80083ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008200:	f000 f924 	bl	800844c <vPortExitCritical>

	return pvReturn;
 8008204:	693b      	ldr	r3, [r7, #16]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3b04      	subs	r3, #4
 8008220:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3b04      	subs	r3, #4
 800822e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f023 0201 	bic.w	r2, r3, #1
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3b04      	subs	r3, #4
 800823e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008240:	4a08      	ldr	r2, [pc, #32]	; (8008264 <pxPortInitialiseStack+0x54>)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3b14      	subs	r3, #20
 800824a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3b20      	subs	r3, #32
 8008256:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008258:	68fb      	ldr	r3, [r7, #12]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	08008269 	.word	0x08008269

08008268 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800826e:	2300      	movs	r3, #0
 8008270:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008272:	4b12      	ldr	r3, [pc, #72]	; (80082bc <prvTaskExitError+0x54>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827a:	d00a      	beq.n	8008292 <prvTaskExitError+0x2a>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	60fb      	str	r3, [r7, #12]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <prvTaskExitError+0x28>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60bb      	str	r3, [r7, #8]
}
 80082a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082a6:	bf00      	nop
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0fc      	beq.n	80082a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082ae:	bf00      	nop
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	2000005c 	.word	0x2000005c

080082c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <pxCurrentTCBConst2>)
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	6808      	ldr	r0, [r1, #0]
 80082c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082ca:	f380 8809 	msr	PSP, r0
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8811 	msr	BASEPRI, r0
 80082da:	f04e 0e0d 	orr.w	lr, lr, #13
 80082de:	4770      	bx	lr

080082e0 <pxCurrentTCBConst2>:
 80082e0:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop

080082e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80082e8:	4806      	ldr	r0, [pc, #24]	; (8008304 <prvPortStartFirstTask+0x1c>)
 80082ea:	6800      	ldr	r0, [r0, #0]
 80082ec:	6800      	ldr	r0, [r0, #0]
 80082ee:	f380 8808 	msr	MSP, r0
 80082f2:	b662      	cpsie	i
 80082f4:	b661      	cpsie	f
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	df00      	svc	0
 8008300:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008302:	bf00      	nop
 8008304:	e000ed08 	.word	0xe000ed08

08008308 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800830e:	4b32      	ldr	r3, [pc, #200]	; (80083d8 <xPortStartScheduler+0xd0>)
 8008310:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008330:	b2da      	uxtb	r2, r3
 8008332:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <xPortStartScheduler+0xd4>)
 8008334:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008336:	4b2a      	ldr	r3, [pc, #168]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008338:	2207      	movs	r2, #7
 800833a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800833c:	e009      	b.n	8008352 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800833e:	4b28      	ldr	r3, [pc, #160]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3b01      	subs	r3, #1
 8008344:	4a26      	ldr	r2, [pc, #152]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008346:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	b2db      	uxtb	r3, r3
 8008350:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835a:	2b80      	cmp	r3, #128	; 0x80
 800835c:	d0ef      	beq.n	800833e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800835e:	4b20      	ldr	r3, [pc, #128]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1c3 0307 	rsb	r3, r3, #7
 8008366:	2b04      	cmp	r3, #4
 8008368:	d00a      	beq.n	8008380 <xPortStartScheduler+0x78>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	60bb      	str	r3, [r7, #8]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008380:	4b17      	ldr	r3, [pc, #92]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	4a16      	ldr	r2, [pc, #88]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008388:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800838a:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <xPortStartScheduler+0xd8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008392:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008394:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800839e:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a10      	ldr	r2, [pc, #64]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083aa:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a0d      	ldr	r2, [pc, #52]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083b6:	f000 f8b9 	bl	800852c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <xPortStartScheduler+0xe0>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083c0:	f7ff ff92 	bl	80082e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083c4:	f7fe feda 	bl	800717c <vTaskSwitchContext>
	prvTaskExitError();
 80083c8:	f7ff ff4e 	bl	8008268 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	e000e400 	.word	0xe000e400
 80083dc:	20001164 	.word	0x20001164
 80083e0:	20001168 	.word	0x20001168
 80083e4:	e000ed20 	.word	0xe000ed20
 80083e8:	2000005c 	.word	0x2000005c

080083ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
}
 8008404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008406:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <vPortEnterCritical+0x58>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	4a0d      	ldr	r2, [pc, #52]	; (8008444 <vPortEnterCritical+0x58>)
 800840e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008410:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <vPortEnterCritical+0x58>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d10f      	bne.n	8008438 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008418:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <vPortEnterCritical+0x5c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <vPortEnterCritical+0x4c>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	603b      	str	r3, [r7, #0]
}
 8008434:	bf00      	nop
 8008436:	e7fe      	b.n	8008436 <vPortEnterCritical+0x4a>
	}
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	2000005c 	.word	0x2000005c
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <vPortExitCritical+0x4c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <vPortExitCritical+0x24>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	607b      	str	r3, [r7, #4]
}
 800846c:	bf00      	nop
 800846e:	e7fe      	b.n	800846e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <vPortExitCritical+0x4c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	4a08      	ldr	r2, [pc, #32]	; (8008498 <vPortExitCritical+0x4c>)
 8008478:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <vPortExitCritical+0x4c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d105      	bne.n	800848e <vPortExitCritical+0x42>
 8008482:	2300      	movs	r3, #0
 8008484:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	f383 8811 	msr	BASEPRI, r3
}
 800848c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	bc80      	pop	{r7}
 8008496:	4770      	bx	lr
 8008498:	2000005c 	.word	0x2000005c
 800849c:	00000000 	.word	0x00000000

080084a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084a0:	f3ef 8009 	mrs	r0, PSP
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <pxCurrentTCBConst>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084b0:	6010      	str	r0, [r2, #0]
 80084b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80084b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084ba:	f380 8811 	msr	BASEPRI, r0
 80084be:	f7fe fe5d 	bl	800717c <vTaskSwitchContext>
 80084c2:	f04f 0000 	mov.w	r0, #0
 80084c6:	f380 8811 	msr	BASEPRI, r0
 80084ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084ce:	6819      	ldr	r1, [r3, #0]
 80084d0:	6808      	ldr	r0, [r1, #0]
 80084d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084d6:	f380 8809 	msr	PSP, r0
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	4770      	bx	lr

080084e0 <pxCurrentTCBConst>:
 80084e0:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop

080084e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
}
 8008500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008502:	f7fe fd7d 	bl	8007000 <xTaskIncrementTick>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800850c:	4b06      	ldr	r3, [pc, #24]	; (8008528 <SysTick_Handler+0x40>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f383 8811 	msr	BASEPRI, r3
}
 800851e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <vPortSetupTimerInterrupt+0x30>)
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <vPortSetupTimerInterrupt+0x34>)
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800853c:	4b09      	ldr	r3, [pc, #36]	; (8008564 <vPortSetupTimerInterrupt+0x38>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a09      	ldr	r2, [pc, #36]	; (8008568 <vPortSetupTimerInterrupt+0x3c>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	099b      	lsrs	r3, r3, #6
 8008548:	4a08      	ldr	r2, [pc, #32]	; (800856c <vPortSetupTimerInterrupt+0x40>)
 800854a:	3b01      	subs	r3, #1
 800854c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800854e:	4b03      	ldr	r3, [pc, #12]	; (800855c <vPortSetupTimerInterrupt+0x30>)
 8008550:	2207      	movs	r2, #7
 8008552:	601a      	str	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr
 800855c:	e000e010 	.word	0xe000e010
 8008560:	e000e018 	.word	0xe000e018
 8008564:	20000050 	.word	0x20000050
 8008568:	10624dd3 	.word	0x10624dd3
 800856c:	e000e014 	.word	0xe000e014

08008570 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008576:	f3ef 8305 	mrs	r3, IPSR
 800857a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b0f      	cmp	r3, #15
 8008580:	d914      	bls.n	80085ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008582:	4a16      	ldr	r2, [pc, #88]	; (80085dc <vPortValidateInterruptPriority+0x6c>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800858c:	4b14      	ldr	r3, [pc, #80]	; (80085e0 <vPortValidateInterruptPriority+0x70>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	7afa      	ldrb	r2, [r7, #11]
 8008592:	429a      	cmp	r2, r3
 8008594:	d20a      	bcs.n	80085ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	607b      	str	r3, [r7, #4]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <vPortValidateInterruptPriority+0x74>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <vPortValidateInterruptPriority+0x78>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d90a      	bls.n	80085d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	603b      	str	r3, [r7, #0]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <vPortValidateInterruptPriority+0x60>
	}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr
 80085dc:	e000e3f0 	.word	0xe000e3f0
 80085e0:	20001164 	.word	0x20001164
 80085e4:	e000ed0c 	.word	0xe000ed0c
 80085e8:	20001168 	.word	0x20001168

080085ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	; 0x28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085f8:	f7fe fc36 	bl	8006e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085fc:	4b58      	ldr	r3, [pc, #352]	; (8008760 <pvPortMalloc+0x174>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008604:	f000 f910 	bl	8008828 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008608:	4b56      	ldr	r3, [pc, #344]	; (8008764 <pvPortMalloc+0x178>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4013      	ands	r3, r2
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 808e 	bne.w	8008732 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01d      	beq.n	8008658 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800861c:	2208      	movs	r2, #8
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4413      	add	r3, r2
 8008622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b00      	cmp	r3, #0
 800862c:	d014      	beq.n	8008658 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f023 0307 	bic.w	r3, r3, #7
 8008634:	3308      	adds	r3, #8
 8008636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <pvPortMalloc+0x6c>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	617b      	str	r3, [r7, #20]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d069      	beq.n	8008732 <pvPortMalloc+0x146>
 800865e:	4b42      	ldr	r3, [pc, #264]	; (8008768 <pvPortMalloc+0x17c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d864      	bhi.n	8008732 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008668:	4b40      	ldr	r3, [pc, #256]	; (800876c <pvPortMalloc+0x180>)
 800866a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800866c:	4b3f      	ldr	r3, [pc, #252]	; (800876c <pvPortMalloc+0x180>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008672:	e004      	b.n	800867e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d903      	bls.n	8008690 <pvPortMalloc+0xa4>
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1f1      	bne.n	8008674 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008690:	4b33      	ldr	r3, [pc, #204]	; (8008760 <pvPortMalloc+0x174>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008696:	429a      	cmp	r2, r3
 8008698:	d04b      	beq.n	8008732 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2208      	movs	r2, #8
 80086a0:	4413      	add	r3, r2
 80086a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	1ad2      	subs	r2, r2, r3
 80086b4:	2308      	movs	r3, #8
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d91f      	bls.n	80086fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <pvPortMalloc+0xf8>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	613b      	str	r3, [r7, #16]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	1ad2      	subs	r2, r2, r3
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086f6:	69b8      	ldr	r0, [r7, #24]
 80086f8:	f000 f8f8 	bl	80088ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086fc:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <pvPortMalloc+0x17c>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	4a18      	ldr	r2, [pc, #96]	; (8008768 <pvPortMalloc+0x17c>)
 8008708:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800870a:	4b17      	ldr	r3, [pc, #92]	; (8008768 <pvPortMalloc+0x17c>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b18      	ldr	r3, [pc, #96]	; (8008770 <pvPortMalloc+0x184>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d203      	bcs.n	800871e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008716:	4b14      	ldr	r3, [pc, #80]	; (8008768 <pvPortMalloc+0x17c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <pvPortMalloc+0x184>)
 800871c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	4b10      	ldr	r3, [pc, #64]	; (8008764 <pvPortMalloc+0x178>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	431a      	orrs	r2, r3
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008732:	f7fe fba7 	bl	8006e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <pvPortMalloc+0x16a>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60fb      	str	r3, [r7, #12]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <pvPortMalloc+0x168>
	return pvReturn;
 8008756:	69fb      	ldr	r3, [r7, #28]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3728      	adds	r7, #40	; 0x28
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20002574 	.word	0x20002574
 8008764:	20002580 	.word	0x20002580
 8008768:	20002578 	.word	0x20002578
 800876c:	2000256c 	.word	0x2000256c
 8008770:	2000257c 	.word	0x2000257c

08008774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d048      	beq.n	8008818 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008786:	2308      	movs	r3, #8
 8008788:	425b      	negs	r3, r3
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4413      	add	r3, r2
 800878e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	4b21      	ldr	r3, [pc, #132]	; (8008820 <vPortFree+0xac>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4013      	ands	r3, r2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <vPortFree+0x44>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	60fb      	str	r3, [r7, #12]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <vPortFree+0x62>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60bb      	str	r3, [r7, #8]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <vPortFree+0xac>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4013      	ands	r3, r2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d019      	beq.n	8008818 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d115      	bne.n	8008818 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <vPortFree+0xac>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	43db      	mvns	r3, r3
 80087f6:	401a      	ands	r2, r3
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087fc:	f7fe fb34 	bl	8006e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	4b07      	ldr	r3, [pc, #28]	; (8008824 <vPortFree+0xb0>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4413      	add	r3, r2
 800880a:	4a06      	ldr	r2, [pc, #24]	; (8008824 <vPortFree+0xb0>)
 800880c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800880e:	6938      	ldr	r0, [r7, #16]
 8008810:	f000 f86c 	bl	80088ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008814:	f7fe fb36 	bl	8006e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008818:	bf00      	nop
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20002580 	.word	0x20002580
 8008824:	20002578 	.word	0x20002578

08008828 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800882e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008832:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008834:	4b27      	ldr	r3, [pc, #156]	; (80088d4 <prvHeapInit+0xac>)
 8008836:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00c      	beq.n	800885c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3307      	adds	r3, #7
 8008846:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0307 	bic.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	4a1f      	ldr	r2, [pc, #124]	; (80088d4 <prvHeapInit+0xac>)
 8008858:	4413      	add	r3, r2
 800885a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008860:	4a1d      	ldr	r2, [pc, #116]	; (80088d8 <prvHeapInit+0xb0>)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008866:	4b1c      	ldr	r3, [pc, #112]	; (80088d8 <prvHeapInit+0xb0>)
 8008868:	2200      	movs	r2, #0
 800886a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	4413      	add	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008874:	2208      	movs	r2, #8
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0307 	bic.w	r3, r3, #7
 8008882:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4a15      	ldr	r2, [pc, #84]	; (80088dc <prvHeapInit+0xb4>)
 8008888:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800888a:	4b14      	ldr	r3, [pc, #80]	; (80088dc <prvHeapInit+0xb4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2200      	movs	r2, #0
 8008890:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <prvHeapInit+0xb4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	1ad2      	subs	r2, r2, r3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <prvHeapInit+0xb4>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	4a0a      	ldr	r2, [pc, #40]	; (80088e0 <prvHeapInit+0xb8>)
 80088b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	4a09      	ldr	r2, [pc, #36]	; (80088e4 <prvHeapInit+0xbc>)
 80088be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088c0:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <prvHeapInit+0xc0>)
 80088c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	2000116c 	.word	0x2000116c
 80088d8:	2000256c 	.word	0x2000256c
 80088dc:	20002574 	.word	0x20002574
 80088e0:	2000257c 	.word	0x2000257c
 80088e4:	20002578 	.word	0x20002578
 80088e8:	20002580 	.word	0x20002580

080088ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088f4:	4b27      	ldr	r3, [pc, #156]	; (8008994 <prvInsertBlockIntoFreeList+0xa8>)
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e002      	b.n	8008900 <prvInsertBlockIntoFreeList+0x14>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d8f7      	bhi.n	80088fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	4413      	add	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d108      	bne.n	800892e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	441a      	add	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	441a      	add	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d118      	bne.n	8008974 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	4b14      	ldr	r3, [pc, #80]	; (8008998 <prvInsertBlockIntoFreeList+0xac>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d00d      	beq.n	800896a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	441a      	add	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	e008      	b.n	800897c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <prvInsertBlockIntoFreeList+0xac>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e003      	b.n	800897c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d002      	beq.n	800898a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr
 8008994:	2000256c 	.word	0x2000256c
 8008998:	20002574 	.word	0x20002574

0800899c <atoi>:
 800899c:	220a      	movs	r2, #10
 800899e:	2100      	movs	r1, #0
 80089a0:	f002 b84e 	b.w	800aa40 <strtol>

080089a4 <__errno>:
 80089a4:	4b01      	ldr	r3, [pc, #4]	; (80089ac <__errno+0x8>)
 80089a6:	6818      	ldr	r0, [r3, #0]
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20000060 	.word	0x20000060

080089b0 <std>:
 80089b0:	2300      	movs	r3, #0
 80089b2:	b510      	push	{r4, lr}
 80089b4:	4604      	mov	r4, r0
 80089b6:	e9c0 3300 	strd	r3, r3, [r0]
 80089ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089be:	6083      	str	r3, [r0, #8]
 80089c0:	8181      	strh	r1, [r0, #12]
 80089c2:	6643      	str	r3, [r0, #100]	; 0x64
 80089c4:	81c2      	strh	r2, [r0, #14]
 80089c6:	6183      	str	r3, [r0, #24]
 80089c8:	4619      	mov	r1, r3
 80089ca:	2208      	movs	r2, #8
 80089cc:	305c      	adds	r0, #92	; 0x5c
 80089ce:	f000 f91a 	bl	8008c06 <memset>
 80089d2:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <std+0x38>)
 80089d4:	6224      	str	r4, [r4, #32]
 80089d6:	6263      	str	r3, [r4, #36]	; 0x24
 80089d8:	4b04      	ldr	r3, [pc, #16]	; (80089ec <std+0x3c>)
 80089da:	62a3      	str	r3, [r4, #40]	; 0x28
 80089dc:	4b04      	ldr	r3, [pc, #16]	; (80089f0 <std+0x40>)
 80089de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089e0:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <std+0x44>)
 80089e2:	6323      	str	r3, [r4, #48]	; 0x30
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	bf00      	nop
 80089e8:	08009c75 	.word	0x08009c75
 80089ec:	08009c97 	.word	0x08009c97
 80089f0:	08009ccf 	.word	0x08009ccf
 80089f4:	08009cf3 	.word	0x08009cf3

080089f8 <_cleanup_r>:
 80089f8:	4901      	ldr	r1, [pc, #4]	; (8008a00 <_cleanup_r+0x8>)
 80089fa:	f000 b8af 	b.w	8008b5c <_fwalk_reent>
 80089fe:	bf00      	nop
 8008a00:	0800ba11 	.word	0x0800ba11

08008a04 <__sfmoreglue>:
 8008a04:	2268      	movs	r2, #104	; 0x68
 8008a06:	b570      	push	{r4, r5, r6, lr}
 8008a08:	1e4d      	subs	r5, r1, #1
 8008a0a:	4355      	muls	r5, r2
 8008a0c:	460e      	mov	r6, r1
 8008a0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a12:	f000 f921 	bl	8008c58 <_malloc_r>
 8008a16:	4604      	mov	r4, r0
 8008a18:	b140      	cbz	r0, 8008a2c <__sfmoreglue+0x28>
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	e9c0 1600 	strd	r1, r6, [r0]
 8008a20:	300c      	adds	r0, #12
 8008a22:	60a0      	str	r0, [r4, #8]
 8008a24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a28:	f000 f8ed 	bl	8008c06 <memset>
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}

08008a30 <__sfp_lock_acquire>:
 8008a30:	4801      	ldr	r0, [pc, #4]	; (8008a38 <__sfp_lock_acquire+0x8>)
 8008a32:	f000 b8d8 	b.w	8008be6 <__retarget_lock_acquire_recursive>
 8008a36:	bf00      	nop
 8008a38:	20002585 	.word	0x20002585

08008a3c <__sfp_lock_release>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <__sfp_lock_release+0x8>)
 8008a3e:	f000 b8d3 	b.w	8008be8 <__retarget_lock_release_recursive>
 8008a42:	bf00      	nop
 8008a44:	20002585 	.word	0x20002585

08008a48 <__sinit_lock_acquire>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__sinit_lock_acquire+0x8>)
 8008a4a:	f000 b8cc 	b.w	8008be6 <__retarget_lock_acquire_recursive>
 8008a4e:	bf00      	nop
 8008a50:	20002586 	.word	0x20002586

08008a54 <__sinit_lock_release>:
 8008a54:	4801      	ldr	r0, [pc, #4]	; (8008a5c <__sinit_lock_release+0x8>)
 8008a56:	f000 b8c7 	b.w	8008be8 <__retarget_lock_release_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20002586 	.word	0x20002586

08008a60 <__sinit>:
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4604      	mov	r4, r0
 8008a64:	f7ff fff0 	bl	8008a48 <__sinit_lock_acquire>
 8008a68:	69a3      	ldr	r3, [r4, #24]
 8008a6a:	b11b      	cbz	r3, 8008a74 <__sinit+0x14>
 8008a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a70:	f7ff bff0 	b.w	8008a54 <__sinit_lock_release>
 8008a74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a78:	6523      	str	r3, [r4, #80]	; 0x50
 8008a7a:	4b13      	ldr	r3, [pc, #76]	; (8008ac8 <__sinit+0x68>)
 8008a7c:	4a13      	ldr	r2, [pc, #76]	; (8008acc <__sinit+0x6c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	bf08      	it	eq
 8008a86:	2301      	moveq	r3, #1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	bf08      	it	eq
 8008a8c:	61a3      	streq	r3, [r4, #24]
 8008a8e:	f000 f81f 	bl	8008ad0 <__sfp>
 8008a92:	6060      	str	r0, [r4, #4]
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 f81b 	bl	8008ad0 <__sfp>
 8008a9a:	60a0      	str	r0, [r4, #8]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 f817 	bl	8008ad0 <__sfp>
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2104      	movs	r1, #4
 8008aa6:	60e0      	str	r0, [r4, #12]
 8008aa8:	6860      	ldr	r0, [r4, #4]
 8008aaa:	f7ff ff81 	bl	80089b0 <std>
 8008aae:	2201      	movs	r2, #1
 8008ab0:	2109      	movs	r1, #9
 8008ab2:	68a0      	ldr	r0, [r4, #8]
 8008ab4:	f7ff ff7c 	bl	80089b0 <std>
 8008ab8:	2202      	movs	r2, #2
 8008aba:	2112      	movs	r1, #18
 8008abc:	68e0      	ldr	r0, [r4, #12]
 8008abe:	f7ff ff77 	bl	80089b0 <std>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	61a3      	str	r3, [r4, #24]
 8008ac6:	e7d1      	b.n	8008a6c <__sinit+0xc>
 8008ac8:	0800d87c 	.word	0x0800d87c
 8008acc:	080089f9 	.word	0x080089f9

08008ad0 <__sfp>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	f7ff ffac 	bl	8008a30 <__sfp_lock_acquire>
 8008ad8:	4b1e      	ldr	r3, [pc, #120]	; (8008b54 <__sfp+0x84>)
 8008ada:	681e      	ldr	r6, [r3, #0]
 8008adc:	69b3      	ldr	r3, [r6, #24]
 8008ade:	b913      	cbnz	r3, 8008ae6 <__sfp+0x16>
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff ffbd 	bl	8008a60 <__sinit>
 8008ae6:	3648      	adds	r6, #72	; 0x48
 8008ae8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	d503      	bpl.n	8008af8 <__sfp+0x28>
 8008af0:	6833      	ldr	r3, [r6, #0]
 8008af2:	b30b      	cbz	r3, 8008b38 <__sfp+0x68>
 8008af4:	6836      	ldr	r6, [r6, #0]
 8008af6:	e7f7      	b.n	8008ae8 <__sfp+0x18>
 8008af8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008afc:	b9d5      	cbnz	r5, 8008b34 <__sfp+0x64>
 8008afe:	4b16      	ldr	r3, [pc, #88]	; (8008b58 <__sfp+0x88>)
 8008b00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b04:	60e3      	str	r3, [r4, #12]
 8008b06:	6665      	str	r5, [r4, #100]	; 0x64
 8008b08:	f000 f86c 	bl	8008be4 <__retarget_lock_init_recursive>
 8008b0c:	f7ff ff96 	bl	8008a3c <__sfp_lock_release>
 8008b10:	2208      	movs	r2, #8
 8008b12:	4629      	mov	r1, r5
 8008b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b1c:	6025      	str	r5, [r4, #0]
 8008b1e:	61a5      	str	r5, [r4, #24]
 8008b20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b24:	f000 f86f 	bl	8008c06 <memset>
 8008b28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b30:	4620      	mov	r0, r4
 8008b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b34:	3468      	adds	r4, #104	; 0x68
 8008b36:	e7d9      	b.n	8008aec <__sfp+0x1c>
 8008b38:	2104      	movs	r1, #4
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7ff ff62 	bl	8008a04 <__sfmoreglue>
 8008b40:	4604      	mov	r4, r0
 8008b42:	6030      	str	r0, [r6, #0]
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d1d5      	bne.n	8008af4 <__sfp+0x24>
 8008b48:	f7ff ff78 	bl	8008a3c <__sfp_lock_release>
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	e7ee      	b.n	8008b30 <__sfp+0x60>
 8008b52:	bf00      	nop
 8008b54:	0800d87c 	.word	0x0800d87c
 8008b58:	ffff0001 	.word	0xffff0001

08008b5c <_fwalk_reent>:
 8008b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b60:	4606      	mov	r6, r0
 8008b62:	4688      	mov	r8, r1
 8008b64:	2700      	movs	r7, #0
 8008b66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b6e:	f1b9 0901 	subs.w	r9, r9, #1
 8008b72:	d505      	bpl.n	8008b80 <_fwalk_reent+0x24>
 8008b74:	6824      	ldr	r4, [r4, #0]
 8008b76:	2c00      	cmp	r4, #0
 8008b78:	d1f7      	bne.n	8008b6a <_fwalk_reent+0xe>
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b80:	89ab      	ldrh	r3, [r5, #12]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d907      	bls.n	8008b96 <_fwalk_reent+0x3a>
 8008b86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	d003      	beq.n	8008b96 <_fwalk_reent+0x3a>
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4630      	mov	r0, r6
 8008b92:	47c0      	blx	r8
 8008b94:	4307      	orrs	r7, r0
 8008b96:	3568      	adds	r5, #104	; 0x68
 8008b98:	e7e9      	b.n	8008b6e <_fwalk_reent+0x12>
	...

08008b9c <__libc_init_array>:
 8008b9c:	b570      	push	{r4, r5, r6, lr}
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	4d0c      	ldr	r5, [pc, #48]	; (8008bd4 <__libc_init_array+0x38>)
 8008ba2:	4c0d      	ldr	r4, [pc, #52]	; (8008bd8 <__libc_init_array+0x3c>)
 8008ba4:	1b64      	subs	r4, r4, r5
 8008ba6:	10a4      	asrs	r4, r4, #2
 8008ba8:	42a6      	cmp	r6, r4
 8008baa:	d109      	bne.n	8008bc0 <__libc_init_array+0x24>
 8008bac:	f004 fc72 	bl	800d494 <_init>
 8008bb0:	2600      	movs	r6, #0
 8008bb2:	4d0a      	ldr	r5, [pc, #40]	; (8008bdc <__libc_init_array+0x40>)
 8008bb4:	4c0a      	ldr	r4, [pc, #40]	; (8008be0 <__libc_init_array+0x44>)
 8008bb6:	1b64      	subs	r4, r4, r5
 8008bb8:	10a4      	asrs	r4, r4, #2
 8008bba:	42a6      	cmp	r6, r4
 8008bbc:	d105      	bne.n	8008bca <__libc_init_array+0x2e>
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc4:	4798      	blx	r3
 8008bc6:	3601      	adds	r6, #1
 8008bc8:	e7ee      	b.n	8008ba8 <__libc_init_array+0xc>
 8008bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bce:	4798      	blx	r3
 8008bd0:	3601      	adds	r6, #1
 8008bd2:	e7f2      	b.n	8008bba <__libc_init_array+0x1e>
 8008bd4:	0800dcc4 	.word	0x0800dcc4
 8008bd8:	0800dcc4 	.word	0x0800dcc4
 8008bdc:	0800dcc4 	.word	0x0800dcc4
 8008be0:	0800dcc8 	.word	0x0800dcc8

08008be4 <__retarget_lock_init_recursive>:
 8008be4:	4770      	bx	lr

08008be6 <__retarget_lock_acquire_recursive>:
 8008be6:	4770      	bx	lr

08008be8 <__retarget_lock_release_recursive>:
 8008be8:	4770      	bx	lr

08008bea <memcpy>:
 8008bea:	440a      	add	r2, r1
 8008bec:	4291      	cmp	r1, r2
 8008bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf2:	d100      	bne.n	8008bf6 <memcpy+0xc>
 8008bf4:	4770      	bx	lr
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfc:	4291      	cmp	r1, r2
 8008bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c02:	d1f9      	bne.n	8008bf8 <memcpy+0xe>
 8008c04:	bd10      	pop	{r4, pc}

08008c06 <memset>:
 8008c06:	4603      	mov	r3, r0
 8008c08:	4402      	add	r2, r0
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d100      	bne.n	8008c10 <memset+0xa>
 8008c0e:	4770      	bx	lr
 8008c10:	f803 1b01 	strb.w	r1, [r3], #1
 8008c14:	e7f9      	b.n	8008c0a <memset+0x4>
	...

08008c18 <sbrk_aligned>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	4e0e      	ldr	r6, [pc, #56]	; (8008c54 <sbrk_aligned+0x3c>)
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	6831      	ldr	r1, [r6, #0]
 8008c20:	4605      	mov	r5, r0
 8008c22:	b911      	cbnz	r1, 8008c2a <sbrk_aligned+0x12>
 8008c24:	f000 fff2 	bl	8009c0c <_sbrk_r>
 8008c28:	6030      	str	r0, [r6, #0]
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 ffed 	bl	8009c0c <_sbrk_r>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d00a      	beq.n	8008c4c <sbrk_aligned+0x34>
 8008c36:	1cc4      	adds	r4, r0, #3
 8008c38:	f024 0403 	bic.w	r4, r4, #3
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d007      	beq.n	8008c50 <sbrk_aligned+0x38>
 8008c40:	1a21      	subs	r1, r4, r0
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 ffe2 	bl	8009c0c <_sbrk_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d101      	bne.n	8008c50 <sbrk_aligned+0x38>
 8008c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c50:	4620      	mov	r0, r4
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	2000258c 	.word	0x2000258c

08008c58 <_malloc_r>:
 8008c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5c:	1ccd      	adds	r5, r1, #3
 8008c5e:	f025 0503 	bic.w	r5, r5, #3
 8008c62:	3508      	adds	r5, #8
 8008c64:	2d0c      	cmp	r5, #12
 8008c66:	bf38      	it	cc
 8008c68:	250c      	movcc	r5, #12
 8008c6a:	2d00      	cmp	r5, #0
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	db01      	blt.n	8008c74 <_malloc_r+0x1c>
 8008c70:	42a9      	cmp	r1, r5
 8008c72:	d905      	bls.n	8008c80 <_malloc_r+0x28>
 8008c74:	230c      	movs	r3, #12
 8008c76:	2600      	movs	r6, #0
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c80:	4e2e      	ldr	r6, [pc, #184]	; (8008d3c <_malloc_r+0xe4>)
 8008c82:	f003 fb0b 	bl	800c29c <__malloc_lock>
 8008c86:	6833      	ldr	r3, [r6, #0]
 8008c88:	461c      	mov	r4, r3
 8008c8a:	bb34      	cbnz	r4, 8008cda <_malloc_r+0x82>
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f7ff ffc2 	bl	8008c18 <sbrk_aligned>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	4604      	mov	r4, r0
 8008c98:	d14d      	bne.n	8008d36 <_malloc_r+0xde>
 8008c9a:	6834      	ldr	r4, [r6, #0]
 8008c9c:	4626      	mov	r6, r4
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	d140      	bne.n	8008d24 <_malloc_r+0xcc>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	eb04 0803 	add.w	r8, r4, r3
 8008cac:	f000 ffae 	bl	8009c0c <_sbrk_r>
 8008cb0:	4580      	cmp	r8, r0
 8008cb2:	d13a      	bne.n	8008d2a <_malloc_r+0xd2>
 8008cb4:	6821      	ldr	r1, [r4, #0]
 8008cb6:	3503      	adds	r5, #3
 8008cb8:	1a6d      	subs	r5, r5, r1
 8008cba:	f025 0503 	bic.w	r5, r5, #3
 8008cbe:	3508      	adds	r5, #8
 8008cc0:	2d0c      	cmp	r5, #12
 8008cc2:	bf38      	it	cc
 8008cc4:	250c      	movcc	r5, #12
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7ff ffa5 	bl	8008c18 <sbrk_aligned>
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d02b      	beq.n	8008d2a <_malloc_r+0xd2>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	442b      	add	r3, r5
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	e00e      	b.n	8008cf8 <_malloc_r+0xa0>
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	1b52      	subs	r2, r2, r5
 8008cde:	d41e      	bmi.n	8008d1e <_malloc_r+0xc6>
 8008ce0:	2a0b      	cmp	r2, #11
 8008ce2:	d916      	bls.n	8008d12 <_malloc_r+0xba>
 8008ce4:	1961      	adds	r1, r4, r5
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	6025      	str	r5, [r4, #0]
 8008cea:	bf18      	it	ne
 8008cec:	6059      	strne	r1, [r3, #4]
 8008cee:	6863      	ldr	r3, [r4, #4]
 8008cf0:	bf08      	it	eq
 8008cf2:	6031      	streq	r1, [r6, #0]
 8008cf4:	5162      	str	r2, [r4, r5]
 8008cf6:	604b      	str	r3, [r1, #4]
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f104 060b 	add.w	r6, r4, #11
 8008cfe:	f003 fad3 	bl	800c2a8 <__malloc_unlock>
 8008d02:	f026 0607 	bic.w	r6, r6, #7
 8008d06:	1d23      	adds	r3, r4, #4
 8008d08:	1af2      	subs	r2, r6, r3
 8008d0a:	d0b6      	beq.n	8008c7a <_malloc_r+0x22>
 8008d0c:	1b9b      	subs	r3, r3, r6
 8008d0e:	50a3      	str	r3, [r4, r2]
 8008d10:	e7b3      	b.n	8008c7a <_malloc_r+0x22>
 8008d12:	6862      	ldr	r2, [r4, #4]
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	bf0c      	ite	eq
 8008d18:	6032      	streq	r2, [r6, #0]
 8008d1a:	605a      	strne	r2, [r3, #4]
 8008d1c:	e7ec      	b.n	8008cf8 <_malloc_r+0xa0>
 8008d1e:	4623      	mov	r3, r4
 8008d20:	6864      	ldr	r4, [r4, #4]
 8008d22:	e7b2      	b.n	8008c8a <_malloc_r+0x32>
 8008d24:	4634      	mov	r4, r6
 8008d26:	6876      	ldr	r6, [r6, #4]
 8008d28:	e7b9      	b.n	8008c9e <_malloc_r+0x46>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	f003 faba 	bl	800c2a8 <__malloc_unlock>
 8008d34:	e7a1      	b.n	8008c7a <_malloc_r+0x22>
 8008d36:	6025      	str	r5, [r4, #0]
 8008d38:	e7de      	b.n	8008cf8 <_malloc_r+0xa0>
 8008d3a:	bf00      	nop
 8008d3c:	20002588 	.word	0x20002588

08008d40 <__cvt>:
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d46:	461f      	mov	r7, r3
 8008d48:	bfbb      	ittet	lt
 8008d4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008d4e:	461f      	movlt	r7, r3
 8008d50:	2300      	movge	r3, #0
 8008d52:	232d      	movlt	r3, #45	; 0x2d
 8008d54:	b088      	sub	sp, #32
 8008d56:	4614      	mov	r4, r2
 8008d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d5c:	7013      	strb	r3, [r2, #0]
 8008d5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d60:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008d64:	f023 0820 	bic.w	r8, r3, #32
 8008d68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d6c:	d005      	beq.n	8008d7a <__cvt+0x3a>
 8008d6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d72:	d100      	bne.n	8008d76 <__cvt+0x36>
 8008d74:	3501      	adds	r5, #1
 8008d76:	2302      	movs	r3, #2
 8008d78:	e000      	b.n	8008d7c <__cvt+0x3c>
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	aa07      	add	r2, sp, #28
 8008d7e:	9204      	str	r2, [sp, #16]
 8008d80:	aa06      	add	r2, sp, #24
 8008d82:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008d86:	e9cd 3500 	strd	r3, r5, [sp]
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	f001 ffcf 	bl	800ad30 <_dtoa_r>
 8008d92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d96:	4606      	mov	r6, r0
 8008d98:	d102      	bne.n	8008da0 <__cvt+0x60>
 8008d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d9c:	07db      	lsls	r3, r3, #31
 8008d9e:	d522      	bpl.n	8008de6 <__cvt+0xa6>
 8008da0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008da4:	eb06 0905 	add.w	r9, r6, r5
 8008da8:	d110      	bne.n	8008dcc <__cvt+0x8c>
 8008daa:	7833      	ldrb	r3, [r6, #0]
 8008dac:	2b30      	cmp	r3, #48	; 0x30
 8008dae:	d10a      	bne.n	8008dc6 <__cvt+0x86>
 8008db0:	2200      	movs	r2, #0
 8008db2:	2300      	movs	r3, #0
 8008db4:	4620      	mov	r0, r4
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fe00 	bl	80009bc <__aeabi_dcmpeq>
 8008dbc:	b918      	cbnz	r0, 8008dc6 <__cvt+0x86>
 8008dbe:	f1c5 0501 	rsb	r5, r5, #1
 8008dc2:	f8ca 5000 	str.w	r5, [sl]
 8008dc6:	f8da 3000 	ldr.w	r3, [sl]
 8008dca:	4499      	add	r9, r3
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fdf2 	bl	80009bc <__aeabi_dcmpeq>
 8008dd8:	b108      	cbz	r0, 8008dde <__cvt+0x9e>
 8008dda:	f8cd 901c 	str.w	r9, [sp, #28]
 8008dde:	2230      	movs	r2, #48	; 0x30
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	454b      	cmp	r3, r9
 8008de4:	d307      	bcc.n	8008df6 <__cvt+0xb6>
 8008de6:	4630      	mov	r0, r6
 8008de8:	9b07      	ldr	r3, [sp, #28]
 8008dea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008dec:	1b9b      	subs	r3, r3, r6
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	b008      	add	sp, #32
 8008df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df6:	1c59      	adds	r1, r3, #1
 8008df8:	9107      	str	r1, [sp, #28]
 8008dfa:	701a      	strb	r2, [r3, #0]
 8008dfc:	e7f0      	b.n	8008de0 <__cvt+0xa0>

08008dfe <__exponent>:
 8008dfe:	4603      	mov	r3, r0
 8008e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e02:	2900      	cmp	r1, #0
 8008e04:	f803 2b02 	strb.w	r2, [r3], #2
 8008e08:	bfb6      	itet	lt
 8008e0a:	222d      	movlt	r2, #45	; 0x2d
 8008e0c:	222b      	movge	r2, #43	; 0x2b
 8008e0e:	4249      	neglt	r1, r1
 8008e10:	2909      	cmp	r1, #9
 8008e12:	7042      	strb	r2, [r0, #1]
 8008e14:	dd2b      	ble.n	8008e6e <__exponent+0x70>
 8008e16:	f10d 0407 	add.w	r4, sp, #7
 8008e1a:	46a4      	mov	ip, r4
 8008e1c:	270a      	movs	r7, #10
 8008e1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e22:	460a      	mov	r2, r1
 8008e24:	46a6      	mov	lr, r4
 8008e26:	fb07 1516 	mls	r5, r7, r6, r1
 8008e2a:	2a63      	cmp	r2, #99	; 0x63
 8008e2c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008e30:	4631      	mov	r1, r6
 8008e32:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e3a:	dcf0      	bgt.n	8008e1e <__exponent+0x20>
 8008e3c:	3130      	adds	r1, #48	; 0x30
 8008e3e:	f1ae 0502 	sub.w	r5, lr, #2
 8008e42:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e46:	4629      	mov	r1, r5
 8008e48:	1c44      	adds	r4, r0, #1
 8008e4a:	4561      	cmp	r1, ip
 8008e4c:	d30a      	bcc.n	8008e64 <__exponent+0x66>
 8008e4e:	f10d 0209 	add.w	r2, sp, #9
 8008e52:	eba2 020e 	sub.w	r2, r2, lr
 8008e56:	4565      	cmp	r5, ip
 8008e58:	bf88      	it	hi
 8008e5a:	2200      	movhi	r2, #0
 8008e5c:	4413      	add	r3, r2
 8008e5e:	1a18      	subs	r0, r3, r0
 8008e60:	b003      	add	sp, #12
 8008e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e68:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e6c:	e7ed      	b.n	8008e4a <__exponent+0x4c>
 8008e6e:	2330      	movs	r3, #48	; 0x30
 8008e70:	3130      	adds	r1, #48	; 0x30
 8008e72:	7083      	strb	r3, [r0, #2]
 8008e74:	70c1      	strb	r1, [r0, #3]
 8008e76:	1d03      	adds	r3, r0, #4
 8008e78:	e7f1      	b.n	8008e5e <__exponent+0x60>
	...

08008e7c <_printf_float>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	b091      	sub	sp, #68	; 0x44
 8008e82:	460c      	mov	r4, r1
 8008e84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008e88:	4616      	mov	r6, r2
 8008e8a:	461f      	mov	r7, r3
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	f003 f961 	bl	800c154 <_localeconv_r>
 8008e92:	6803      	ldr	r3, [r0, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	9309      	str	r3, [sp, #36]	; 0x24
 8008e98:	f7f7 f964 	bl	8000164 <strlen>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	930e      	str	r3, [sp, #56]	; 0x38
 8008ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ea6:	3307      	adds	r3, #7
 8008ea8:	f023 0307 	bic.w	r3, r3, #7
 8008eac:	f103 0208 	add.w	r2, r3, #8
 8008eb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008eb4:	f8d4 b000 	ldr.w	fp, [r4]
 8008eb8:	f8c8 2000 	str.w	r2, [r8]
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ec4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008ec8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008ecc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ece:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4b9c      	ldr	r3, [pc, #624]	; (8009148 <_printf_float+0x2cc>)
 8008ed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ed8:	f7f7 fda2 	bl	8000a20 <__aeabi_dcmpun>
 8008edc:	bb70      	cbnz	r0, 8008f3c <_printf_float+0xc0>
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4b98      	ldr	r3, [pc, #608]	; (8009148 <_printf_float+0x2cc>)
 8008ee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ee8:	f7f7 fd7c 	bl	80009e4 <__aeabi_dcmple>
 8008eec:	bb30      	cbnz	r0, 8008f3c <_printf_float+0xc0>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4651      	mov	r1, sl
 8008ef6:	f7f7 fd6b 	bl	80009d0 <__aeabi_dcmplt>
 8008efa:	b110      	cbz	r0, 8008f02 <_printf_float+0x86>
 8008efc:	232d      	movs	r3, #45	; 0x2d
 8008efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f02:	4b92      	ldr	r3, [pc, #584]	; (800914c <_printf_float+0x2d0>)
 8008f04:	4892      	ldr	r0, [pc, #584]	; (8009150 <_printf_float+0x2d4>)
 8008f06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f0a:	bf94      	ite	ls
 8008f0c:	4698      	movls	r8, r3
 8008f0e:	4680      	movhi	r8, r0
 8008f10:	2303      	movs	r3, #3
 8008f12:	f04f 0a00 	mov.w	sl, #0
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	f02b 0304 	bic.w	r3, fp, #4
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	4633      	mov	r3, r6
 8008f20:	4621      	mov	r1, r4
 8008f22:	4628      	mov	r0, r5
 8008f24:	9700      	str	r7, [sp, #0]
 8008f26:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f28:	f000 f9d4 	bl	80092d4 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	f040 8090 	bne.w	8009052 <_printf_float+0x1d6>
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	b011      	add	sp, #68	; 0x44
 8008f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	4653      	mov	r3, sl
 8008f40:	4640      	mov	r0, r8
 8008f42:	4651      	mov	r1, sl
 8008f44:	f7f7 fd6c 	bl	8000a20 <__aeabi_dcmpun>
 8008f48:	b148      	cbz	r0, 8008f5e <_printf_float+0xe2>
 8008f4a:	f1ba 0f00 	cmp.w	sl, #0
 8008f4e:	bfb8      	it	lt
 8008f50:	232d      	movlt	r3, #45	; 0x2d
 8008f52:	4880      	ldr	r0, [pc, #512]	; (8009154 <_printf_float+0x2d8>)
 8008f54:	bfb8      	it	lt
 8008f56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f5a:	4b7f      	ldr	r3, [pc, #508]	; (8009158 <_printf_float+0x2dc>)
 8008f5c:	e7d3      	b.n	8008f06 <_printf_float+0x8a>
 8008f5e:	6863      	ldr	r3, [r4, #4]
 8008f60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	d142      	bne.n	8008fee <_printf_float+0x172>
 8008f68:	2306      	movs	r3, #6
 8008f6a:	6063      	str	r3, [r4, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	9206      	str	r2, [sp, #24]
 8008f70:	aa0e      	add	r2, sp, #56	; 0x38
 8008f72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008f76:	aa0d      	add	r2, sp, #52	; 0x34
 8008f78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008f7c:	9203      	str	r2, [sp, #12]
 8008f7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008f82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	6863      	ldr	r3, [r4, #4]
 8008f8a:	4642      	mov	r2, r8
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	4653      	mov	r3, sl
 8008f92:	910b      	str	r1, [sp, #44]	; 0x2c
 8008f94:	f7ff fed4 	bl	8008d40 <__cvt>
 8008f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	2947      	cmp	r1, #71	; 0x47
 8008f9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fa0:	d108      	bne.n	8008fb4 <_printf_float+0x138>
 8008fa2:	1cc8      	adds	r0, r1, #3
 8008fa4:	db02      	blt.n	8008fac <_printf_float+0x130>
 8008fa6:	6863      	ldr	r3, [r4, #4]
 8008fa8:	4299      	cmp	r1, r3
 8008faa:	dd40      	ble.n	800902e <_printf_float+0x1b2>
 8008fac:	f1a9 0902 	sub.w	r9, r9, #2
 8008fb0:	fa5f f989 	uxtb.w	r9, r9
 8008fb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fb8:	d81f      	bhi.n	8008ffa <_printf_float+0x17e>
 8008fba:	464a      	mov	r2, r9
 8008fbc:	3901      	subs	r1, #1
 8008fbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fc2:	910d      	str	r1, [sp, #52]	; 0x34
 8008fc4:	f7ff ff1b 	bl	8008dfe <__exponent>
 8008fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fca:	4682      	mov	sl, r0
 8008fcc:	1813      	adds	r3, r2, r0
 8008fce:	2a01      	cmp	r2, #1
 8008fd0:	6123      	str	r3, [r4, #16]
 8008fd2:	dc02      	bgt.n	8008fda <_printf_float+0x15e>
 8008fd4:	6822      	ldr	r2, [r4, #0]
 8008fd6:	07d2      	lsls	r2, r2, #31
 8008fd8:	d501      	bpl.n	8008fde <_printf_float+0x162>
 8008fda:	3301      	adds	r3, #1
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d09b      	beq.n	8008f1e <_printf_float+0xa2>
 8008fe6:	232d      	movs	r3, #45	; 0x2d
 8008fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fec:	e797      	b.n	8008f1e <_printf_float+0xa2>
 8008fee:	2947      	cmp	r1, #71	; 0x47
 8008ff0:	d1bc      	bne.n	8008f6c <_printf_float+0xf0>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1ba      	bne.n	8008f6c <_printf_float+0xf0>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e7b7      	b.n	8008f6a <_printf_float+0xee>
 8008ffa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ffe:	d118      	bne.n	8009032 <_printf_float+0x1b6>
 8009000:	2900      	cmp	r1, #0
 8009002:	6863      	ldr	r3, [r4, #4]
 8009004:	dd0b      	ble.n	800901e <_printf_float+0x1a2>
 8009006:	6121      	str	r1, [r4, #16]
 8009008:	b913      	cbnz	r3, 8009010 <_printf_float+0x194>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	07d0      	lsls	r0, r2, #31
 800900e:	d502      	bpl.n	8009016 <_printf_float+0x19a>
 8009010:	3301      	adds	r3, #1
 8009012:	440b      	add	r3, r1
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	f04f 0a00 	mov.w	sl, #0
 800901a:	65a1      	str	r1, [r4, #88]	; 0x58
 800901c:	e7df      	b.n	8008fde <_printf_float+0x162>
 800901e:	b913      	cbnz	r3, 8009026 <_printf_float+0x1aa>
 8009020:	6822      	ldr	r2, [r4, #0]
 8009022:	07d2      	lsls	r2, r2, #31
 8009024:	d501      	bpl.n	800902a <_printf_float+0x1ae>
 8009026:	3302      	adds	r3, #2
 8009028:	e7f4      	b.n	8009014 <_printf_float+0x198>
 800902a:	2301      	movs	r3, #1
 800902c:	e7f2      	b.n	8009014 <_printf_float+0x198>
 800902e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009034:	4299      	cmp	r1, r3
 8009036:	db05      	blt.n	8009044 <_printf_float+0x1c8>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	6121      	str	r1, [r4, #16]
 800903c:	07d8      	lsls	r0, r3, #31
 800903e:	d5ea      	bpl.n	8009016 <_printf_float+0x19a>
 8009040:	1c4b      	adds	r3, r1, #1
 8009042:	e7e7      	b.n	8009014 <_printf_float+0x198>
 8009044:	2900      	cmp	r1, #0
 8009046:	bfcc      	ite	gt
 8009048:	2201      	movgt	r2, #1
 800904a:	f1c1 0202 	rsble	r2, r1, #2
 800904e:	4413      	add	r3, r2
 8009050:	e7e0      	b.n	8009014 <_printf_float+0x198>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	055a      	lsls	r2, r3, #21
 8009056:	d407      	bmi.n	8009068 <_printf_float+0x1ec>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	4642      	mov	r2, r8
 800905c:	4631      	mov	r1, r6
 800905e:	4628      	mov	r0, r5
 8009060:	47b8      	blx	r7
 8009062:	3001      	adds	r0, #1
 8009064:	d12b      	bne.n	80090be <_printf_float+0x242>
 8009066:	e764      	b.n	8008f32 <_printf_float+0xb6>
 8009068:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800906c:	f240 80dd 	bls.w	800922a <_printf_float+0x3ae>
 8009070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009074:	2200      	movs	r2, #0
 8009076:	2300      	movs	r3, #0
 8009078:	f7f7 fca0 	bl	80009bc <__aeabi_dcmpeq>
 800907c:	2800      	cmp	r0, #0
 800907e:	d033      	beq.n	80090e8 <_printf_float+0x26c>
 8009080:	2301      	movs	r3, #1
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	4a35      	ldr	r2, [pc, #212]	; (800915c <_printf_float+0x2e0>)
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f af51 	beq.w	8008f32 <_printf_float+0xb6>
 8009090:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009094:	429a      	cmp	r2, r3
 8009096:	db02      	blt.n	800909e <_printf_float+0x222>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	07d8      	lsls	r0, r3, #31
 800909c:	d50f      	bpl.n	80090be <_printf_float+0x242>
 800909e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090a2:	4631      	mov	r1, r6
 80090a4:	4628      	mov	r0, r5
 80090a6:	47b8      	blx	r7
 80090a8:	3001      	adds	r0, #1
 80090aa:	f43f af42 	beq.w	8008f32 <_printf_float+0xb6>
 80090ae:	f04f 0800 	mov.w	r8, #0
 80090b2:	f104 091a 	add.w	r9, r4, #26
 80090b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b8:	3b01      	subs	r3, #1
 80090ba:	4543      	cmp	r3, r8
 80090bc:	dc09      	bgt.n	80090d2 <_printf_float+0x256>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	079b      	lsls	r3, r3, #30
 80090c2:	f100 8102 	bmi.w	80092ca <_printf_float+0x44e>
 80090c6:	68e0      	ldr	r0, [r4, #12]
 80090c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ca:	4298      	cmp	r0, r3
 80090cc:	bfb8      	it	lt
 80090ce:	4618      	movlt	r0, r3
 80090d0:	e731      	b.n	8008f36 <_printf_float+0xba>
 80090d2:	2301      	movs	r3, #1
 80090d4:	464a      	mov	r2, r9
 80090d6:	4631      	mov	r1, r6
 80090d8:	4628      	mov	r0, r5
 80090da:	47b8      	blx	r7
 80090dc:	3001      	adds	r0, #1
 80090de:	f43f af28 	beq.w	8008f32 <_printf_float+0xb6>
 80090e2:	f108 0801 	add.w	r8, r8, #1
 80090e6:	e7e6      	b.n	80090b6 <_printf_float+0x23a>
 80090e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	dc38      	bgt.n	8009160 <_printf_float+0x2e4>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	4a19      	ldr	r2, [pc, #100]	; (800915c <_printf_float+0x2e0>)
 80090f6:	47b8      	blx	r7
 80090f8:	3001      	adds	r0, #1
 80090fa:	f43f af1a 	beq.w	8008f32 <_printf_float+0xb6>
 80090fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009102:	4313      	orrs	r3, r2
 8009104:	d102      	bne.n	800910c <_printf_float+0x290>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	07d9      	lsls	r1, r3, #31
 800910a:	d5d8      	bpl.n	80090be <_printf_float+0x242>
 800910c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	f43f af0b 	beq.w	8008f32 <_printf_float+0xb6>
 800911c:	f04f 0900 	mov.w	r9, #0
 8009120:	f104 0a1a 	add.w	sl, r4, #26
 8009124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009126:	425b      	negs	r3, r3
 8009128:	454b      	cmp	r3, r9
 800912a:	dc01      	bgt.n	8009130 <_printf_float+0x2b4>
 800912c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800912e:	e794      	b.n	800905a <_printf_float+0x1de>
 8009130:	2301      	movs	r3, #1
 8009132:	4652      	mov	r2, sl
 8009134:	4631      	mov	r1, r6
 8009136:	4628      	mov	r0, r5
 8009138:	47b8      	blx	r7
 800913a:	3001      	adds	r0, #1
 800913c:	f43f aef9 	beq.w	8008f32 <_printf_float+0xb6>
 8009140:	f109 0901 	add.w	r9, r9, #1
 8009144:	e7ee      	b.n	8009124 <_printf_float+0x2a8>
 8009146:	bf00      	nop
 8009148:	7fefffff 	.word	0x7fefffff
 800914c:	0800d880 	.word	0x0800d880
 8009150:	0800d884 	.word	0x0800d884
 8009154:	0800d88c 	.word	0x0800d88c
 8009158:	0800d888 	.word	0x0800d888
 800915c:	0800d890 	.word	0x0800d890
 8009160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009164:	429a      	cmp	r2, r3
 8009166:	bfa8      	it	ge
 8009168:	461a      	movge	r2, r3
 800916a:	2a00      	cmp	r2, #0
 800916c:	4691      	mov	r9, r2
 800916e:	dc37      	bgt.n	80091e0 <_printf_float+0x364>
 8009170:	f04f 0b00 	mov.w	fp, #0
 8009174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009178:	f104 021a 	add.w	r2, r4, #26
 800917c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009180:	ebaa 0309 	sub.w	r3, sl, r9
 8009184:	455b      	cmp	r3, fp
 8009186:	dc33      	bgt.n	80091f0 <_printf_float+0x374>
 8009188:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800918c:	429a      	cmp	r2, r3
 800918e:	db3b      	blt.n	8009208 <_printf_float+0x38c>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	07da      	lsls	r2, r3, #31
 8009194:	d438      	bmi.n	8009208 <_printf_float+0x38c>
 8009196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009198:	990d      	ldr	r1, [sp, #52]	; 0x34
 800919a:	eba3 020a 	sub.w	r2, r3, sl
 800919e:	eba3 0901 	sub.w	r9, r3, r1
 80091a2:	4591      	cmp	r9, r2
 80091a4:	bfa8      	it	ge
 80091a6:	4691      	movge	r9, r2
 80091a8:	f1b9 0f00 	cmp.w	r9, #0
 80091ac:	dc34      	bgt.n	8009218 <_printf_float+0x39c>
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091b6:	f104 0a1a 	add.w	sl, r4, #26
 80091ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	eba3 0309 	sub.w	r3, r3, r9
 80091c4:	4543      	cmp	r3, r8
 80091c6:	f77f af7a 	ble.w	80090be <_printf_float+0x242>
 80091ca:	2301      	movs	r3, #1
 80091cc:	4652      	mov	r2, sl
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f aeac 	beq.w	8008f32 <_printf_float+0xb6>
 80091da:	f108 0801 	add.w	r8, r8, #1
 80091de:	e7ec      	b.n	80091ba <_printf_float+0x33e>
 80091e0:	4613      	mov	r3, r2
 80091e2:	4631      	mov	r1, r6
 80091e4:	4642      	mov	r2, r8
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	d1c0      	bne.n	8009170 <_printf_float+0x2f4>
 80091ee:	e6a0      	b.n	8008f32 <_printf_float+0xb6>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	f43f ae99 	beq.w	8008f32 <_printf_float+0xb6>
 8009200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009202:	f10b 0b01 	add.w	fp, fp, #1
 8009206:	e7b9      	b.n	800917c <_printf_float+0x300>
 8009208:	4631      	mov	r1, r6
 800920a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800920e:	4628      	mov	r0, r5
 8009210:	47b8      	blx	r7
 8009212:	3001      	adds	r0, #1
 8009214:	d1bf      	bne.n	8009196 <_printf_float+0x31a>
 8009216:	e68c      	b.n	8008f32 <_printf_float+0xb6>
 8009218:	464b      	mov	r3, r9
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	eb08 020a 	add.w	r2, r8, sl
 8009222:	47b8      	blx	r7
 8009224:	3001      	adds	r0, #1
 8009226:	d1c2      	bne.n	80091ae <_printf_float+0x332>
 8009228:	e683      	b.n	8008f32 <_printf_float+0xb6>
 800922a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800922c:	2a01      	cmp	r2, #1
 800922e:	dc01      	bgt.n	8009234 <_printf_float+0x3b8>
 8009230:	07db      	lsls	r3, r3, #31
 8009232:	d537      	bpl.n	80092a4 <_printf_float+0x428>
 8009234:	2301      	movs	r3, #1
 8009236:	4642      	mov	r2, r8
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	47b8      	blx	r7
 800923e:	3001      	adds	r0, #1
 8009240:	f43f ae77 	beq.w	8008f32 <_printf_float+0xb6>
 8009244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009248:	4631      	mov	r1, r6
 800924a:	4628      	mov	r0, r5
 800924c:	47b8      	blx	r7
 800924e:	3001      	adds	r0, #1
 8009250:	f43f ae6f 	beq.w	8008f32 <_printf_float+0xb6>
 8009254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	f7f7 fbae 	bl	80009bc <__aeabi_dcmpeq>
 8009260:	b9d8      	cbnz	r0, 800929a <_printf_float+0x41e>
 8009262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009264:	f108 0201 	add.w	r2, r8, #1
 8009268:	3b01      	subs	r3, #1
 800926a:	4631      	mov	r1, r6
 800926c:	4628      	mov	r0, r5
 800926e:	47b8      	blx	r7
 8009270:	3001      	adds	r0, #1
 8009272:	d10e      	bne.n	8009292 <_printf_float+0x416>
 8009274:	e65d      	b.n	8008f32 <_printf_float+0xb6>
 8009276:	2301      	movs	r3, #1
 8009278:	464a      	mov	r2, r9
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	f43f ae56 	beq.w	8008f32 <_printf_float+0xb6>
 8009286:	f108 0801 	add.w	r8, r8, #1
 800928a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800928c:	3b01      	subs	r3, #1
 800928e:	4543      	cmp	r3, r8
 8009290:	dcf1      	bgt.n	8009276 <_printf_float+0x3fa>
 8009292:	4653      	mov	r3, sl
 8009294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009298:	e6e0      	b.n	800905c <_printf_float+0x1e0>
 800929a:	f04f 0800 	mov.w	r8, #0
 800929e:	f104 091a 	add.w	r9, r4, #26
 80092a2:	e7f2      	b.n	800928a <_printf_float+0x40e>
 80092a4:	2301      	movs	r3, #1
 80092a6:	4642      	mov	r2, r8
 80092a8:	e7df      	b.n	800926a <_printf_float+0x3ee>
 80092aa:	2301      	movs	r3, #1
 80092ac:	464a      	mov	r2, r9
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	f43f ae3c 	beq.w	8008f32 <_printf_float+0xb6>
 80092ba:	f108 0801 	add.w	r8, r8, #1
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092c2:	1a5b      	subs	r3, r3, r1
 80092c4:	4543      	cmp	r3, r8
 80092c6:	dcf0      	bgt.n	80092aa <_printf_float+0x42e>
 80092c8:	e6fd      	b.n	80090c6 <_printf_float+0x24a>
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	f104 0919 	add.w	r9, r4, #25
 80092d2:	e7f4      	b.n	80092be <_printf_float+0x442>

080092d4 <_printf_common>:
 80092d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d8:	4616      	mov	r6, r2
 80092da:	4699      	mov	r9, r3
 80092dc:	688a      	ldr	r2, [r1, #8]
 80092de:	690b      	ldr	r3, [r1, #16]
 80092e0:	4607      	mov	r7, r0
 80092e2:	4293      	cmp	r3, r2
 80092e4:	bfb8      	it	lt
 80092e6:	4613      	movlt	r3, r2
 80092e8:	6033      	str	r3, [r6, #0]
 80092ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092ee:	460c      	mov	r4, r1
 80092f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092f4:	b10a      	cbz	r2, 80092fa <_printf_common+0x26>
 80092f6:	3301      	adds	r3, #1
 80092f8:	6033      	str	r3, [r6, #0]
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	0699      	lsls	r1, r3, #26
 80092fe:	bf42      	ittt	mi
 8009300:	6833      	ldrmi	r3, [r6, #0]
 8009302:	3302      	addmi	r3, #2
 8009304:	6033      	strmi	r3, [r6, #0]
 8009306:	6825      	ldr	r5, [r4, #0]
 8009308:	f015 0506 	ands.w	r5, r5, #6
 800930c:	d106      	bne.n	800931c <_printf_common+0x48>
 800930e:	f104 0a19 	add.w	sl, r4, #25
 8009312:	68e3      	ldr	r3, [r4, #12]
 8009314:	6832      	ldr	r2, [r6, #0]
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	42ab      	cmp	r3, r5
 800931a:	dc28      	bgt.n	800936e <_printf_common+0x9a>
 800931c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009320:	1e13      	subs	r3, r2, #0
 8009322:	6822      	ldr	r2, [r4, #0]
 8009324:	bf18      	it	ne
 8009326:	2301      	movne	r3, #1
 8009328:	0692      	lsls	r2, r2, #26
 800932a:	d42d      	bmi.n	8009388 <_printf_common+0xb4>
 800932c:	4649      	mov	r1, r9
 800932e:	4638      	mov	r0, r7
 8009330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009334:	47c0      	blx	r8
 8009336:	3001      	adds	r0, #1
 8009338:	d020      	beq.n	800937c <_printf_common+0xa8>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	68e5      	ldr	r5, [r4, #12]
 800933e:	f003 0306 	and.w	r3, r3, #6
 8009342:	2b04      	cmp	r3, #4
 8009344:	bf18      	it	ne
 8009346:	2500      	movne	r5, #0
 8009348:	6832      	ldr	r2, [r6, #0]
 800934a:	f04f 0600 	mov.w	r6, #0
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	bf08      	it	eq
 8009352:	1aad      	subeq	r5, r5, r2
 8009354:	6922      	ldr	r2, [r4, #16]
 8009356:	bf08      	it	eq
 8009358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800935c:	4293      	cmp	r3, r2
 800935e:	bfc4      	itt	gt
 8009360:	1a9b      	subgt	r3, r3, r2
 8009362:	18ed      	addgt	r5, r5, r3
 8009364:	341a      	adds	r4, #26
 8009366:	42b5      	cmp	r5, r6
 8009368:	d11a      	bne.n	80093a0 <_printf_common+0xcc>
 800936a:	2000      	movs	r0, #0
 800936c:	e008      	b.n	8009380 <_printf_common+0xac>
 800936e:	2301      	movs	r3, #1
 8009370:	4652      	mov	r2, sl
 8009372:	4649      	mov	r1, r9
 8009374:	4638      	mov	r0, r7
 8009376:	47c0      	blx	r8
 8009378:	3001      	adds	r0, #1
 800937a:	d103      	bne.n	8009384 <_printf_common+0xb0>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009384:	3501      	adds	r5, #1
 8009386:	e7c4      	b.n	8009312 <_printf_common+0x3e>
 8009388:	2030      	movs	r0, #48	; 0x30
 800938a:	18e1      	adds	r1, r4, r3
 800938c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009396:	4422      	add	r2, r4
 8009398:	3302      	adds	r3, #2
 800939a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800939e:	e7c5      	b.n	800932c <_printf_common+0x58>
 80093a0:	2301      	movs	r3, #1
 80093a2:	4622      	mov	r2, r4
 80093a4:	4649      	mov	r1, r9
 80093a6:	4638      	mov	r0, r7
 80093a8:	47c0      	blx	r8
 80093aa:	3001      	adds	r0, #1
 80093ac:	d0e6      	beq.n	800937c <_printf_common+0xa8>
 80093ae:	3601      	adds	r6, #1
 80093b0:	e7d9      	b.n	8009366 <_printf_common+0x92>
	...

080093b4 <_printf_i>:
 80093b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b8:	7e0f      	ldrb	r7, [r1, #24]
 80093ba:	4691      	mov	r9, r2
 80093bc:	2f78      	cmp	r7, #120	; 0x78
 80093be:	4680      	mov	r8, r0
 80093c0:	460c      	mov	r4, r1
 80093c2:	469a      	mov	sl, r3
 80093c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093ca:	d807      	bhi.n	80093dc <_printf_i+0x28>
 80093cc:	2f62      	cmp	r7, #98	; 0x62
 80093ce:	d80a      	bhi.n	80093e6 <_printf_i+0x32>
 80093d0:	2f00      	cmp	r7, #0
 80093d2:	f000 80d9 	beq.w	8009588 <_printf_i+0x1d4>
 80093d6:	2f58      	cmp	r7, #88	; 0x58
 80093d8:	f000 80a4 	beq.w	8009524 <_printf_i+0x170>
 80093dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093e4:	e03a      	b.n	800945c <_printf_i+0xa8>
 80093e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ea:	2b15      	cmp	r3, #21
 80093ec:	d8f6      	bhi.n	80093dc <_printf_i+0x28>
 80093ee:	a101      	add	r1, pc, #4	; (adr r1, 80093f4 <_printf_i+0x40>)
 80093f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093f4:	0800944d 	.word	0x0800944d
 80093f8:	08009461 	.word	0x08009461
 80093fc:	080093dd 	.word	0x080093dd
 8009400:	080093dd 	.word	0x080093dd
 8009404:	080093dd 	.word	0x080093dd
 8009408:	080093dd 	.word	0x080093dd
 800940c:	08009461 	.word	0x08009461
 8009410:	080093dd 	.word	0x080093dd
 8009414:	080093dd 	.word	0x080093dd
 8009418:	080093dd 	.word	0x080093dd
 800941c:	080093dd 	.word	0x080093dd
 8009420:	0800956f 	.word	0x0800956f
 8009424:	08009491 	.word	0x08009491
 8009428:	08009551 	.word	0x08009551
 800942c:	080093dd 	.word	0x080093dd
 8009430:	080093dd 	.word	0x080093dd
 8009434:	08009591 	.word	0x08009591
 8009438:	080093dd 	.word	0x080093dd
 800943c:	08009491 	.word	0x08009491
 8009440:	080093dd 	.word	0x080093dd
 8009444:	080093dd 	.word	0x080093dd
 8009448:	08009559 	.word	0x08009559
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	1d1a      	adds	r2, r3, #4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	602a      	str	r2, [r5, #0]
 8009454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800945c:	2301      	movs	r3, #1
 800945e:	e0a4      	b.n	80095aa <_printf_i+0x1f6>
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	6829      	ldr	r1, [r5, #0]
 8009464:	0606      	lsls	r6, r0, #24
 8009466:	f101 0304 	add.w	r3, r1, #4
 800946a:	d50a      	bpl.n	8009482 <_printf_i+0xce>
 800946c:	680e      	ldr	r6, [r1, #0]
 800946e:	602b      	str	r3, [r5, #0]
 8009470:	2e00      	cmp	r6, #0
 8009472:	da03      	bge.n	800947c <_printf_i+0xc8>
 8009474:	232d      	movs	r3, #45	; 0x2d
 8009476:	4276      	negs	r6, r6
 8009478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800947c:	230a      	movs	r3, #10
 800947e:	485e      	ldr	r0, [pc, #376]	; (80095f8 <_printf_i+0x244>)
 8009480:	e019      	b.n	80094b6 <_printf_i+0x102>
 8009482:	680e      	ldr	r6, [r1, #0]
 8009484:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	bf18      	it	ne
 800948c:	b236      	sxthne	r6, r6
 800948e:	e7ef      	b.n	8009470 <_printf_i+0xbc>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	1d19      	adds	r1, r3, #4
 8009496:	6029      	str	r1, [r5, #0]
 8009498:	0601      	lsls	r1, r0, #24
 800949a:	d501      	bpl.n	80094a0 <_printf_i+0xec>
 800949c:	681e      	ldr	r6, [r3, #0]
 800949e:	e002      	b.n	80094a6 <_printf_i+0xf2>
 80094a0:	0646      	lsls	r6, r0, #25
 80094a2:	d5fb      	bpl.n	800949c <_printf_i+0xe8>
 80094a4:	881e      	ldrh	r6, [r3, #0]
 80094a6:	2f6f      	cmp	r7, #111	; 0x6f
 80094a8:	bf0c      	ite	eq
 80094aa:	2308      	moveq	r3, #8
 80094ac:	230a      	movne	r3, #10
 80094ae:	4852      	ldr	r0, [pc, #328]	; (80095f8 <_printf_i+0x244>)
 80094b0:	2100      	movs	r1, #0
 80094b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094b6:	6865      	ldr	r5, [r4, #4]
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	bfa8      	it	ge
 80094bc:	6821      	ldrge	r1, [r4, #0]
 80094be:	60a5      	str	r5, [r4, #8]
 80094c0:	bfa4      	itt	ge
 80094c2:	f021 0104 	bicge.w	r1, r1, #4
 80094c6:	6021      	strge	r1, [r4, #0]
 80094c8:	b90e      	cbnz	r6, 80094ce <_printf_i+0x11a>
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	d04d      	beq.n	800956a <_printf_i+0x1b6>
 80094ce:	4615      	mov	r5, r2
 80094d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80094d4:	fb03 6711 	mls	r7, r3, r1, r6
 80094d8:	5dc7      	ldrb	r7, [r0, r7]
 80094da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094de:	4637      	mov	r7, r6
 80094e0:	42bb      	cmp	r3, r7
 80094e2:	460e      	mov	r6, r1
 80094e4:	d9f4      	bls.n	80094d0 <_printf_i+0x11c>
 80094e6:	2b08      	cmp	r3, #8
 80094e8:	d10b      	bne.n	8009502 <_printf_i+0x14e>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	07de      	lsls	r6, r3, #31
 80094ee:	d508      	bpl.n	8009502 <_printf_i+0x14e>
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	6861      	ldr	r1, [r4, #4]
 80094f4:	4299      	cmp	r1, r3
 80094f6:	bfde      	ittt	le
 80094f8:	2330      	movle	r3, #48	; 0x30
 80094fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009502:	1b52      	subs	r2, r2, r5
 8009504:	6122      	str	r2, [r4, #16]
 8009506:	464b      	mov	r3, r9
 8009508:	4621      	mov	r1, r4
 800950a:	4640      	mov	r0, r8
 800950c:	f8cd a000 	str.w	sl, [sp]
 8009510:	aa03      	add	r2, sp, #12
 8009512:	f7ff fedf 	bl	80092d4 <_printf_common>
 8009516:	3001      	adds	r0, #1
 8009518:	d14c      	bne.n	80095b4 <_printf_i+0x200>
 800951a:	f04f 30ff 	mov.w	r0, #4294967295
 800951e:	b004      	add	sp, #16
 8009520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009524:	4834      	ldr	r0, [pc, #208]	; (80095f8 <_printf_i+0x244>)
 8009526:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800952a:	6829      	ldr	r1, [r5, #0]
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009532:	6029      	str	r1, [r5, #0]
 8009534:	061d      	lsls	r5, r3, #24
 8009536:	d514      	bpl.n	8009562 <_printf_i+0x1ae>
 8009538:	07df      	lsls	r7, r3, #31
 800953a:	bf44      	itt	mi
 800953c:	f043 0320 	orrmi.w	r3, r3, #32
 8009540:	6023      	strmi	r3, [r4, #0]
 8009542:	b91e      	cbnz	r6, 800954c <_printf_i+0x198>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	f023 0320 	bic.w	r3, r3, #32
 800954a:	6023      	str	r3, [r4, #0]
 800954c:	2310      	movs	r3, #16
 800954e:	e7af      	b.n	80094b0 <_printf_i+0xfc>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	f043 0320 	orr.w	r3, r3, #32
 8009556:	6023      	str	r3, [r4, #0]
 8009558:	2378      	movs	r3, #120	; 0x78
 800955a:	4828      	ldr	r0, [pc, #160]	; (80095fc <_printf_i+0x248>)
 800955c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009560:	e7e3      	b.n	800952a <_printf_i+0x176>
 8009562:	0659      	lsls	r1, r3, #25
 8009564:	bf48      	it	mi
 8009566:	b2b6      	uxthmi	r6, r6
 8009568:	e7e6      	b.n	8009538 <_printf_i+0x184>
 800956a:	4615      	mov	r5, r2
 800956c:	e7bb      	b.n	80094e6 <_printf_i+0x132>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	6826      	ldr	r6, [r4, #0]
 8009572:	1d18      	adds	r0, r3, #4
 8009574:	6961      	ldr	r1, [r4, #20]
 8009576:	6028      	str	r0, [r5, #0]
 8009578:	0635      	lsls	r5, r6, #24
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	d501      	bpl.n	8009582 <_printf_i+0x1ce>
 800957e:	6019      	str	r1, [r3, #0]
 8009580:	e002      	b.n	8009588 <_printf_i+0x1d4>
 8009582:	0670      	lsls	r0, r6, #25
 8009584:	d5fb      	bpl.n	800957e <_printf_i+0x1ca>
 8009586:	8019      	strh	r1, [r3, #0]
 8009588:	2300      	movs	r3, #0
 800958a:	4615      	mov	r5, r2
 800958c:	6123      	str	r3, [r4, #16]
 800958e:	e7ba      	b.n	8009506 <_printf_i+0x152>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	2100      	movs	r1, #0
 8009594:	1d1a      	adds	r2, r3, #4
 8009596:	602a      	str	r2, [r5, #0]
 8009598:	681d      	ldr	r5, [r3, #0]
 800959a:	6862      	ldr	r2, [r4, #4]
 800959c:	4628      	mov	r0, r5
 800959e:	f002 fe6f 	bl	800c280 <memchr>
 80095a2:	b108      	cbz	r0, 80095a8 <_printf_i+0x1f4>
 80095a4:	1b40      	subs	r0, r0, r5
 80095a6:	6060      	str	r0, [r4, #4]
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	2300      	movs	r3, #0
 80095ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b2:	e7a8      	b.n	8009506 <_printf_i+0x152>
 80095b4:	462a      	mov	r2, r5
 80095b6:	4649      	mov	r1, r9
 80095b8:	4640      	mov	r0, r8
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	47d0      	blx	sl
 80095be:	3001      	adds	r0, #1
 80095c0:	d0ab      	beq.n	800951a <_printf_i+0x166>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	079b      	lsls	r3, r3, #30
 80095c6:	d413      	bmi.n	80095f0 <_printf_i+0x23c>
 80095c8:	68e0      	ldr	r0, [r4, #12]
 80095ca:	9b03      	ldr	r3, [sp, #12]
 80095cc:	4298      	cmp	r0, r3
 80095ce:	bfb8      	it	lt
 80095d0:	4618      	movlt	r0, r3
 80095d2:	e7a4      	b.n	800951e <_printf_i+0x16a>
 80095d4:	2301      	movs	r3, #1
 80095d6:	4632      	mov	r2, r6
 80095d8:	4649      	mov	r1, r9
 80095da:	4640      	mov	r0, r8
 80095dc:	47d0      	blx	sl
 80095de:	3001      	adds	r0, #1
 80095e0:	d09b      	beq.n	800951a <_printf_i+0x166>
 80095e2:	3501      	adds	r5, #1
 80095e4:	68e3      	ldr	r3, [r4, #12]
 80095e6:	9903      	ldr	r1, [sp, #12]
 80095e8:	1a5b      	subs	r3, r3, r1
 80095ea:	42ab      	cmp	r3, r5
 80095ec:	dcf2      	bgt.n	80095d4 <_printf_i+0x220>
 80095ee:	e7eb      	b.n	80095c8 <_printf_i+0x214>
 80095f0:	2500      	movs	r5, #0
 80095f2:	f104 0619 	add.w	r6, r4, #25
 80095f6:	e7f5      	b.n	80095e4 <_printf_i+0x230>
 80095f8:	0800d892 	.word	0x0800d892
 80095fc:	0800d8a3 	.word	0x0800d8a3

08009600 <_scanf_float>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	b087      	sub	sp, #28
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	688b      	ldr	r3, [r1, #8]
 800960a:	4617      	mov	r7, r2
 800960c:	1e5a      	subs	r2, r3, #1
 800960e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009612:	bf85      	ittet	hi
 8009614:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009618:	195b      	addhi	r3, r3, r5
 800961a:	2300      	movls	r3, #0
 800961c:	9302      	strhi	r3, [sp, #8]
 800961e:	bf88      	it	hi
 8009620:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009624:	468b      	mov	fp, r1
 8009626:	f04f 0500 	mov.w	r5, #0
 800962a:	bf8c      	ite	hi
 800962c:	608b      	strhi	r3, [r1, #8]
 800962e:	9302      	strls	r3, [sp, #8]
 8009630:	680b      	ldr	r3, [r1, #0]
 8009632:	4680      	mov	r8, r0
 8009634:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009638:	f84b 3b1c 	str.w	r3, [fp], #28
 800963c:	460c      	mov	r4, r1
 800963e:	465e      	mov	r6, fp
 8009640:	46aa      	mov	sl, r5
 8009642:	46a9      	mov	r9, r5
 8009644:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009648:	9501      	str	r5, [sp, #4]
 800964a:	68a2      	ldr	r2, [r4, #8]
 800964c:	b152      	cbz	r2, 8009664 <_scanf_float+0x64>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b4e      	cmp	r3, #78	; 0x4e
 8009654:	d864      	bhi.n	8009720 <_scanf_float+0x120>
 8009656:	2b40      	cmp	r3, #64	; 0x40
 8009658:	d83c      	bhi.n	80096d4 <_scanf_float+0xd4>
 800965a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800965e:	b2c8      	uxtb	r0, r1
 8009660:	280e      	cmp	r0, #14
 8009662:	d93a      	bls.n	80096da <_scanf_float+0xda>
 8009664:	f1b9 0f00 	cmp.w	r9, #0
 8009668:	d003      	beq.n	8009672 <_scanf_float+0x72>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009676:	f1ba 0f01 	cmp.w	sl, #1
 800967a:	f200 8113 	bhi.w	80098a4 <_scanf_float+0x2a4>
 800967e:	455e      	cmp	r6, fp
 8009680:	f200 8105 	bhi.w	800988e <_scanf_float+0x28e>
 8009684:	2501      	movs	r5, #1
 8009686:	4628      	mov	r0, r5
 8009688:	b007      	add	sp, #28
 800968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009692:	2a0d      	cmp	r2, #13
 8009694:	d8e6      	bhi.n	8009664 <_scanf_float+0x64>
 8009696:	a101      	add	r1, pc, #4	; (adr r1, 800969c <_scanf_float+0x9c>)
 8009698:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800969c:	080097db 	.word	0x080097db
 80096a0:	08009665 	.word	0x08009665
 80096a4:	08009665 	.word	0x08009665
 80096a8:	08009665 	.word	0x08009665
 80096ac:	0800983b 	.word	0x0800983b
 80096b0:	08009813 	.word	0x08009813
 80096b4:	08009665 	.word	0x08009665
 80096b8:	08009665 	.word	0x08009665
 80096bc:	080097e9 	.word	0x080097e9
 80096c0:	08009665 	.word	0x08009665
 80096c4:	08009665 	.word	0x08009665
 80096c8:	08009665 	.word	0x08009665
 80096cc:	08009665 	.word	0x08009665
 80096d0:	080097a1 	.word	0x080097a1
 80096d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80096d8:	e7db      	b.n	8009692 <_scanf_float+0x92>
 80096da:	290e      	cmp	r1, #14
 80096dc:	d8c2      	bhi.n	8009664 <_scanf_float+0x64>
 80096de:	a001      	add	r0, pc, #4	; (adr r0, 80096e4 <_scanf_float+0xe4>)
 80096e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80096e4:	08009793 	.word	0x08009793
 80096e8:	08009665 	.word	0x08009665
 80096ec:	08009793 	.word	0x08009793
 80096f0:	08009827 	.word	0x08009827
 80096f4:	08009665 	.word	0x08009665
 80096f8:	08009741 	.word	0x08009741
 80096fc:	0800977d 	.word	0x0800977d
 8009700:	0800977d 	.word	0x0800977d
 8009704:	0800977d 	.word	0x0800977d
 8009708:	0800977d 	.word	0x0800977d
 800970c:	0800977d 	.word	0x0800977d
 8009710:	0800977d 	.word	0x0800977d
 8009714:	0800977d 	.word	0x0800977d
 8009718:	0800977d 	.word	0x0800977d
 800971c:	0800977d 	.word	0x0800977d
 8009720:	2b6e      	cmp	r3, #110	; 0x6e
 8009722:	d809      	bhi.n	8009738 <_scanf_float+0x138>
 8009724:	2b60      	cmp	r3, #96	; 0x60
 8009726:	d8b2      	bhi.n	800968e <_scanf_float+0x8e>
 8009728:	2b54      	cmp	r3, #84	; 0x54
 800972a:	d077      	beq.n	800981c <_scanf_float+0x21c>
 800972c:	2b59      	cmp	r3, #89	; 0x59
 800972e:	d199      	bne.n	8009664 <_scanf_float+0x64>
 8009730:	2d07      	cmp	r5, #7
 8009732:	d197      	bne.n	8009664 <_scanf_float+0x64>
 8009734:	2508      	movs	r5, #8
 8009736:	e029      	b.n	800978c <_scanf_float+0x18c>
 8009738:	2b74      	cmp	r3, #116	; 0x74
 800973a:	d06f      	beq.n	800981c <_scanf_float+0x21c>
 800973c:	2b79      	cmp	r3, #121	; 0x79
 800973e:	e7f6      	b.n	800972e <_scanf_float+0x12e>
 8009740:	6821      	ldr	r1, [r4, #0]
 8009742:	05c8      	lsls	r0, r1, #23
 8009744:	d51a      	bpl.n	800977c <_scanf_float+0x17c>
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800974c:	6021      	str	r1, [r4, #0]
 800974e:	f109 0901 	add.w	r9, r9, #1
 8009752:	b11b      	cbz	r3, 800975c <_scanf_float+0x15c>
 8009754:	3b01      	subs	r3, #1
 8009756:	3201      	adds	r2, #1
 8009758:	9302      	str	r3, [sp, #8]
 800975a:	60a2      	str	r2, [r4, #8]
 800975c:	68a3      	ldr	r3, [r4, #8]
 800975e:	3b01      	subs	r3, #1
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	3301      	adds	r3, #1
 8009766:	6123      	str	r3, [r4, #16]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3b01      	subs	r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	607b      	str	r3, [r7, #4]
 8009770:	f340 8084 	ble.w	800987c <_scanf_float+0x27c>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	3301      	adds	r3, #1
 8009778:	603b      	str	r3, [r7, #0]
 800977a:	e766      	b.n	800964a <_scanf_float+0x4a>
 800977c:	eb1a 0f05 	cmn.w	sl, r5
 8009780:	f47f af70 	bne.w	8009664 <_scanf_float+0x64>
 8009784:	6822      	ldr	r2, [r4, #0]
 8009786:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800978a:	6022      	str	r2, [r4, #0]
 800978c:	f806 3b01 	strb.w	r3, [r6], #1
 8009790:	e7e4      	b.n	800975c <_scanf_float+0x15c>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	0610      	lsls	r0, r2, #24
 8009796:	f57f af65 	bpl.w	8009664 <_scanf_float+0x64>
 800979a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800979e:	e7f4      	b.n	800978a <_scanf_float+0x18a>
 80097a0:	f1ba 0f00 	cmp.w	sl, #0
 80097a4:	d10e      	bne.n	80097c4 <_scanf_float+0x1c4>
 80097a6:	f1b9 0f00 	cmp.w	r9, #0
 80097aa:	d10e      	bne.n	80097ca <_scanf_float+0x1ca>
 80097ac:	6822      	ldr	r2, [r4, #0]
 80097ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097b6:	d108      	bne.n	80097ca <_scanf_float+0x1ca>
 80097b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097bc:	f04f 0a01 	mov.w	sl, #1
 80097c0:	6022      	str	r2, [r4, #0]
 80097c2:	e7e3      	b.n	800978c <_scanf_float+0x18c>
 80097c4:	f1ba 0f02 	cmp.w	sl, #2
 80097c8:	d055      	beq.n	8009876 <_scanf_float+0x276>
 80097ca:	2d01      	cmp	r5, #1
 80097cc:	d002      	beq.n	80097d4 <_scanf_float+0x1d4>
 80097ce:	2d04      	cmp	r5, #4
 80097d0:	f47f af48 	bne.w	8009664 <_scanf_float+0x64>
 80097d4:	3501      	adds	r5, #1
 80097d6:	b2ed      	uxtb	r5, r5
 80097d8:	e7d8      	b.n	800978c <_scanf_float+0x18c>
 80097da:	f1ba 0f01 	cmp.w	sl, #1
 80097de:	f47f af41 	bne.w	8009664 <_scanf_float+0x64>
 80097e2:	f04f 0a02 	mov.w	sl, #2
 80097e6:	e7d1      	b.n	800978c <_scanf_float+0x18c>
 80097e8:	b97d      	cbnz	r5, 800980a <_scanf_float+0x20a>
 80097ea:	f1b9 0f00 	cmp.w	r9, #0
 80097ee:	f47f af3c 	bne.w	800966a <_scanf_float+0x6a>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097fc:	f47f af39 	bne.w	8009672 <_scanf_float+0x72>
 8009800:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009804:	2501      	movs	r5, #1
 8009806:	6022      	str	r2, [r4, #0]
 8009808:	e7c0      	b.n	800978c <_scanf_float+0x18c>
 800980a:	2d03      	cmp	r5, #3
 800980c:	d0e2      	beq.n	80097d4 <_scanf_float+0x1d4>
 800980e:	2d05      	cmp	r5, #5
 8009810:	e7de      	b.n	80097d0 <_scanf_float+0x1d0>
 8009812:	2d02      	cmp	r5, #2
 8009814:	f47f af26 	bne.w	8009664 <_scanf_float+0x64>
 8009818:	2503      	movs	r5, #3
 800981a:	e7b7      	b.n	800978c <_scanf_float+0x18c>
 800981c:	2d06      	cmp	r5, #6
 800981e:	f47f af21 	bne.w	8009664 <_scanf_float+0x64>
 8009822:	2507      	movs	r5, #7
 8009824:	e7b2      	b.n	800978c <_scanf_float+0x18c>
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	0591      	lsls	r1, r2, #22
 800982a:	f57f af1b 	bpl.w	8009664 <_scanf_float+0x64>
 800982e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009832:	6022      	str	r2, [r4, #0]
 8009834:	f8cd 9004 	str.w	r9, [sp, #4]
 8009838:	e7a8      	b.n	800978c <_scanf_float+0x18c>
 800983a:	6822      	ldr	r2, [r4, #0]
 800983c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009840:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009844:	d006      	beq.n	8009854 <_scanf_float+0x254>
 8009846:	0550      	lsls	r0, r2, #21
 8009848:	f57f af0c 	bpl.w	8009664 <_scanf_float+0x64>
 800984c:	f1b9 0f00 	cmp.w	r9, #0
 8009850:	f43f af0f 	beq.w	8009672 <_scanf_float+0x72>
 8009854:	0591      	lsls	r1, r2, #22
 8009856:	bf58      	it	pl
 8009858:	9901      	ldrpl	r1, [sp, #4]
 800985a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800985e:	bf58      	it	pl
 8009860:	eba9 0101 	subpl.w	r1, r9, r1
 8009864:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009868:	f04f 0900 	mov.w	r9, #0
 800986c:	bf58      	it	pl
 800986e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009872:	6022      	str	r2, [r4, #0]
 8009874:	e78a      	b.n	800978c <_scanf_float+0x18c>
 8009876:	f04f 0a03 	mov.w	sl, #3
 800987a:	e787      	b.n	800978c <_scanf_float+0x18c>
 800987c:	4639      	mov	r1, r7
 800987e:	4640      	mov	r0, r8
 8009880:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009884:	4798      	blx	r3
 8009886:	2800      	cmp	r0, #0
 8009888:	f43f aedf 	beq.w	800964a <_scanf_float+0x4a>
 800988c:	e6ea      	b.n	8009664 <_scanf_float+0x64>
 800988e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009892:	463a      	mov	r2, r7
 8009894:	4640      	mov	r0, r8
 8009896:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800989a:	4798      	blx	r3
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	3b01      	subs	r3, #1
 80098a0:	6123      	str	r3, [r4, #16]
 80098a2:	e6ec      	b.n	800967e <_scanf_float+0x7e>
 80098a4:	1e6b      	subs	r3, r5, #1
 80098a6:	2b06      	cmp	r3, #6
 80098a8:	d825      	bhi.n	80098f6 <_scanf_float+0x2f6>
 80098aa:	2d02      	cmp	r5, #2
 80098ac:	d836      	bhi.n	800991c <_scanf_float+0x31c>
 80098ae:	455e      	cmp	r6, fp
 80098b0:	f67f aee8 	bls.w	8009684 <_scanf_float+0x84>
 80098b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098b8:	463a      	mov	r2, r7
 80098ba:	4640      	mov	r0, r8
 80098bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098c0:	4798      	blx	r3
 80098c2:	6923      	ldr	r3, [r4, #16]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	6123      	str	r3, [r4, #16]
 80098c8:	e7f1      	b.n	80098ae <_scanf_float+0x2ae>
 80098ca:	9802      	ldr	r0, [sp, #8]
 80098cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80098d4:	463a      	mov	r2, r7
 80098d6:	9002      	str	r0, [sp, #8]
 80098d8:	4640      	mov	r0, r8
 80098da:	4798      	blx	r3
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	3b01      	subs	r3, #1
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098e6:	fa5f fa8a 	uxtb.w	sl, sl
 80098ea:	f1ba 0f02 	cmp.w	sl, #2
 80098ee:	d1ec      	bne.n	80098ca <_scanf_float+0x2ca>
 80098f0:	3d03      	subs	r5, #3
 80098f2:	b2ed      	uxtb	r5, r5
 80098f4:	1b76      	subs	r6, r6, r5
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	05da      	lsls	r2, r3, #23
 80098fa:	d52f      	bpl.n	800995c <_scanf_float+0x35c>
 80098fc:	055b      	lsls	r3, r3, #21
 80098fe:	d510      	bpl.n	8009922 <_scanf_float+0x322>
 8009900:	455e      	cmp	r6, fp
 8009902:	f67f aebf 	bls.w	8009684 <_scanf_float+0x84>
 8009906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800990a:	463a      	mov	r2, r7
 800990c:	4640      	mov	r0, r8
 800990e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009912:	4798      	blx	r3
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	3b01      	subs	r3, #1
 8009918:	6123      	str	r3, [r4, #16]
 800991a:	e7f1      	b.n	8009900 <_scanf_float+0x300>
 800991c:	46aa      	mov	sl, r5
 800991e:	9602      	str	r6, [sp, #8]
 8009920:	e7df      	b.n	80098e2 <_scanf_float+0x2e2>
 8009922:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	2965      	cmp	r1, #101	; 0x65
 800992a:	f103 33ff 	add.w	r3, r3, #4294967295
 800992e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009932:	6123      	str	r3, [r4, #16]
 8009934:	d00c      	beq.n	8009950 <_scanf_float+0x350>
 8009936:	2945      	cmp	r1, #69	; 0x45
 8009938:	d00a      	beq.n	8009950 <_scanf_float+0x350>
 800993a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800993e:	463a      	mov	r2, r7
 8009940:	4640      	mov	r0, r8
 8009942:	4798      	blx	r3
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800994a:	3b01      	subs	r3, #1
 800994c:	1eb5      	subs	r5, r6, #2
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	463a      	mov	r2, r7
 8009952:	4640      	mov	r0, r8
 8009954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009958:	4798      	blx	r3
 800995a:	462e      	mov	r6, r5
 800995c:	6825      	ldr	r5, [r4, #0]
 800995e:	f015 0510 	ands.w	r5, r5, #16
 8009962:	d155      	bne.n	8009a10 <_scanf_float+0x410>
 8009964:	7035      	strb	r5, [r6, #0]
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800996c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009970:	d11b      	bne.n	80099aa <_scanf_float+0x3aa>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	454b      	cmp	r3, r9
 8009976:	eba3 0209 	sub.w	r2, r3, r9
 800997a:	d123      	bne.n	80099c4 <_scanf_float+0x3c4>
 800997c:	2200      	movs	r2, #0
 800997e:	4659      	mov	r1, fp
 8009980:	4640      	mov	r0, r8
 8009982:	f000 ffd9 	bl	800a938 <_strtod_r>
 8009986:	6822      	ldr	r2, [r4, #0]
 8009988:	9b03      	ldr	r3, [sp, #12]
 800998a:	f012 0f02 	tst.w	r2, #2
 800998e:	4606      	mov	r6, r0
 8009990:	460f      	mov	r7, r1
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	d021      	beq.n	80099da <_scanf_float+0x3da>
 8009996:	1d1a      	adds	r2, r3, #4
 8009998:	9903      	ldr	r1, [sp, #12]
 800999a:	600a      	str	r2, [r1, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	e9c3 6700 	strd	r6, r7, [r3]
 80099a2:	68e3      	ldr	r3, [r4, #12]
 80099a4:	3301      	adds	r3, #1
 80099a6:	60e3      	str	r3, [r4, #12]
 80099a8:	e66d      	b.n	8009686 <_scanf_float+0x86>
 80099aa:	9b04      	ldr	r3, [sp, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0e5      	beq.n	800997c <_scanf_float+0x37c>
 80099b0:	9905      	ldr	r1, [sp, #20]
 80099b2:	230a      	movs	r3, #10
 80099b4:	462a      	mov	r2, r5
 80099b6:	4640      	mov	r0, r8
 80099b8:	3101      	adds	r1, #1
 80099ba:	f001 f83f 	bl	800aa3c <_strtol_r>
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	9e05      	ldr	r6, [sp, #20]
 80099c2:	1ac2      	subs	r2, r0, r3
 80099c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80099c8:	429e      	cmp	r6, r3
 80099ca:	bf28      	it	cs
 80099cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80099d0:	4630      	mov	r0, r6
 80099d2:	4910      	ldr	r1, [pc, #64]	; (8009a14 <_scanf_float+0x414>)
 80099d4:	f000 f92e 	bl	8009c34 <siprintf>
 80099d8:	e7d0      	b.n	800997c <_scanf_float+0x37c>
 80099da:	f012 0f04 	tst.w	r2, #4
 80099de:	f103 0204 	add.w	r2, r3, #4
 80099e2:	d1d9      	bne.n	8009998 <_scanf_float+0x398>
 80099e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80099e8:	f8cc 2000 	str.w	r2, [ip]
 80099ec:	f8d3 8000 	ldr.w	r8, [r3]
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	f7f7 f814 	bl	8000a20 <__aeabi_dcmpun>
 80099f8:	b128      	cbz	r0, 8009a06 <_scanf_float+0x406>
 80099fa:	4807      	ldr	r0, [pc, #28]	; (8009a18 <_scanf_float+0x418>)
 80099fc:	f000 f916 	bl	8009c2c <nanf>
 8009a00:	f8c8 0000 	str.w	r0, [r8]
 8009a04:	e7cd      	b.n	80099a2 <_scanf_float+0x3a2>
 8009a06:	4630      	mov	r0, r6
 8009a08:	4639      	mov	r1, r7
 8009a0a:	f7f7 f867 	bl	8000adc <__aeabi_d2f>
 8009a0e:	e7f7      	b.n	8009a00 <_scanf_float+0x400>
 8009a10:	2500      	movs	r5, #0
 8009a12:	e638      	b.n	8009686 <_scanf_float+0x86>
 8009a14:	0800d8b4 	.word	0x0800d8b4
 8009a18:	0800dcc0 	.word	0x0800dcc0

08009a1c <iprintf>:
 8009a1c:	b40f      	push	{r0, r1, r2, r3}
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <iprintf+0x2c>)
 8009a20:	b513      	push	{r0, r1, r4, lr}
 8009a22:	681c      	ldr	r4, [r3, #0]
 8009a24:	b124      	cbz	r4, 8009a30 <iprintf+0x14>
 8009a26:	69a3      	ldr	r3, [r4, #24]
 8009a28:	b913      	cbnz	r3, 8009a30 <iprintf+0x14>
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7ff f818 	bl	8008a60 <__sinit>
 8009a30:	ab05      	add	r3, sp, #20
 8009a32:	4620      	mov	r0, r4
 8009a34:	9a04      	ldr	r2, [sp, #16]
 8009a36:	68a1      	ldr	r1, [r4, #8]
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	f003 fad3 	bl	800cfe4 <_vfiprintf_r>
 8009a3e:	b002      	add	sp, #8
 8009a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a44:	b004      	add	sp, #16
 8009a46:	4770      	bx	lr
 8009a48:	20000060 	.word	0x20000060

08009a4c <_puts_r>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	460e      	mov	r6, r1
 8009a50:	4605      	mov	r5, r0
 8009a52:	b118      	cbz	r0, 8009a5c <_puts_r+0x10>
 8009a54:	6983      	ldr	r3, [r0, #24]
 8009a56:	b90b      	cbnz	r3, 8009a5c <_puts_r+0x10>
 8009a58:	f7ff f802 	bl	8008a60 <__sinit>
 8009a5c:	69ab      	ldr	r3, [r5, #24]
 8009a5e:	68ac      	ldr	r4, [r5, #8]
 8009a60:	b913      	cbnz	r3, 8009a68 <_puts_r+0x1c>
 8009a62:	4628      	mov	r0, r5
 8009a64:	f7fe fffc 	bl	8008a60 <__sinit>
 8009a68:	4b2c      	ldr	r3, [pc, #176]	; (8009b1c <_puts_r+0xd0>)
 8009a6a:	429c      	cmp	r4, r3
 8009a6c:	d120      	bne.n	8009ab0 <_puts_r+0x64>
 8009a6e:	686c      	ldr	r4, [r5, #4]
 8009a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a72:	07db      	lsls	r3, r3, #31
 8009a74:	d405      	bmi.n	8009a82 <_puts_r+0x36>
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	0598      	lsls	r0, r3, #22
 8009a7a:	d402      	bmi.n	8009a82 <_puts_r+0x36>
 8009a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a7e:	f7ff f8b2 	bl	8008be6 <__retarget_lock_acquire_recursive>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	0719      	lsls	r1, r3, #28
 8009a86:	d51d      	bpl.n	8009ac4 <_puts_r+0x78>
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	b1db      	cbz	r3, 8009ac4 <_puts_r+0x78>
 8009a8c:	3e01      	subs	r6, #1
 8009a8e:	68a3      	ldr	r3, [r4, #8]
 8009a90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a94:	3b01      	subs	r3, #1
 8009a96:	60a3      	str	r3, [r4, #8]
 8009a98:	bb39      	cbnz	r1, 8009aea <_puts_r+0x9e>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	da38      	bge.n	8009b10 <_puts_r+0xc4>
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	210a      	movs	r1, #10
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	f000 ffd6 	bl	800aa54 <__swbuf_r>
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d011      	beq.n	8009ad0 <_puts_r+0x84>
 8009aac:	250a      	movs	r5, #10
 8009aae:	e011      	b.n	8009ad4 <_puts_r+0x88>
 8009ab0:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <_puts_r+0xd4>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d101      	bne.n	8009aba <_puts_r+0x6e>
 8009ab6:	68ac      	ldr	r4, [r5, #8]
 8009ab8:	e7da      	b.n	8009a70 <_puts_r+0x24>
 8009aba:	4b1a      	ldr	r3, [pc, #104]	; (8009b24 <_puts_r+0xd8>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	bf08      	it	eq
 8009ac0:	68ec      	ldreq	r4, [r5, #12]
 8009ac2:	e7d5      	b.n	8009a70 <_puts_r+0x24>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f001 f828 	bl	800ab1c <__swsetup_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0dd      	beq.n	8009a8c <_puts_r+0x40>
 8009ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8009ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad6:	07da      	lsls	r2, r3, #31
 8009ad8:	d405      	bmi.n	8009ae6 <_puts_r+0x9a>
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	059b      	lsls	r3, r3, #22
 8009ade:	d402      	bmi.n	8009ae6 <_puts_r+0x9a>
 8009ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ae2:	f7ff f881 	bl	8008be8 <__retarget_lock_release_recursive>
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	bd70      	pop	{r4, r5, r6, pc}
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	da04      	bge.n	8009af8 <_puts_r+0xac>
 8009aee:	69a2      	ldr	r2, [r4, #24]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	dc06      	bgt.n	8009b02 <_puts_r+0xb6>
 8009af4:	290a      	cmp	r1, #10
 8009af6:	d004      	beq.n	8009b02 <_puts_r+0xb6>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	6022      	str	r2, [r4, #0]
 8009afe:	7019      	strb	r1, [r3, #0]
 8009b00:	e7c5      	b.n	8009a8e <_puts_r+0x42>
 8009b02:	4622      	mov	r2, r4
 8009b04:	4628      	mov	r0, r5
 8009b06:	f000 ffa5 	bl	800aa54 <__swbuf_r>
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	d1bf      	bne.n	8009a8e <_puts_r+0x42>
 8009b0e:	e7df      	b.n	8009ad0 <_puts_r+0x84>
 8009b10:	250a      	movs	r5, #10
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	6022      	str	r2, [r4, #0]
 8009b18:	701d      	strb	r5, [r3, #0]
 8009b1a:	e7db      	b.n	8009ad4 <_puts_r+0x88>
 8009b1c:	0800d83c 	.word	0x0800d83c
 8009b20:	0800d85c 	.word	0x0800d85c
 8009b24:	0800d81c 	.word	0x0800d81c

08009b28 <puts>:
 8009b28:	4b02      	ldr	r3, [pc, #8]	; (8009b34 <puts+0xc>)
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	6818      	ldr	r0, [r3, #0]
 8009b2e:	f7ff bf8d 	b.w	8009a4c <_puts_r>
 8009b32:	bf00      	nop
 8009b34:	20000060 	.word	0x20000060

08009b38 <cleanup_glue>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	6809      	ldr	r1, [r1, #0]
 8009b3e:	4605      	mov	r5, r0
 8009b40:	b109      	cbz	r1, 8009b46 <cleanup_glue+0xe>
 8009b42:	f7ff fff9 	bl	8009b38 <cleanup_glue>
 8009b46:	4621      	mov	r1, r4
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b4e:	f003 b87d 	b.w	800cc4c <_free_r>
	...

08009b54 <_reclaim_reent>:
 8009b54:	4b2c      	ldr	r3, [pc, #176]	; (8009c08 <_reclaim_reent+0xb4>)
 8009b56:	b570      	push	{r4, r5, r6, lr}
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	4283      	cmp	r3, r0
 8009b5e:	d051      	beq.n	8009c04 <_reclaim_reent+0xb0>
 8009b60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b62:	b143      	cbz	r3, 8009b76 <_reclaim_reent+0x22>
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d14a      	bne.n	8009c00 <_reclaim_reent+0xac>
 8009b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6c:	6819      	ldr	r1, [r3, #0]
 8009b6e:	b111      	cbz	r1, 8009b76 <_reclaim_reent+0x22>
 8009b70:	4620      	mov	r0, r4
 8009b72:	f003 f86b 	bl	800cc4c <_free_r>
 8009b76:	6961      	ldr	r1, [r4, #20]
 8009b78:	b111      	cbz	r1, 8009b80 <_reclaim_reent+0x2c>
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f003 f866 	bl	800cc4c <_free_r>
 8009b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b82:	b111      	cbz	r1, 8009b8a <_reclaim_reent+0x36>
 8009b84:	4620      	mov	r0, r4
 8009b86:	f003 f861 	bl	800cc4c <_free_r>
 8009b8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b8c:	b111      	cbz	r1, 8009b94 <_reclaim_reent+0x40>
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f003 f85c 	bl	800cc4c <_free_r>
 8009b94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009b96:	b111      	cbz	r1, 8009b9e <_reclaim_reent+0x4a>
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f003 f857 	bl	800cc4c <_free_r>
 8009b9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009ba0:	b111      	cbz	r1, 8009ba8 <_reclaim_reent+0x54>
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f003 f852 	bl	800cc4c <_free_r>
 8009ba8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009baa:	b111      	cbz	r1, 8009bb2 <_reclaim_reent+0x5e>
 8009bac:	4620      	mov	r0, r4
 8009bae:	f003 f84d 	bl	800cc4c <_free_r>
 8009bb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bb4:	b111      	cbz	r1, 8009bbc <_reclaim_reent+0x68>
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f003 f848 	bl	800cc4c <_free_r>
 8009bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bbe:	b111      	cbz	r1, 8009bc6 <_reclaim_reent+0x72>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f003 f843 	bl	800cc4c <_free_r>
 8009bc6:	69a3      	ldr	r3, [r4, #24]
 8009bc8:	b1e3      	cbz	r3, 8009c04 <_reclaim_reent+0xb0>
 8009bca:	4620      	mov	r0, r4
 8009bcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009bce:	4798      	blx	r3
 8009bd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bd2:	b1b9      	cbz	r1, 8009c04 <_reclaim_reent+0xb0>
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bda:	f7ff bfad 	b.w	8009b38 <cleanup_glue>
 8009bde:	5949      	ldr	r1, [r1, r5]
 8009be0:	b941      	cbnz	r1, 8009bf4 <_reclaim_reent+0xa0>
 8009be2:	3504      	adds	r5, #4
 8009be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be6:	2d80      	cmp	r5, #128	; 0x80
 8009be8:	68d9      	ldr	r1, [r3, #12]
 8009bea:	d1f8      	bne.n	8009bde <_reclaim_reent+0x8a>
 8009bec:	4620      	mov	r0, r4
 8009bee:	f003 f82d 	bl	800cc4c <_free_r>
 8009bf2:	e7ba      	b.n	8009b6a <_reclaim_reent+0x16>
 8009bf4:	680e      	ldr	r6, [r1, #0]
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f003 f828 	bl	800cc4c <_free_r>
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	e7ef      	b.n	8009be0 <_reclaim_reent+0x8c>
 8009c00:	2500      	movs	r5, #0
 8009c02:	e7ef      	b.n	8009be4 <_reclaim_reent+0x90>
 8009c04:	bd70      	pop	{r4, r5, r6, pc}
 8009c06:	bf00      	nop
 8009c08:	20000060 	.word	0x20000060

08009c0c <_sbrk_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	2300      	movs	r3, #0
 8009c10:	4d05      	ldr	r5, [pc, #20]	; (8009c28 <_sbrk_r+0x1c>)
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f8 ff8e 	bl	8002b38 <_sbrk>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_sbrk_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_sbrk_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20002590 	.word	0x20002590

08009c2c <nanf>:
 8009c2c:	4800      	ldr	r0, [pc, #0]	; (8009c30 <nanf+0x4>)
 8009c2e:	4770      	bx	lr
 8009c30:	7fc00000 	.word	0x7fc00000

08009c34 <siprintf>:
 8009c34:	b40e      	push	{r1, r2, r3}
 8009c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c3a:	b500      	push	{lr}
 8009c3c:	b09c      	sub	sp, #112	; 0x70
 8009c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c40:	9002      	str	r0, [sp, #8]
 8009c42:	9006      	str	r0, [sp, #24]
 8009c44:	9107      	str	r1, [sp, #28]
 8009c46:	9104      	str	r1, [sp, #16]
 8009c48:	4808      	ldr	r0, [pc, #32]	; (8009c6c <siprintf+0x38>)
 8009c4a:	4909      	ldr	r1, [pc, #36]	; (8009c70 <siprintf+0x3c>)
 8009c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c50:	9105      	str	r1, [sp, #20]
 8009c52:	6800      	ldr	r0, [r0, #0]
 8009c54:	a902      	add	r1, sp, #8
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	f003 f89c 	bl	800cd94 <_svfiprintf_r>
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	9b02      	ldr	r3, [sp, #8]
 8009c60:	701a      	strb	r2, [r3, #0]
 8009c62:	b01c      	add	sp, #112	; 0x70
 8009c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c68:	b003      	add	sp, #12
 8009c6a:	4770      	bx	lr
 8009c6c:	20000060 	.word	0x20000060
 8009c70:	ffff0208 	.word	0xffff0208

08009c74 <__sread>:
 8009c74:	b510      	push	{r4, lr}
 8009c76:	460c      	mov	r4, r1
 8009c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7c:	f003 fae2 	bl	800d244 <_read_r>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	bfab      	itete	ge
 8009c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c86:	89a3      	ldrhlt	r3, [r4, #12]
 8009c88:	181b      	addge	r3, r3, r0
 8009c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c8e:	bfac      	ite	ge
 8009c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c92:	81a3      	strhlt	r3, [r4, #12]
 8009c94:	bd10      	pop	{r4, pc}

08009c96 <__swrite>:
 8009c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9a:	461f      	mov	r7, r3
 8009c9c:	898b      	ldrh	r3, [r1, #12]
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	05db      	lsls	r3, r3, #23
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	4616      	mov	r6, r2
 8009ca6:	d505      	bpl.n	8009cb4 <__swrite+0x1e>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	2200      	movs	r2, #0
 8009cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb0:	f002 fa54 	bl	800c15c <_lseek_r>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	463b      	mov	r3, r7
 8009cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cca:	f000 bf15 	b.w	800aaf8 <_write_r>

08009cce <__sseek>:
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd6:	f002 fa41 	bl	800c15c <_lseek_r>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	bf15      	itete	ne
 8009ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cea:	81a3      	strheq	r3, [r4, #12]
 8009cec:	bf18      	it	ne
 8009cee:	81a3      	strhne	r3, [r4, #12]
 8009cf0:	bd10      	pop	{r4, pc}

08009cf2 <__sclose>:
 8009cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf6:	f000 bf7f 	b.w	800abf8 <_close_r>

08009cfa <strncpy>:
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	3901      	subs	r1, #1
 8009d00:	b132      	cbz	r2, 8009d10 <strncpy+0x16>
 8009d02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009d06:	3a01      	subs	r2, #1
 8009d08:	f803 4b01 	strb.w	r4, [r3], #1
 8009d0c:	2c00      	cmp	r4, #0
 8009d0e:	d1f7      	bne.n	8009d00 <strncpy+0x6>
 8009d10:	2100      	movs	r1, #0
 8009d12:	441a      	add	r2, r3
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d100      	bne.n	8009d1a <strncpy+0x20>
 8009d18:	bd10      	pop	{r4, pc}
 8009d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1e:	e7f9      	b.n	8009d14 <strncpy+0x1a>

08009d20 <sulp>:
 8009d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d24:	460f      	mov	r7, r1
 8009d26:	4690      	mov	r8, r2
 8009d28:	f002 fe34 	bl	800c994 <__ulp>
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	460d      	mov	r5, r1
 8009d30:	f1b8 0f00 	cmp.w	r8, #0
 8009d34:	d011      	beq.n	8009d5a <sulp+0x3a>
 8009d36:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dd0b      	ble.n	8009d5a <sulp+0x3a>
 8009d42:	2400      	movs	r4, #0
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d4e:	4622      	mov	r2, r4
 8009d50:	462b      	mov	r3, r5
 8009d52:	f7f6 fbcb 	bl	80004ec <__aeabi_dmul>
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d62:	0000      	movs	r0, r0
 8009d64:	0000      	movs	r0, r0
	...

08009d68 <_strtod_l>:
 8009d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	469b      	mov	fp, r3
 8009d6e:	2300      	movs	r3, #0
 8009d70:	b09f      	sub	sp, #124	; 0x7c
 8009d72:	931a      	str	r3, [sp, #104]	; 0x68
 8009d74:	4b9e      	ldr	r3, [pc, #632]	; (8009ff0 <_strtod_l+0x288>)
 8009d76:	4682      	mov	sl, r0
 8009d78:	681f      	ldr	r7, [r3, #0]
 8009d7a:	460e      	mov	r6, r1
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	9215      	str	r2, [sp, #84]	; 0x54
 8009d80:	f7f6 f9f0 	bl	8000164 <strlen>
 8009d84:	f04f 0800 	mov.w	r8, #0
 8009d88:	4604      	mov	r4, r0
 8009d8a:	f04f 0900 	mov.w	r9, #0
 8009d8e:	9619      	str	r6, [sp, #100]	; 0x64
 8009d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d92:	781a      	ldrb	r2, [r3, #0]
 8009d94:	2a2b      	cmp	r2, #43	; 0x2b
 8009d96:	d04c      	beq.n	8009e32 <_strtod_l+0xca>
 8009d98:	d83a      	bhi.n	8009e10 <_strtod_l+0xa8>
 8009d9a:	2a0d      	cmp	r2, #13
 8009d9c:	d833      	bhi.n	8009e06 <_strtod_l+0x9e>
 8009d9e:	2a08      	cmp	r2, #8
 8009da0:	d833      	bhi.n	8009e0a <_strtod_l+0xa2>
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d03d      	beq.n	8009e22 <_strtod_l+0xba>
 8009da6:	2300      	movs	r3, #0
 8009da8:	930a      	str	r3, [sp, #40]	; 0x28
 8009daa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009dac:	782b      	ldrb	r3, [r5, #0]
 8009dae:	2b30      	cmp	r3, #48	; 0x30
 8009db0:	f040 80aa 	bne.w	8009f08 <_strtod_l+0x1a0>
 8009db4:	786b      	ldrb	r3, [r5, #1]
 8009db6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009dba:	2b58      	cmp	r3, #88	; 0x58
 8009dbc:	d166      	bne.n	8009e8c <_strtod_l+0x124>
 8009dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	9301      	str	r3, [sp, #4]
 8009dc4:	ab1a      	add	r3, sp, #104	; 0x68
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	4a8a      	ldr	r2, [pc, #552]	; (8009ff4 <_strtod_l+0x28c>)
 8009dca:	f8cd b008 	str.w	fp, [sp, #8]
 8009dce:	ab1b      	add	r3, sp, #108	; 0x6c
 8009dd0:	a919      	add	r1, sp, #100	; 0x64
 8009dd2:	f001 fec1 	bl	800bb58 <__gethex>
 8009dd6:	f010 0607 	ands.w	r6, r0, #7
 8009dda:	4604      	mov	r4, r0
 8009ddc:	d005      	beq.n	8009dea <_strtod_l+0x82>
 8009dde:	2e06      	cmp	r6, #6
 8009de0:	d129      	bne.n	8009e36 <_strtod_l+0xce>
 8009de2:	2300      	movs	r3, #0
 8009de4:	3501      	adds	r5, #1
 8009de6:	9519      	str	r5, [sp, #100]	; 0x64
 8009de8:	930a      	str	r3, [sp, #40]	; 0x28
 8009dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f040 858a 	bne.w	800a906 <_strtod_l+0xb9e>
 8009df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df4:	b1d3      	cbz	r3, 8009e2c <_strtod_l+0xc4>
 8009df6:	4642      	mov	r2, r8
 8009df8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4619      	mov	r1, r3
 8009e00:	b01f      	add	sp, #124	; 0x7c
 8009e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e06:	2a20      	cmp	r2, #32
 8009e08:	d1cd      	bne.n	8009da6 <_strtod_l+0x3e>
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	9319      	str	r3, [sp, #100]	; 0x64
 8009e0e:	e7bf      	b.n	8009d90 <_strtod_l+0x28>
 8009e10:	2a2d      	cmp	r2, #45	; 0x2d
 8009e12:	d1c8      	bne.n	8009da6 <_strtod_l+0x3e>
 8009e14:	2201      	movs	r2, #1
 8009e16:	920a      	str	r2, [sp, #40]	; 0x28
 8009e18:	1c5a      	adds	r2, r3, #1
 8009e1a:	9219      	str	r2, [sp, #100]	; 0x64
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1c3      	bne.n	8009daa <_strtod_l+0x42>
 8009e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e24:	9619      	str	r6, [sp, #100]	; 0x64
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f040 856b 	bne.w	800a902 <_strtod_l+0xb9a>
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	464b      	mov	r3, r9
 8009e30:	e7e4      	b.n	8009dfc <_strtod_l+0x94>
 8009e32:	2200      	movs	r2, #0
 8009e34:	e7ef      	b.n	8009e16 <_strtod_l+0xae>
 8009e36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e38:	b13a      	cbz	r2, 8009e4a <_strtod_l+0xe2>
 8009e3a:	2135      	movs	r1, #53	; 0x35
 8009e3c:	a81c      	add	r0, sp, #112	; 0x70
 8009e3e:	f002 fead 	bl	800cb9c <__copybits>
 8009e42:	4650      	mov	r0, sl
 8009e44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e46:	f002 fa75 	bl	800c334 <_Bfree>
 8009e4a:	3e01      	subs	r6, #1
 8009e4c:	2e04      	cmp	r6, #4
 8009e4e:	d806      	bhi.n	8009e5e <_strtod_l+0xf6>
 8009e50:	e8df f006 	tbb	[pc, r6]
 8009e54:	1714030a 	.word	0x1714030a
 8009e58:	0a          	.byte	0x0a
 8009e59:	00          	.byte	0x00
 8009e5a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009e5e:	0721      	lsls	r1, r4, #28
 8009e60:	d5c3      	bpl.n	8009dea <_strtod_l+0x82>
 8009e62:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009e66:	e7c0      	b.n	8009dea <_strtod_l+0x82>
 8009e68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009e6a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009e6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009e7a:	e7f0      	b.n	8009e5e <_strtod_l+0xf6>
 8009e7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ff8 <_strtod_l+0x290>
 8009e80:	e7ed      	b.n	8009e5e <_strtod_l+0xf6>
 8009e82:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009e86:	f04f 38ff 	mov.w	r8, #4294967295
 8009e8a:	e7e8      	b.n	8009e5e <_strtod_l+0xf6>
 8009e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	9219      	str	r2, [sp, #100]	; 0x64
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	2b30      	cmp	r3, #48	; 0x30
 8009e96:	d0f9      	beq.n	8009e8c <_strtod_l+0x124>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0a6      	beq.n	8009dea <_strtod_l+0x82>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	9307      	str	r3, [sp, #28]
 8009ea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ea2:	220a      	movs	r2, #10
 8009ea4:	9308      	str	r3, [sp, #32]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	469b      	mov	fp, r3
 8009eaa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009eae:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009eb0:	7805      	ldrb	r5, [r0, #0]
 8009eb2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009eb6:	b2d9      	uxtb	r1, r3
 8009eb8:	2909      	cmp	r1, #9
 8009eba:	d927      	bls.n	8009f0c <_strtod_l+0x1a4>
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	f003 f9d8 	bl	800d274 <strncmp>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d033      	beq.n	8009f30 <_strtod_l+0x1c8>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	462a      	mov	r2, r5
 8009ecc:	465c      	mov	r4, fp
 8009ece:	4603      	mov	r3, r0
 8009ed0:	9004      	str	r0, [sp, #16]
 8009ed2:	2a65      	cmp	r2, #101	; 0x65
 8009ed4:	d001      	beq.n	8009eda <_strtod_l+0x172>
 8009ed6:	2a45      	cmp	r2, #69	; 0x45
 8009ed8:	d114      	bne.n	8009f04 <_strtod_l+0x19c>
 8009eda:	b91c      	cbnz	r4, 8009ee4 <_strtod_l+0x17c>
 8009edc:	9a07      	ldr	r2, [sp, #28]
 8009ede:	4302      	orrs	r2, r0
 8009ee0:	d09f      	beq.n	8009e22 <_strtod_l+0xba>
 8009ee2:	2400      	movs	r4, #0
 8009ee4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009ee6:	1c72      	adds	r2, r6, #1
 8009ee8:	9219      	str	r2, [sp, #100]	; 0x64
 8009eea:	7872      	ldrb	r2, [r6, #1]
 8009eec:	2a2b      	cmp	r2, #43	; 0x2b
 8009eee:	d079      	beq.n	8009fe4 <_strtod_l+0x27c>
 8009ef0:	2a2d      	cmp	r2, #45	; 0x2d
 8009ef2:	f000 8083 	beq.w	8009ffc <_strtod_l+0x294>
 8009ef6:	2700      	movs	r7, #0
 8009ef8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009efc:	2909      	cmp	r1, #9
 8009efe:	f240 8083 	bls.w	800a008 <_strtod_l+0x2a0>
 8009f02:	9619      	str	r6, [sp, #100]	; 0x64
 8009f04:	2500      	movs	r5, #0
 8009f06:	e09f      	b.n	800a048 <_strtod_l+0x2e0>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e7c8      	b.n	8009e9e <_strtod_l+0x136>
 8009f0c:	f1bb 0f08 	cmp.w	fp, #8
 8009f10:	bfd5      	itete	le
 8009f12:	9906      	ldrle	r1, [sp, #24]
 8009f14:	9905      	ldrgt	r1, [sp, #20]
 8009f16:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f1a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f1e:	f100 0001 	add.w	r0, r0, #1
 8009f22:	bfd4      	ite	le
 8009f24:	9306      	strle	r3, [sp, #24]
 8009f26:	9305      	strgt	r3, [sp, #20]
 8009f28:	f10b 0b01 	add.w	fp, fp, #1
 8009f2c:	9019      	str	r0, [sp, #100]	; 0x64
 8009f2e:	e7be      	b.n	8009eae <_strtod_l+0x146>
 8009f30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f32:	191a      	adds	r2, r3, r4
 8009f34:	9219      	str	r2, [sp, #100]	; 0x64
 8009f36:	5d1a      	ldrb	r2, [r3, r4]
 8009f38:	f1bb 0f00 	cmp.w	fp, #0
 8009f3c:	d036      	beq.n	8009fac <_strtod_l+0x244>
 8009f3e:	465c      	mov	r4, fp
 8009f40:	9004      	str	r0, [sp, #16]
 8009f42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009f46:	2b09      	cmp	r3, #9
 8009f48:	d912      	bls.n	8009f70 <_strtod_l+0x208>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e7c1      	b.n	8009ed2 <_strtod_l+0x16a>
 8009f4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f50:	3001      	adds	r0, #1
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	9219      	str	r2, [sp, #100]	; 0x64
 8009f56:	785a      	ldrb	r2, [r3, #1]
 8009f58:	2a30      	cmp	r2, #48	; 0x30
 8009f5a:	d0f8      	beq.n	8009f4e <_strtod_l+0x1e6>
 8009f5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	f200 84d5 	bhi.w	800a910 <_strtod_l+0xba8>
 8009f66:	9004      	str	r0, [sp, #16]
 8009f68:	2000      	movs	r0, #0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f6e:	9308      	str	r3, [sp, #32]
 8009f70:	3a30      	subs	r2, #48	; 0x30
 8009f72:	f100 0301 	add.w	r3, r0, #1
 8009f76:	d013      	beq.n	8009fa0 <_strtod_l+0x238>
 8009f78:	9904      	ldr	r1, [sp, #16]
 8009f7a:	1905      	adds	r5, r0, r4
 8009f7c:	4419      	add	r1, r3
 8009f7e:	9104      	str	r1, [sp, #16]
 8009f80:	4623      	mov	r3, r4
 8009f82:	210a      	movs	r1, #10
 8009f84:	42ab      	cmp	r3, r5
 8009f86:	d113      	bne.n	8009fb0 <_strtod_l+0x248>
 8009f88:	1823      	adds	r3, r4, r0
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	f104 0401 	add.w	r4, r4, #1
 8009f90:	4404      	add	r4, r0
 8009f92:	dc1b      	bgt.n	8009fcc <_strtod_l+0x264>
 8009f94:	230a      	movs	r3, #10
 8009f96:	9906      	ldr	r1, [sp, #24]
 8009f98:	fb03 2301 	mla	r3, r3, r1, r2
 8009f9c:	9306      	str	r3, [sp, #24]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	1c51      	adds	r1, r2, #1
 8009fa6:	9119      	str	r1, [sp, #100]	; 0x64
 8009fa8:	7852      	ldrb	r2, [r2, #1]
 8009faa:	e7ca      	b.n	8009f42 <_strtod_l+0x1da>
 8009fac:	4658      	mov	r0, fp
 8009fae:	e7d3      	b.n	8009f58 <_strtod_l+0x1f0>
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	dc04      	bgt.n	8009fbe <_strtod_l+0x256>
 8009fb4:	9f06      	ldr	r7, [sp, #24]
 8009fb6:	434f      	muls	r7, r1
 8009fb8:	9706      	str	r7, [sp, #24]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	e7e2      	b.n	8009f84 <_strtod_l+0x21c>
 8009fbe:	1c5f      	adds	r7, r3, #1
 8009fc0:	2f10      	cmp	r7, #16
 8009fc2:	bfde      	ittt	le
 8009fc4:	9f05      	ldrle	r7, [sp, #20]
 8009fc6:	434f      	mulle	r7, r1
 8009fc8:	9705      	strle	r7, [sp, #20]
 8009fca:	e7f6      	b.n	8009fba <_strtod_l+0x252>
 8009fcc:	2c10      	cmp	r4, #16
 8009fce:	bfdf      	itttt	le
 8009fd0:	230a      	movle	r3, #10
 8009fd2:	9905      	ldrle	r1, [sp, #20]
 8009fd4:	fb03 2301 	mlale	r3, r3, r1, r2
 8009fd8:	9305      	strle	r3, [sp, #20]
 8009fda:	e7e0      	b.n	8009f9e <_strtod_l+0x236>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e77b      	b.n	8009edc <_strtod_l+0x174>
 8009fe4:	2700      	movs	r7, #0
 8009fe6:	1cb2      	adds	r2, r6, #2
 8009fe8:	9219      	str	r2, [sp, #100]	; 0x64
 8009fea:	78b2      	ldrb	r2, [r6, #2]
 8009fec:	e784      	b.n	8009ef8 <_strtod_l+0x190>
 8009fee:	bf00      	nop
 8009ff0:	0800db08 	.word	0x0800db08
 8009ff4:	0800d8bc 	.word	0x0800d8bc
 8009ff8:	7ff00000 	.word	0x7ff00000
 8009ffc:	2701      	movs	r7, #1
 8009ffe:	e7f2      	b.n	8009fe6 <_strtod_l+0x27e>
 800a000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a002:	1c51      	adds	r1, r2, #1
 800a004:	9119      	str	r1, [sp, #100]	; 0x64
 800a006:	7852      	ldrb	r2, [r2, #1]
 800a008:	2a30      	cmp	r2, #48	; 0x30
 800a00a:	d0f9      	beq.n	800a000 <_strtod_l+0x298>
 800a00c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a010:	2908      	cmp	r1, #8
 800a012:	f63f af77 	bhi.w	8009f04 <_strtod_l+0x19c>
 800a016:	f04f 0e0a 	mov.w	lr, #10
 800a01a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a01e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a020:	9209      	str	r2, [sp, #36]	; 0x24
 800a022:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a024:	1c51      	adds	r1, r2, #1
 800a026:	9119      	str	r1, [sp, #100]	; 0x64
 800a028:	7852      	ldrb	r2, [r2, #1]
 800a02a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a02e:	2d09      	cmp	r5, #9
 800a030:	d935      	bls.n	800a09e <_strtod_l+0x336>
 800a032:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a034:	1b49      	subs	r1, r1, r5
 800a036:	2908      	cmp	r1, #8
 800a038:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a03c:	dc02      	bgt.n	800a044 <_strtod_l+0x2dc>
 800a03e:	4565      	cmp	r5, ip
 800a040:	bfa8      	it	ge
 800a042:	4665      	movge	r5, ip
 800a044:	b107      	cbz	r7, 800a048 <_strtod_l+0x2e0>
 800a046:	426d      	negs	r5, r5
 800a048:	2c00      	cmp	r4, #0
 800a04a:	d14c      	bne.n	800a0e6 <_strtod_l+0x37e>
 800a04c:	9907      	ldr	r1, [sp, #28]
 800a04e:	4301      	orrs	r1, r0
 800a050:	f47f aecb 	bne.w	8009dea <_strtod_l+0x82>
 800a054:	2b00      	cmp	r3, #0
 800a056:	f47f aee4 	bne.w	8009e22 <_strtod_l+0xba>
 800a05a:	2a69      	cmp	r2, #105	; 0x69
 800a05c:	d026      	beq.n	800a0ac <_strtod_l+0x344>
 800a05e:	dc23      	bgt.n	800a0a8 <_strtod_l+0x340>
 800a060:	2a49      	cmp	r2, #73	; 0x49
 800a062:	d023      	beq.n	800a0ac <_strtod_l+0x344>
 800a064:	2a4e      	cmp	r2, #78	; 0x4e
 800a066:	f47f aedc 	bne.w	8009e22 <_strtod_l+0xba>
 800a06a:	499d      	ldr	r1, [pc, #628]	; (800a2e0 <_strtod_l+0x578>)
 800a06c:	a819      	add	r0, sp, #100	; 0x64
 800a06e:	f001 ffc1 	bl	800bff4 <__match>
 800a072:	2800      	cmp	r0, #0
 800a074:	f43f aed5 	beq.w	8009e22 <_strtod_l+0xba>
 800a078:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	2b28      	cmp	r3, #40	; 0x28
 800a07e:	d12c      	bne.n	800a0da <_strtod_l+0x372>
 800a080:	4998      	ldr	r1, [pc, #608]	; (800a2e4 <_strtod_l+0x57c>)
 800a082:	aa1c      	add	r2, sp, #112	; 0x70
 800a084:	a819      	add	r0, sp, #100	; 0x64
 800a086:	f001 ffc9 	bl	800c01c <__hexnan>
 800a08a:	2805      	cmp	r0, #5
 800a08c:	d125      	bne.n	800a0da <_strtod_l+0x372>
 800a08e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a090:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a094:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a098:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a09c:	e6a5      	b.n	8009dea <_strtod_l+0x82>
 800a09e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a0a2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a0a6:	e7bc      	b.n	800a022 <_strtod_l+0x2ba>
 800a0a8:	2a6e      	cmp	r2, #110	; 0x6e
 800a0aa:	e7dc      	b.n	800a066 <_strtod_l+0x2fe>
 800a0ac:	498e      	ldr	r1, [pc, #568]	; (800a2e8 <_strtod_l+0x580>)
 800a0ae:	a819      	add	r0, sp, #100	; 0x64
 800a0b0:	f001 ffa0 	bl	800bff4 <__match>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f43f aeb4 	beq.w	8009e22 <_strtod_l+0xba>
 800a0ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0bc:	498b      	ldr	r1, [pc, #556]	; (800a2ec <_strtod_l+0x584>)
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	a819      	add	r0, sp, #100	; 0x64
 800a0c2:	9319      	str	r3, [sp, #100]	; 0x64
 800a0c4:	f001 ff96 	bl	800bff4 <__match>
 800a0c8:	b910      	cbnz	r0, 800a0d0 <_strtod_l+0x368>
 800a0ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	9319      	str	r3, [sp, #100]	; 0x64
 800a0d0:	f04f 0800 	mov.w	r8, #0
 800a0d4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a2f0 <_strtod_l+0x588>
 800a0d8:	e687      	b.n	8009dea <_strtod_l+0x82>
 800a0da:	4886      	ldr	r0, [pc, #536]	; (800a2f4 <_strtod_l+0x58c>)
 800a0dc:	f003 f8c4 	bl	800d268 <nan>
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4689      	mov	r9, r1
 800a0e4:	e681      	b.n	8009dea <_strtod_l+0x82>
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	f1bb 0f00 	cmp.w	fp, #0
 800a0ec:	bf08      	it	eq
 800a0ee:	46a3      	moveq	fp, r4
 800a0f0:	1aeb      	subs	r3, r5, r3
 800a0f2:	2c10      	cmp	r4, #16
 800a0f4:	9806      	ldr	r0, [sp, #24]
 800a0f6:	4626      	mov	r6, r4
 800a0f8:	9307      	str	r3, [sp, #28]
 800a0fa:	bfa8      	it	ge
 800a0fc:	2610      	movge	r6, #16
 800a0fe:	f7f6 f97b 	bl	80003f8 <__aeabi_ui2d>
 800a102:	2c09      	cmp	r4, #9
 800a104:	4680      	mov	r8, r0
 800a106:	4689      	mov	r9, r1
 800a108:	dd13      	ble.n	800a132 <_strtod_l+0x3ca>
 800a10a:	4b7b      	ldr	r3, [pc, #492]	; (800a2f8 <_strtod_l+0x590>)
 800a10c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a110:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a114:	f7f6 f9ea 	bl	80004ec <__aeabi_dmul>
 800a118:	4680      	mov	r8, r0
 800a11a:	9805      	ldr	r0, [sp, #20]
 800a11c:	4689      	mov	r9, r1
 800a11e:	f7f6 f96b 	bl	80003f8 <__aeabi_ui2d>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 f829 	bl	8000180 <__adddf3>
 800a12e:	4680      	mov	r8, r0
 800a130:	4689      	mov	r9, r1
 800a132:	2c0f      	cmp	r4, #15
 800a134:	dc36      	bgt.n	800a1a4 <_strtod_l+0x43c>
 800a136:	9b07      	ldr	r3, [sp, #28]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f43f ae56 	beq.w	8009dea <_strtod_l+0x82>
 800a13e:	dd22      	ble.n	800a186 <_strtod_l+0x41e>
 800a140:	2b16      	cmp	r3, #22
 800a142:	dc09      	bgt.n	800a158 <_strtod_l+0x3f0>
 800a144:	496c      	ldr	r1, [pc, #432]	; (800a2f8 <_strtod_l+0x590>)
 800a146:	4642      	mov	r2, r8
 800a148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a14c:	464b      	mov	r3, r9
 800a14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a152:	f7f6 f9cb 	bl	80004ec <__aeabi_dmul>
 800a156:	e7c3      	b.n	800a0e0 <_strtod_l+0x378>
 800a158:	9a07      	ldr	r2, [sp, #28]
 800a15a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a15e:	4293      	cmp	r3, r2
 800a160:	db20      	blt.n	800a1a4 <_strtod_l+0x43c>
 800a162:	4d65      	ldr	r5, [pc, #404]	; (800a2f8 <_strtod_l+0x590>)
 800a164:	f1c4 040f 	rsb	r4, r4, #15
 800a168:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a16c:	4642      	mov	r2, r8
 800a16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a172:	464b      	mov	r3, r9
 800a174:	f7f6 f9ba 	bl	80004ec <__aeabi_dmul>
 800a178:	9b07      	ldr	r3, [sp, #28]
 800a17a:	1b1c      	subs	r4, r3, r4
 800a17c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a180:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a184:	e7e5      	b.n	800a152 <_strtod_l+0x3ea>
 800a186:	9b07      	ldr	r3, [sp, #28]
 800a188:	3316      	adds	r3, #22
 800a18a:	db0b      	blt.n	800a1a4 <_strtod_l+0x43c>
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	4640      	mov	r0, r8
 800a190:	1b5d      	subs	r5, r3, r5
 800a192:	4b59      	ldr	r3, [pc, #356]	; (800a2f8 <_strtod_l+0x590>)
 800a194:	4649      	mov	r1, r9
 800a196:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a19a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a19e:	f7f6 facf 	bl	8000740 <__aeabi_ddiv>
 800a1a2:	e79d      	b.n	800a0e0 <_strtod_l+0x378>
 800a1a4:	9b07      	ldr	r3, [sp, #28]
 800a1a6:	1ba6      	subs	r6, r4, r6
 800a1a8:	441e      	add	r6, r3
 800a1aa:	2e00      	cmp	r6, #0
 800a1ac:	dd74      	ble.n	800a298 <_strtod_l+0x530>
 800a1ae:	f016 030f 	ands.w	r3, r6, #15
 800a1b2:	d00a      	beq.n	800a1ca <_strtod_l+0x462>
 800a1b4:	4950      	ldr	r1, [pc, #320]	; (800a2f8 <_strtod_l+0x590>)
 800a1b6:	4642      	mov	r2, r8
 800a1b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	f7f6 f993 	bl	80004ec <__aeabi_dmul>
 800a1c6:	4680      	mov	r8, r0
 800a1c8:	4689      	mov	r9, r1
 800a1ca:	f036 060f 	bics.w	r6, r6, #15
 800a1ce:	d052      	beq.n	800a276 <_strtod_l+0x50e>
 800a1d0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a1d4:	dd27      	ble.n	800a226 <_strtod_l+0x4be>
 800a1d6:	f04f 0b00 	mov.w	fp, #0
 800a1da:	f8cd b010 	str.w	fp, [sp, #16]
 800a1de:	f8cd b020 	str.w	fp, [sp, #32]
 800a1e2:	f8cd b018 	str.w	fp, [sp, #24]
 800a1e6:	2322      	movs	r3, #34	; 0x22
 800a1e8:	f04f 0800 	mov.w	r8, #0
 800a1ec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a2f0 <_strtod_l+0x588>
 800a1f0:	f8ca 3000 	str.w	r3, [sl]
 800a1f4:	9b08      	ldr	r3, [sp, #32]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f43f adf7 	beq.w	8009dea <_strtod_l+0x82>
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a200:	f002 f898 	bl	800c334 <_Bfree>
 800a204:	4650      	mov	r0, sl
 800a206:	9906      	ldr	r1, [sp, #24]
 800a208:	f002 f894 	bl	800c334 <_Bfree>
 800a20c:	4650      	mov	r0, sl
 800a20e:	9904      	ldr	r1, [sp, #16]
 800a210:	f002 f890 	bl	800c334 <_Bfree>
 800a214:	4650      	mov	r0, sl
 800a216:	9908      	ldr	r1, [sp, #32]
 800a218:	f002 f88c 	bl	800c334 <_Bfree>
 800a21c:	4659      	mov	r1, fp
 800a21e:	4650      	mov	r0, sl
 800a220:	f002 f888 	bl	800c334 <_Bfree>
 800a224:	e5e1      	b.n	8009dea <_strtod_l+0x82>
 800a226:	4b35      	ldr	r3, [pc, #212]	; (800a2fc <_strtod_l+0x594>)
 800a228:	4640      	mov	r0, r8
 800a22a:	9305      	str	r3, [sp, #20]
 800a22c:	2300      	movs	r3, #0
 800a22e:	4649      	mov	r1, r9
 800a230:	461f      	mov	r7, r3
 800a232:	1136      	asrs	r6, r6, #4
 800a234:	2e01      	cmp	r6, #1
 800a236:	dc21      	bgt.n	800a27c <_strtod_l+0x514>
 800a238:	b10b      	cbz	r3, 800a23e <_strtod_l+0x4d6>
 800a23a:	4680      	mov	r8, r0
 800a23c:	4689      	mov	r9, r1
 800a23e:	4b2f      	ldr	r3, [pc, #188]	; (800a2fc <_strtod_l+0x594>)
 800a240:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a244:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a248:	4642      	mov	r2, r8
 800a24a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a24e:	464b      	mov	r3, r9
 800a250:	f7f6 f94c 	bl	80004ec <__aeabi_dmul>
 800a254:	4b26      	ldr	r3, [pc, #152]	; (800a2f0 <_strtod_l+0x588>)
 800a256:	460a      	mov	r2, r1
 800a258:	400b      	ands	r3, r1
 800a25a:	4929      	ldr	r1, [pc, #164]	; (800a300 <_strtod_l+0x598>)
 800a25c:	4680      	mov	r8, r0
 800a25e:	428b      	cmp	r3, r1
 800a260:	d8b9      	bhi.n	800a1d6 <_strtod_l+0x46e>
 800a262:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a266:	428b      	cmp	r3, r1
 800a268:	bf86      	itte	hi
 800a26a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a26e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a304 <_strtod_l+0x59c>
 800a272:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a276:	2300      	movs	r3, #0
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	e07f      	b.n	800a37c <_strtod_l+0x614>
 800a27c:	07f2      	lsls	r2, r6, #31
 800a27e:	d505      	bpl.n	800a28c <_strtod_l+0x524>
 800a280:	9b05      	ldr	r3, [sp, #20]
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f6 f931 	bl	80004ec <__aeabi_dmul>
 800a28a:	2301      	movs	r3, #1
 800a28c:	9a05      	ldr	r2, [sp, #20]
 800a28e:	3701      	adds	r7, #1
 800a290:	3208      	adds	r2, #8
 800a292:	1076      	asrs	r6, r6, #1
 800a294:	9205      	str	r2, [sp, #20]
 800a296:	e7cd      	b.n	800a234 <_strtod_l+0x4cc>
 800a298:	d0ed      	beq.n	800a276 <_strtod_l+0x50e>
 800a29a:	4276      	negs	r6, r6
 800a29c:	f016 020f 	ands.w	r2, r6, #15
 800a2a0:	d00a      	beq.n	800a2b8 <_strtod_l+0x550>
 800a2a2:	4b15      	ldr	r3, [pc, #84]	; (800a2f8 <_strtod_l+0x590>)
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f6 fa46 	bl	8000740 <__aeabi_ddiv>
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	4689      	mov	r9, r1
 800a2b8:	1136      	asrs	r6, r6, #4
 800a2ba:	d0dc      	beq.n	800a276 <_strtod_l+0x50e>
 800a2bc:	2e1f      	cmp	r6, #31
 800a2be:	dd23      	ble.n	800a308 <_strtod_l+0x5a0>
 800a2c0:	f04f 0b00 	mov.w	fp, #0
 800a2c4:	f8cd b010 	str.w	fp, [sp, #16]
 800a2c8:	f8cd b020 	str.w	fp, [sp, #32]
 800a2cc:	f8cd b018 	str.w	fp, [sp, #24]
 800a2d0:	2322      	movs	r3, #34	; 0x22
 800a2d2:	f04f 0800 	mov.w	r8, #0
 800a2d6:	f04f 0900 	mov.w	r9, #0
 800a2da:	f8ca 3000 	str.w	r3, [sl]
 800a2de:	e789      	b.n	800a1f4 <_strtod_l+0x48c>
 800a2e0:	0800d88d 	.word	0x0800d88d
 800a2e4:	0800d8d0 	.word	0x0800d8d0
 800a2e8:	0800d885 	.word	0x0800d885
 800a2ec:	0800da14 	.word	0x0800da14
 800a2f0:	7ff00000 	.word	0x7ff00000
 800a2f4:	0800dcc0 	.word	0x0800dcc0
 800a2f8:	0800dba0 	.word	0x0800dba0
 800a2fc:	0800db78 	.word	0x0800db78
 800a300:	7ca00000 	.word	0x7ca00000
 800a304:	7fefffff 	.word	0x7fefffff
 800a308:	f016 0310 	ands.w	r3, r6, #16
 800a30c:	bf18      	it	ne
 800a30e:	236a      	movne	r3, #106	; 0x6a
 800a310:	4640      	mov	r0, r8
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	4649      	mov	r1, r9
 800a316:	2300      	movs	r3, #0
 800a318:	4fb0      	ldr	r7, [pc, #704]	; (800a5dc <_strtod_l+0x874>)
 800a31a:	07f2      	lsls	r2, r6, #31
 800a31c:	d504      	bpl.n	800a328 <_strtod_l+0x5c0>
 800a31e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a322:	f7f6 f8e3 	bl	80004ec <__aeabi_dmul>
 800a326:	2301      	movs	r3, #1
 800a328:	1076      	asrs	r6, r6, #1
 800a32a:	f107 0708 	add.w	r7, r7, #8
 800a32e:	d1f4      	bne.n	800a31a <_strtod_l+0x5b2>
 800a330:	b10b      	cbz	r3, 800a336 <_strtod_l+0x5ce>
 800a332:	4680      	mov	r8, r0
 800a334:	4689      	mov	r9, r1
 800a336:	9b05      	ldr	r3, [sp, #20]
 800a338:	b1c3      	cbz	r3, 800a36c <_strtod_l+0x604>
 800a33a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a33e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a342:	2b00      	cmp	r3, #0
 800a344:	4649      	mov	r1, r9
 800a346:	dd11      	ble.n	800a36c <_strtod_l+0x604>
 800a348:	2b1f      	cmp	r3, #31
 800a34a:	f340 8127 	ble.w	800a59c <_strtod_l+0x834>
 800a34e:	2b34      	cmp	r3, #52	; 0x34
 800a350:	bfd8      	it	le
 800a352:	f04f 33ff 	movle.w	r3, #4294967295
 800a356:	f04f 0800 	mov.w	r8, #0
 800a35a:	bfcf      	iteee	gt
 800a35c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a360:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a364:	fa03 f202 	lslle.w	r2, r3, r2
 800a368:	ea02 0901 	andle.w	r9, r2, r1
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	4640      	mov	r0, r8
 800a372:	4649      	mov	r1, r9
 800a374:	f7f6 fb22 	bl	80009bc <__aeabi_dcmpeq>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1a1      	bne.n	800a2c0 <_strtod_l+0x558>
 800a37c:	9b06      	ldr	r3, [sp, #24]
 800a37e:	465a      	mov	r2, fp
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	4650      	mov	r0, sl
 800a384:	4623      	mov	r3, r4
 800a386:	9908      	ldr	r1, [sp, #32]
 800a388:	f002 f83c 	bl	800c404 <__s2b>
 800a38c:	9008      	str	r0, [sp, #32]
 800a38e:	2800      	cmp	r0, #0
 800a390:	f43f af21 	beq.w	800a1d6 <_strtod_l+0x46e>
 800a394:	9b04      	ldr	r3, [sp, #16]
 800a396:	f04f 0b00 	mov.w	fp, #0
 800a39a:	1b5d      	subs	r5, r3, r5
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	f8cd b010 	str.w	fp, [sp, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	bfb4      	ite	lt
 800a3a6:	462b      	movlt	r3, r5
 800a3a8:	2300      	movge	r3, #0
 800a3aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a3b2:	9314      	str	r3, [sp, #80]	; 0x50
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	6859      	ldr	r1, [r3, #4]
 800a3ba:	f001 ff7b 	bl	800c2b4 <_Balloc>
 800a3be:	9006      	str	r0, [sp, #24]
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f43f af10 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a3c6:	9b08      	ldr	r3, [sp, #32]
 800a3c8:	300c      	adds	r0, #12
 800a3ca:	691a      	ldr	r2, [r3, #16]
 800a3cc:	f103 010c 	add.w	r1, r3, #12
 800a3d0:	3202      	adds	r2, #2
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	f7fe fc09 	bl	8008bea <memcpy>
 800a3d8:	ab1c      	add	r3, sp, #112	; 0x70
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	ab1b      	add	r3, sp, #108	; 0x6c
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	4650      	mov	r0, sl
 800a3e6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a3ea:	f002 fb4d 	bl	800ca88 <__d2b>
 800a3ee:	901a      	str	r0, [sp, #104]	; 0x68
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	f43f aef8 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	4650      	mov	r0, sl
 800a3fa:	f002 f89b 	bl	800c534 <__i2b>
 800a3fe:	4603      	mov	r3, r0
 800a400:	9004      	str	r0, [sp, #16]
 800a402:	2800      	cmp	r0, #0
 800a404:	f43f aeef 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a408:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a40a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a40c:	2d00      	cmp	r5, #0
 800a40e:	bfab      	itete	ge
 800a410:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a412:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a414:	18ee      	addge	r6, r5, r3
 800a416:	1b5c      	sublt	r4, r3, r5
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	bfa8      	it	ge
 800a41c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a41e:	eba5 0503 	sub.w	r5, r5, r3
 800a422:	4415      	add	r5, r2
 800a424:	4b6e      	ldr	r3, [pc, #440]	; (800a5e0 <_strtod_l+0x878>)
 800a426:	f105 35ff 	add.w	r5, r5, #4294967295
 800a42a:	bfb8      	it	lt
 800a42c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a42e:	429d      	cmp	r5, r3
 800a430:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a434:	f280 80c4 	bge.w	800a5c0 <_strtod_l+0x858>
 800a438:	1b5b      	subs	r3, r3, r5
 800a43a:	2b1f      	cmp	r3, #31
 800a43c:	f04f 0701 	mov.w	r7, #1
 800a440:	eba2 0203 	sub.w	r2, r2, r3
 800a444:	f300 80b1 	bgt.w	800a5aa <_strtod_l+0x842>
 800a448:	2500      	movs	r5, #0
 800a44a:	fa07 f303 	lsl.w	r3, r7, r3
 800a44e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a450:	18b7      	adds	r7, r6, r2
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	42be      	cmp	r6, r7
 800a456:	4414      	add	r4, r2
 800a458:	441c      	add	r4, r3
 800a45a:	4633      	mov	r3, r6
 800a45c:	bfa8      	it	ge
 800a45e:	463b      	movge	r3, r7
 800a460:	42a3      	cmp	r3, r4
 800a462:	bfa8      	it	ge
 800a464:	4623      	movge	r3, r4
 800a466:	2b00      	cmp	r3, #0
 800a468:	bfc2      	ittt	gt
 800a46a:	1aff      	subgt	r7, r7, r3
 800a46c:	1ae4      	subgt	r4, r4, r3
 800a46e:	1af6      	subgt	r6, r6, r3
 800a470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a472:	2b00      	cmp	r3, #0
 800a474:	dd17      	ble.n	800a4a6 <_strtod_l+0x73e>
 800a476:	461a      	mov	r2, r3
 800a478:	4650      	mov	r0, sl
 800a47a:	9904      	ldr	r1, [sp, #16]
 800a47c:	f002 f918 	bl	800c6b0 <__pow5mult>
 800a480:	9004      	str	r0, [sp, #16]
 800a482:	2800      	cmp	r0, #0
 800a484:	f43f aeaf 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a488:	4601      	mov	r1, r0
 800a48a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a48c:	4650      	mov	r0, sl
 800a48e:	f002 f867 	bl	800c560 <__multiply>
 800a492:	9009      	str	r0, [sp, #36]	; 0x24
 800a494:	2800      	cmp	r0, #0
 800a496:	f43f aea6 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a49a:	4650      	mov	r0, sl
 800a49c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a49e:	f001 ff49 	bl	800c334 <_Bfree>
 800a4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4a6:	2f00      	cmp	r7, #0
 800a4a8:	f300 808e 	bgt.w	800a5c8 <_strtod_l+0x860>
 800a4ac:	9b07      	ldr	r3, [sp, #28]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	dd08      	ble.n	800a4c4 <_strtod_l+0x75c>
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4b6:	9906      	ldr	r1, [sp, #24]
 800a4b8:	f002 f8fa 	bl	800c6b0 <__pow5mult>
 800a4bc:	9006      	str	r0, [sp, #24]
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	f43f ae91 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a4c4:	2c00      	cmp	r4, #0
 800a4c6:	dd08      	ble.n	800a4da <_strtod_l+0x772>
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	9906      	ldr	r1, [sp, #24]
 800a4ce:	f002 f949 	bl	800c764 <__lshift>
 800a4d2:	9006      	str	r0, [sp, #24]
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f43f ae86 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a4da:	2e00      	cmp	r6, #0
 800a4dc:	dd08      	ble.n	800a4f0 <_strtod_l+0x788>
 800a4de:	4632      	mov	r2, r6
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	9904      	ldr	r1, [sp, #16]
 800a4e4:	f002 f93e 	bl	800c764 <__lshift>
 800a4e8:	9004      	str	r0, [sp, #16]
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	f43f ae7b 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	9a06      	ldr	r2, [sp, #24]
 800a4f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a4f6:	f002 f9c1 	bl	800c87c <__mdiff>
 800a4fa:	4683      	mov	fp, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	f43f ae72 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a502:	2400      	movs	r4, #0
 800a504:	68c3      	ldr	r3, [r0, #12]
 800a506:	9904      	ldr	r1, [sp, #16]
 800a508:	60c4      	str	r4, [r0, #12]
 800a50a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a50c:	f002 f99a 	bl	800c844 <__mcmp>
 800a510:	42a0      	cmp	r0, r4
 800a512:	da6b      	bge.n	800a5ec <_strtod_l+0x884>
 800a514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a516:	ea53 0308 	orrs.w	r3, r3, r8
 800a51a:	f040 8091 	bne.w	800a640 <_strtod_l+0x8d8>
 800a51e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a522:	2b00      	cmp	r3, #0
 800a524:	f040 808c 	bne.w	800a640 <_strtod_l+0x8d8>
 800a528:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a52c:	0d1b      	lsrs	r3, r3, #20
 800a52e:	051b      	lsls	r3, r3, #20
 800a530:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a534:	f240 8084 	bls.w	800a640 <_strtod_l+0x8d8>
 800a538:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a53c:	b91b      	cbnz	r3, 800a546 <_strtod_l+0x7de>
 800a53e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a542:	2b01      	cmp	r3, #1
 800a544:	dd7c      	ble.n	800a640 <_strtod_l+0x8d8>
 800a546:	4659      	mov	r1, fp
 800a548:	2201      	movs	r2, #1
 800a54a:	4650      	mov	r0, sl
 800a54c:	f002 f90a 	bl	800c764 <__lshift>
 800a550:	9904      	ldr	r1, [sp, #16]
 800a552:	4683      	mov	fp, r0
 800a554:	f002 f976 	bl	800c844 <__mcmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	dd71      	ble.n	800a640 <_strtod_l+0x8d8>
 800a55c:	9905      	ldr	r1, [sp, #20]
 800a55e:	464b      	mov	r3, r9
 800a560:	4a20      	ldr	r2, [pc, #128]	; (800a5e4 <_strtod_l+0x87c>)
 800a562:	2900      	cmp	r1, #0
 800a564:	f000 808c 	beq.w	800a680 <_strtod_l+0x918>
 800a568:	ea02 0109 	and.w	r1, r2, r9
 800a56c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a570:	f300 8086 	bgt.w	800a680 <_strtod_l+0x918>
 800a574:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a578:	f77f aeaa 	ble.w	800a2d0 <_strtod_l+0x568>
 800a57c:	4640      	mov	r0, r8
 800a57e:	4649      	mov	r1, r9
 800a580:	4b19      	ldr	r3, [pc, #100]	; (800a5e8 <_strtod_l+0x880>)
 800a582:	2200      	movs	r2, #0
 800a584:	f7f5 ffb2 	bl	80004ec <__aeabi_dmul>
 800a588:	460b      	mov	r3, r1
 800a58a:	4303      	orrs	r3, r0
 800a58c:	bf08      	it	eq
 800a58e:	2322      	moveq	r3, #34	; 0x22
 800a590:	4680      	mov	r8, r0
 800a592:	4689      	mov	r9, r1
 800a594:	bf08      	it	eq
 800a596:	f8ca 3000 	streq.w	r3, [sl]
 800a59a:	e62f      	b.n	800a1fc <_strtod_l+0x494>
 800a59c:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a4:	ea03 0808 	and.w	r8, r3, r8
 800a5a8:	e6e0      	b.n	800a36c <_strtod_l+0x604>
 800a5aa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a5ae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a5b2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a5b6:	35e2      	adds	r5, #226	; 0xe2
 800a5b8:	fa07 f505 	lsl.w	r5, r7, r5
 800a5bc:	970f      	str	r7, [sp, #60]	; 0x3c
 800a5be:	e747      	b.n	800a450 <_strtod_l+0x6e8>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c6:	e743      	b.n	800a450 <_strtod_l+0x6e8>
 800a5c8:	463a      	mov	r2, r7
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a5ce:	f002 f8c9 	bl	800c764 <__lshift>
 800a5d2:	901a      	str	r0, [sp, #104]	; 0x68
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f47f af69 	bne.w	800a4ac <_strtod_l+0x744>
 800a5da:	e604      	b.n	800a1e6 <_strtod_l+0x47e>
 800a5dc:	0800d8e8 	.word	0x0800d8e8
 800a5e0:	fffffc02 	.word	0xfffffc02
 800a5e4:	7ff00000 	.word	0x7ff00000
 800a5e8:	39500000 	.word	0x39500000
 800a5ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a5f0:	d165      	bne.n	800a6be <_strtod_l+0x956>
 800a5f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5f8:	b35a      	cbz	r2, 800a652 <_strtod_l+0x8ea>
 800a5fa:	4a99      	ldr	r2, [pc, #612]	; (800a860 <_strtod_l+0xaf8>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d12b      	bne.n	800a658 <_strtod_l+0x8f0>
 800a600:	9b05      	ldr	r3, [sp, #20]
 800a602:	4641      	mov	r1, r8
 800a604:	b303      	cbz	r3, 800a648 <_strtod_l+0x8e0>
 800a606:	464a      	mov	r2, r9
 800a608:	4b96      	ldr	r3, [pc, #600]	; (800a864 <_strtod_l+0xafc>)
 800a60a:	4013      	ands	r3, r2
 800a60c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a610:	f04f 32ff 	mov.w	r2, #4294967295
 800a614:	d81b      	bhi.n	800a64e <_strtod_l+0x8e6>
 800a616:	0d1b      	lsrs	r3, r3, #20
 800a618:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a61c:	fa02 f303 	lsl.w	r3, r2, r3
 800a620:	4299      	cmp	r1, r3
 800a622:	d119      	bne.n	800a658 <_strtod_l+0x8f0>
 800a624:	4b90      	ldr	r3, [pc, #576]	; (800a868 <_strtod_l+0xb00>)
 800a626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a628:	429a      	cmp	r2, r3
 800a62a:	d102      	bne.n	800a632 <_strtod_l+0x8ca>
 800a62c:	3101      	adds	r1, #1
 800a62e:	f43f adda 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a632:	f04f 0800 	mov.w	r8, #0
 800a636:	4b8b      	ldr	r3, [pc, #556]	; (800a864 <_strtod_l+0xafc>)
 800a638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a63a:	401a      	ands	r2, r3
 800a63c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a640:	9b05      	ldr	r3, [sp, #20]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d19a      	bne.n	800a57c <_strtod_l+0x814>
 800a646:	e5d9      	b.n	800a1fc <_strtod_l+0x494>
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	e7e8      	b.n	800a620 <_strtod_l+0x8b8>
 800a64e:	4613      	mov	r3, r2
 800a650:	e7e6      	b.n	800a620 <_strtod_l+0x8b8>
 800a652:	ea53 0308 	orrs.w	r3, r3, r8
 800a656:	d081      	beq.n	800a55c <_strtod_l+0x7f4>
 800a658:	b1e5      	cbz	r5, 800a694 <_strtod_l+0x92c>
 800a65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a65c:	421d      	tst	r5, r3
 800a65e:	d0ef      	beq.n	800a640 <_strtod_l+0x8d8>
 800a660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	9a05      	ldr	r2, [sp, #20]
 800a668:	b1c3      	cbz	r3, 800a69c <_strtod_l+0x934>
 800a66a:	f7ff fb59 	bl	8009d20 <sulp>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a676:	f7f5 fd83 	bl	8000180 <__adddf3>
 800a67a:	4680      	mov	r8, r0
 800a67c:	4689      	mov	r9, r1
 800a67e:	e7df      	b.n	800a640 <_strtod_l+0x8d8>
 800a680:	4013      	ands	r3, r2
 800a682:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a686:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a68a:	f04f 38ff 	mov.w	r8, #4294967295
 800a68e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a692:	e7d5      	b.n	800a640 <_strtod_l+0x8d8>
 800a694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a696:	ea13 0f08 	tst.w	r3, r8
 800a69a:	e7e0      	b.n	800a65e <_strtod_l+0x8f6>
 800a69c:	f7ff fb40 	bl	8009d20 <sulp>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6a8:	f7f5 fd68 	bl	800017c <__aeabi_dsub>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4680      	mov	r8, r0
 800a6b2:	4689      	mov	r9, r1
 800a6b4:	f7f6 f982 	bl	80009bc <__aeabi_dcmpeq>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d0c1      	beq.n	800a640 <_strtod_l+0x8d8>
 800a6bc:	e608      	b.n	800a2d0 <_strtod_l+0x568>
 800a6be:	4658      	mov	r0, fp
 800a6c0:	9904      	ldr	r1, [sp, #16]
 800a6c2:	f002 fa3d 	bl	800cb40 <__ratio>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	f7f6 f988 	bl	80009e4 <__aeabi_dcmple>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d070      	beq.n	800a7ba <_strtod_l+0xa52>
 800a6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d042      	beq.n	800a764 <_strtod_l+0x9fc>
 800a6de:	2600      	movs	r6, #0
 800a6e0:	4f62      	ldr	r7, [pc, #392]	; (800a86c <_strtod_l+0xb04>)
 800a6e2:	4d62      	ldr	r5, [pc, #392]	; (800a86c <_strtod_l+0xb04>)
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6ea:	0d1b      	lsrs	r3, r3, #20
 800a6ec:	051b      	lsls	r3, r3, #20
 800a6ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6f2:	4b5f      	ldr	r3, [pc, #380]	; (800a870 <_strtod_l+0xb08>)
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	f040 80c3 	bne.w	800a880 <_strtod_l+0xb18>
 800a6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a702:	4649      	mov	r1, r9
 800a704:	f002 f946 	bl	800c994 <__ulp>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f5 feec 	bl	80004ec <__aeabi_dmul>
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	f7f5 fd32 	bl	8000180 <__adddf3>
 800a71c:	460b      	mov	r3, r1
 800a71e:	4951      	ldr	r1, [pc, #324]	; (800a864 <_strtod_l+0xafc>)
 800a720:	4a54      	ldr	r2, [pc, #336]	; (800a874 <_strtod_l+0xb0c>)
 800a722:	4019      	ands	r1, r3
 800a724:	4291      	cmp	r1, r2
 800a726:	4680      	mov	r8, r0
 800a728:	d95d      	bls.n	800a7e6 <_strtod_l+0xa7e>
 800a72a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a72c:	4b4e      	ldr	r3, [pc, #312]	; (800a868 <_strtod_l+0xb00>)
 800a72e:	429a      	cmp	r2, r3
 800a730:	d103      	bne.n	800a73a <_strtod_l+0x9d2>
 800a732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a734:	3301      	adds	r3, #1
 800a736:	f43f ad56 	beq.w	800a1e6 <_strtod_l+0x47e>
 800a73a:	f04f 38ff 	mov.w	r8, #4294967295
 800a73e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a868 <_strtod_l+0xb00>
 800a742:	4650      	mov	r0, sl
 800a744:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a746:	f001 fdf5 	bl	800c334 <_Bfree>
 800a74a:	4650      	mov	r0, sl
 800a74c:	9906      	ldr	r1, [sp, #24]
 800a74e:	f001 fdf1 	bl	800c334 <_Bfree>
 800a752:	4650      	mov	r0, sl
 800a754:	9904      	ldr	r1, [sp, #16]
 800a756:	f001 fded 	bl	800c334 <_Bfree>
 800a75a:	4659      	mov	r1, fp
 800a75c:	4650      	mov	r0, sl
 800a75e:	f001 fde9 	bl	800c334 <_Bfree>
 800a762:	e627      	b.n	800a3b4 <_strtod_l+0x64c>
 800a764:	f1b8 0f00 	cmp.w	r8, #0
 800a768:	d119      	bne.n	800a79e <_strtod_l+0xa36>
 800a76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a770:	b9e3      	cbnz	r3, 800a7ac <_strtod_l+0xa44>
 800a772:	2200      	movs	r2, #0
 800a774:	4630      	mov	r0, r6
 800a776:	4639      	mov	r1, r7
 800a778:	4b3c      	ldr	r3, [pc, #240]	; (800a86c <_strtod_l+0xb04>)
 800a77a:	f7f6 f929 	bl	80009d0 <__aeabi_dcmplt>
 800a77e:	b9c8      	cbnz	r0, 800a7b4 <_strtod_l+0xa4c>
 800a780:	2200      	movs	r2, #0
 800a782:	4630      	mov	r0, r6
 800a784:	4639      	mov	r1, r7
 800a786:	4b3c      	ldr	r3, [pc, #240]	; (800a878 <_strtod_l+0xb10>)
 800a788:	f7f5 feb0 	bl	80004ec <__aeabi_dmul>
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a794:	9416      	str	r4, [sp, #88]	; 0x58
 800a796:	9317      	str	r3, [sp, #92]	; 0x5c
 800a798:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a79c:	e7a2      	b.n	800a6e4 <_strtod_l+0x97c>
 800a79e:	f1b8 0f01 	cmp.w	r8, #1
 800a7a2:	d103      	bne.n	800a7ac <_strtod_l+0xa44>
 800a7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f43f ad92 	beq.w	800a2d0 <_strtod_l+0x568>
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	2400      	movs	r4, #0
 800a7b0:	4f32      	ldr	r7, [pc, #200]	; (800a87c <_strtod_l+0xb14>)
 800a7b2:	e796      	b.n	800a6e2 <_strtod_l+0x97a>
 800a7b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a7b6:	4d30      	ldr	r5, [pc, #192]	; (800a878 <_strtod_l+0xb10>)
 800a7b8:	e7ea      	b.n	800a790 <_strtod_l+0xa28>
 800a7ba:	4b2f      	ldr	r3, [pc, #188]	; (800a878 <_strtod_l+0xb10>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f5 fe93 	bl	80004ec <__aeabi_dmul>
 800a7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	b933      	cbnz	r3, 800a7dc <_strtod_l+0xa74>
 800a7ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7d2:	9010      	str	r0, [sp, #64]	; 0x40
 800a7d4:	9311      	str	r3, [sp, #68]	; 0x44
 800a7d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a7da:	e783      	b.n	800a6e4 <_strtod_l+0x97c>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a7e4:	e7f7      	b.n	800a7d6 <_strtod_l+0xa6e>
 800a7e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a7ea:	9b05      	ldr	r3, [sp, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1a8      	bne.n	800a742 <_strtod_l+0x9da>
 800a7f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7f6:	0d1b      	lsrs	r3, r3, #20
 800a7f8:	051b      	lsls	r3, r3, #20
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d1a1      	bne.n	800a742 <_strtod_l+0x9da>
 800a7fe:	4620      	mov	r0, r4
 800a800:	4629      	mov	r1, r5
 800a802:	f7f6 fcb5 	bl	8001170 <__aeabi_d2lz>
 800a806:	f7f5 fe43 	bl	8000490 <__aeabi_l2d>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4620      	mov	r0, r4
 800a810:	4629      	mov	r1, r5
 800a812:	f7f5 fcb3 	bl	800017c <__aeabi_dsub>
 800a816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a81c:	ea43 0308 	orr.w	r3, r3, r8
 800a820:	4313      	orrs	r3, r2
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	d066      	beq.n	800a8f6 <_strtod_l+0xb8e>
 800a828:	a309      	add	r3, pc, #36	; (adr r3, 800a850 <_strtod_l+0xae8>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f6 f8cf 	bl	80009d0 <__aeabi_dcmplt>
 800a832:	2800      	cmp	r0, #0
 800a834:	f47f ace2 	bne.w	800a1fc <_strtod_l+0x494>
 800a838:	a307      	add	r3, pc, #28	; (adr r3, 800a858 <_strtod_l+0xaf0>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	4620      	mov	r0, r4
 800a840:	4629      	mov	r1, r5
 800a842:	f7f6 f8e3 	bl	8000a0c <__aeabi_dcmpgt>
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f af7b 	beq.w	800a742 <_strtod_l+0x9da>
 800a84c:	e4d6      	b.n	800a1fc <_strtod_l+0x494>
 800a84e:	bf00      	nop
 800a850:	94a03595 	.word	0x94a03595
 800a854:	3fdfffff 	.word	0x3fdfffff
 800a858:	35afe535 	.word	0x35afe535
 800a85c:	3fe00000 	.word	0x3fe00000
 800a860:	000fffff 	.word	0x000fffff
 800a864:	7ff00000 	.word	0x7ff00000
 800a868:	7fefffff 	.word	0x7fefffff
 800a86c:	3ff00000 	.word	0x3ff00000
 800a870:	7fe00000 	.word	0x7fe00000
 800a874:	7c9fffff 	.word	0x7c9fffff
 800a878:	3fe00000 	.word	0x3fe00000
 800a87c:	bff00000 	.word	0xbff00000
 800a880:	9b05      	ldr	r3, [sp, #20]
 800a882:	b313      	cbz	r3, 800a8ca <_strtod_l+0xb62>
 800a884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a886:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a88a:	d81e      	bhi.n	800a8ca <_strtod_l+0xb62>
 800a88c:	a326      	add	r3, pc, #152	; (adr r3, 800a928 <_strtod_l+0xbc0>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	4620      	mov	r0, r4
 800a894:	4629      	mov	r1, r5
 800a896:	f7f6 f8a5 	bl	80009e4 <__aeabi_dcmple>
 800a89a:	b190      	cbz	r0, 800a8c2 <_strtod_l+0xb5a>
 800a89c:	4629      	mov	r1, r5
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7f6 f8fc 	bl	8000a9c <__aeabi_d2uiz>
 800a8a4:	2801      	cmp	r0, #1
 800a8a6:	bf38      	it	cc
 800a8a8:	2001      	movcc	r0, #1
 800a8aa:	f7f5 fda5 	bl	80003f8 <__aeabi_ui2d>
 800a8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	b9d3      	cbnz	r3, 800a8ec <_strtod_l+0xb84>
 800a8b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ba:	9012      	str	r0, [sp, #72]	; 0x48
 800a8bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a8c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a8c8:	1a9f      	subs	r7, r3, r2
 800a8ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8ce:	f002 f861 	bl	800c994 <__ulp>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f5 fe07 	bl	80004ec <__aeabi_dmul>
 800a8de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8e2:	f7f5 fc4d 	bl	8000180 <__adddf3>
 800a8e6:	4680      	mov	r8, r0
 800a8e8:	4689      	mov	r9, r1
 800a8ea:	e77e      	b.n	800a7ea <_strtod_l+0xa82>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a8f4:	e7e3      	b.n	800a8be <_strtod_l+0xb56>
 800a8f6:	a30e      	add	r3, pc, #56	; (adr r3, 800a930 <_strtod_l+0xbc8>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f7f6 f868 	bl	80009d0 <__aeabi_dcmplt>
 800a900:	e7a1      	b.n	800a846 <_strtod_l+0xade>
 800a902:	2300      	movs	r3, #0
 800a904:	930a      	str	r3, [sp, #40]	; 0x28
 800a906:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	f7ff ba71 	b.w	8009df2 <_strtod_l+0x8a>
 800a910:	2a65      	cmp	r2, #101	; 0x65
 800a912:	f43f ab63 	beq.w	8009fdc <_strtod_l+0x274>
 800a916:	2a45      	cmp	r2, #69	; 0x45
 800a918:	f43f ab60 	beq.w	8009fdc <_strtod_l+0x274>
 800a91c:	2301      	movs	r3, #1
 800a91e:	f7ff bb95 	b.w	800a04c <_strtod_l+0x2e4>
 800a922:	bf00      	nop
 800a924:	f3af 8000 	nop.w
 800a928:	ffc00000 	.word	0xffc00000
 800a92c:	41dfffff 	.word	0x41dfffff
 800a930:	94a03595 	.word	0x94a03595
 800a934:	3fcfffff 	.word	0x3fcfffff

0800a938 <_strtod_r>:
 800a938:	4b01      	ldr	r3, [pc, #4]	; (800a940 <_strtod_r+0x8>)
 800a93a:	f7ff ba15 	b.w	8009d68 <_strtod_l>
 800a93e:	bf00      	nop
 800a940:	200000c8 	.word	0x200000c8

0800a944 <_strtol_l.constprop.0>:
 800a944:	2b01      	cmp	r3, #1
 800a946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a94a:	4680      	mov	r8, r0
 800a94c:	d001      	beq.n	800a952 <_strtol_l.constprop.0+0xe>
 800a94e:	2b24      	cmp	r3, #36	; 0x24
 800a950:	d906      	bls.n	800a960 <_strtol_l.constprop.0+0x1c>
 800a952:	f7fe f827 	bl	80089a4 <__errno>
 800a956:	2316      	movs	r3, #22
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	2000      	movs	r0, #0
 800a95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a960:	460d      	mov	r5, r1
 800a962:	4f35      	ldr	r7, [pc, #212]	; (800aa38 <_strtol_l.constprop.0+0xf4>)
 800a964:	4628      	mov	r0, r5
 800a966:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a96a:	5de6      	ldrb	r6, [r4, r7]
 800a96c:	f016 0608 	ands.w	r6, r6, #8
 800a970:	d1f8      	bne.n	800a964 <_strtol_l.constprop.0+0x20>
 800a972:	2c2d      	cmp	r4, #45	; 0x2d
 800a974:	d12f      	bne.n	800a9d6 <_strtol_l.constprop.0+0x92>
 800a976:	2601      	movs	r6, #1
 800a978:	782c      	ldrb	r4, [r5, #0]
 800a97a:	1c85      	adds	r5, r0, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d057      	beq.n	800aa30 <_strtol_l.constprop.0+0xec>
 800a980:	2b10      	cmp	r3, #16
 800a982:	d109      	bne.n	800a998 <_strtol_l.constprop.0+0x54>
 800a984:	2c30      	cmp	r4, #48	; 0x30
 800a986:	d107      	bne.n	800a998 <_strtol_l.constprop.0+0x54>
 800a988:	7828      	ldrb	r0, [r5, #0]
 800a98a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a98e:	2858      	cmp	r0, #88	; 0x58
 800a990:	d149      	bne.n	800aa26 <_strtol_l.constprop.0+0xe2>
 800a992:	2310      	movs	r3, #16
 800a994:	786c      	ldrb	r4, [r5, #1]
 800a996:	3502      	adds	r5, #2
 800a998:	2700      	movs	r7, #0
 800a99a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a99e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a9a2:	fbbe f9f3 	udiv	r9, lr, r3
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a9ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9b0:	f1bc 0f09 	cmp.w	ip, #9
 800a9b4:	d814      	bhi.n	800a9e0 <_strtol_l.constprop.0+0x9c>
 800a9b6:	4664      	mov	r4, ip
 800a9b8:	42a3      	cmp	r3, r4
 800a9ba:	dd22      	ble.n	800aa02 <_strtol_l.constprop.0+0xbe>
 800a9bc:	2f00      	cmp	r7, #0
 800a9be:	db1d      	blt.n	800a9fc <_strtol_l.constprop.0+0xb8>
 800a9c0:	4581      	cmp	r9, r0
 800a9c2:	d31b      	bcc.n	800a9fc <_strtol_l.constprop.0+0xb8>
 800a9c4:	d101      	bne.n	800a9ca <_strtol_l.constprop.0+0x86>
 800a9c6:	45a2      	cmp	sl, r4
 800a9c8:	db18      	blt.n	800a9fc <_strtol_l.constprop.0+0xb8>
 800a9ca:	2701      	movs	r7, #1
 800a9cc:	fb00 4003 	mla	r0, r0, r3, r4
 800a9d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9d4:	e7ea      	b.n	800a9ac <_strtol_l.constprop.0+0x68>
 800a9d6:	2c2b      	cmp	r4, #43	; 0x2b
 800a9d8:	bf04      	itt	eq
 800a9da:	782c      	ldrbeq	r4, [r5, #0]
 800a9dc:	1c85      	addeq	r5, r0, #2
 800a9de:	e7cd      	b.n	800a97c <_strtol_l.constprop.0+0x38>
 800a9e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a9e4:	f1bc 0f19 	cmp.w	ip, #25
 800a9e8:	d801      	bhi.n	800a9ee <_strtol_l.constprop.0+0xaa>
 800a9ea:	3c37      	subs	r4, #55	; 0x37
 800a9ec:	e7e4      	b.n	800a9b8 <_strtol_l.constprop.0+0x74>
 800a9ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a9f2:	f1bc 0f19 	cmp.w	ip, #25
 800a9f6:	d804      	bhi.n	800aa02 <_strtol_l.constprop.0+0xbe>
 800a9f8:	3c57      	subs	r4, #87	; 0x57
 800a9fa:	e7dd      	b.n	800a9b8 <_strtol_l.constprop.0+0x74>
 800a9fc:	f04f 37ff 	mov.w	r7, #4294967295
 800aa00:	e7e6      	b.n	800a9d0 <_strtol_l.constprop.0+0x8c>
 800aa02:	2f00      	cmp	r7, #0
 800aa04:	da07      	bge.n	800aa16 <_strtol_l.constprop.0+0xd2>
 800aa06:	2322      	movs	r3, #34	; 0x22
 800aa08:	4670      	mov	r0, lr
 800aa0a:	f8c8 3000 	str.w	r3, [r8]
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	d0a4      	beq.n	800a95c <_strtol_l.constprop.0+0x18>
 800aa12:	1e69      	subs	r1, r5, #1
 800aa14:	e005      	b.n	800aa22 <_strtol_l.constprop.0+0xde>
 800aa16:	b106      	cbz	r6, 800aa1a <_strtol_l.constprop.0+0xd6>
 800aa18:	4240      	negs	r0, r0
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	d09e      	beq.n	800a95c <_strtol_l.constprop.0+0x18>
 800aa1e:	2f00      	cmp	r7, #0
 800aa20:	d1f7      	bne.n	800aa12 <_strtol_l.constprop.0+0xce>
 800aa22:	6011      	str	r1, [r2, #0]
 800aa24:	e79a      	b.n	800a95c <_strtol_l.constprop.0+0x18>
 800aa26:	2430      	movs	r4, #48	; 0x30
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1b5      	bne.n	800a998 <_strtol_l.constprop.0+0x54>
 800aa2c:	2308      	movs	r3, #8
 800aa2e:	e7b3      	b.n	800a998 <_strtol_l.constprop.0+0x54>
 800aa30:	2c30      	cmp	r4, #48	; 0x30
 800aa32:	d0a9      	beq.n	800a988 <_strtol_l.constprop.0+0x44>
 800aa34:	230a      	movs	r3, #10
 800aa36:	e7af      	b.n	800a998 <_strtol_l.constprop.0+0x54>
 800aa38:	0800d911 	.word	0x0800d911

0800aa3c <_strtol_r>:
 800aa3c:	f7ff bf82 	b.w	800a944 <_strtol_l.constprop.0>

0800aa40 <strtol>:
 800aa40:	4613      	mov	r3, r2
 800aa42:	460a      	mov	r2, r1
 800aa44:	4601      	mov	r1, r0
 800aa46:	4802      	ldr	r0, [pc, #8]	; (800aa50 <strtol+0x10>)
 800aa48:	6800      	ldr	r0, [r0, #0]
 800aa4a:	f7ff bf7b 	b.w	800a944 <_strtol_l.constprop.0>
 800aa4e:	bf00      	nop
 800aa50:	20000060 	.word	0x20000060

0800aa54 <__swbuf_r>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	460e      	mov	r6, r1
 800aa58:	4614      	mov	r4, r2
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	b118      	cbz	r0, 800aa66 <__swbuf_r+0x12>
 800aa5e:	6983      	ldr	r3, [r0, #24]
 800aa60:	b90b      	cbnz	r3, 800aa66 <__swbuf_r+0x12>
 800aa62:	f7fd fffd 	bl	8008a60 <__sinit>
 800aa66:	4b21      	ldr	r3, [pc, #132]	; (800aaec <__swbuf_r+0x98>)
 800aa68:	429c      	cmp	r4, r3
 800aa6a:	d12b      	bne.n	800aac4 <__swbuf_r+0x70>
 800aa6c:	686c      	ldr	r4, [r5, #4]
 800aa6e:	69a3      	ldr	r3, [r4, #24]
 800aa70:	60a3      	str	r3, [r4, #8]
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	071a      	lsls	r2, r3, #28
 800aa76:	d52f      	bpl.n	800aad8 <__swbuf_r+0x84>
 800aa78:	6923      	ldr	r3, [r4, #16]
 800aa7a:	b36b      	cbz	r3, 800aad8 <__swbuf_r+0x84>
 800aa7c:	6923      	ldr	r3, [r4, #16]
 800aa7e:	6820      	ldr	r0, [r4, #0]
 800aa80:	b2f6      	uxtb	r6, r6
 800aa82:	1ac0      	subs	r0, r0, r3
 800aa84:	6963      	ldr	r3, [r4, #20]
 800aa86:	4637      	mov	r7, r6
 800aa88:	4283      	cmp	r3, r0
 800aa8a:	dc04      	bgt.n	800aa96 <__swbuf_r+0x42>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 ffbe 	bl	800ba10 <_fflush_r>
 800aa94:	bb30      	cbnz	r0, 800aae4 <__swbuf_r+0x90>
 800aa96:	68a3      	ldr	r3, [r4, #8]
 800aa98:	3001      	adds	r0, #1
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	60a3      	str	r3, [r4, #8]
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	6022      	str	r2, [r4, #0]
 800aaa4:	701e      	strb	r6, [r3, #0]
 800aaa6:	6963      	ldr	r3, [r4, #20]
 800aaa8:	4283      	cmp	r3, r0
 800aaaa:	d004      	beq.n	800aab6 <__swbuf_r+0x62>
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	07db      	lsls	r3, r3, #31
 800aab0:	d506      	bpl.n	800aac0 <__swbuf_r+0x6c>
 800aab2:	2e0a      	cmp	r6, #10
 800aab4:	d104      	bne.n	800aac0 <__swbuf_r+0x6c>
 800aab6:	4621      	mov	r1, r4
 800aab8:	4628      	mov	r0, r5
 800aaba:	f000 ffa9 	bl	800ba10 <_fflush_r>
 800aabe:	b988      	cbnz	r0, 800aae4 <__swbuf_r+0x90>
 800aac0:	4638      	mov	r0, r7
 800aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <__swbuf_r+0x9c>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	d101      	bne.n	800aace <__swbuf_r+0x7a>
 800aaca:	68ac      	ldr	r4, [r5, #8]
 800aacc:	e7cf      	b.n	800aa6e <__swbuf_r+0x1a>
 800aace:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <__swbuf_r+0xa0>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	bf08      	it	eq
 800aad4:	68ec      	ldreq	r4, [r5, #12]
 800aad6:	e7ca      	b.n	800aa6e <__swbuf_r+0x1a>
 800aad8:	4621      	mov	r1, r4
 800aada:	4628      	mov	r0, r5
 800aadc:	f000 f81e 	bl	800ab1c <__swsetup_r>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0cb      	beq.n	800aa7c <__swbuf_r+0x28>
 800aae4:	f04f 37ff 	mov.w	r7, #4294967295
 800aae8:	e7ea      	b.n	800aac0 <__swbuf_r+0x6c>
 800aaea:	bf00      	nop
 800aaec:	0800d83c 	.word	0x0800d83c
 800aaf0:	0800d85c 	.word	0x0800d85c
 800aaf4:	0800d81c 	.word	0x0800d81c

0800aaf8 <_write_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4604      	mov	r4, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	4611      	mov	r1, r2
 800ab00:	2200      	movs	r2, #0
 800ab02:	4d05      	ldr	r5, [pc, #20]	; (800ab18 <_write_r+0x20>)
 800ab04:	602a      	str	r2, [r5, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	f7f7 ffca 	bl	8002aa0 <_write>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_write_r+0x1e>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_write_r+0x1e>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20002590 	.word	0x20002590

0800ab1c <__swsetup_r>:
 800ab1c:	4b32      	ldr	r3, [pc, #200]	; (800abe8 <__swsetup_r+0xcc>)
 800ab1e:	b570      	push	{r4, r5, r6, lr}
 800ab20:	681d      	ldr	r5, [r3, #0]
 800ab22:	4606      	mov	r6, r0
 800ab24:	460c      	mov	r4, r1
 800ab26:	b125      	cbz	r5, 800ab32 <__swsetup_r+0x16>
 800ab28:	69ab      	ldr	r3, [r5, #24]
 800ab2a:	b913      	cbnz	r3, 800ab32 <__swsetup_r+0x16>
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7fd ff97 	bl	8008a60 <__sinit>
 800ab32:	4b2e      	ldr	r3, [pc, #184]	; (800abec <__swsetup_r+0xd0>)
 800ab34:	429c      	cmp	r4, r3
 800ab36:	d10f      	bne.n	800ab58 <__swsetup_r+0x3c>
 800ab38:	686c      	ldr	r4, [r5, #4]
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab40:	0719      	lsls	r1, r3, #28
 800ab42:	d42c      	bmi.n	800ab9e <__swsetup_r+0x82>
 800ab44:	06dd      	lsls	r5, r3, #27
 800ab46:	d411      	bmi.n	800ab6c <__swsetup_r+0x50>
 800ab48:	2309      	movs	r3, #9
 800ab4a:	6033      	str	r3, [r6, #0]
 800ab4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	e03e      	b.n	800abd6 <__swsetup_r+0xba>
 800ab58:	4b25      	ldr	r3, [pc, #148]	; (800abf0 <__swsetup_r+0xd4>)
 800ab5a:	429c      	cmp	r4, r3
 800ab5c:	d101      	bne.n	800ab62 <__swsetup_r+0x46>
 800ab5e:	68ac      	ldr	r4, [r5, #8]
 800ab60:	e7eb      	b.n	800ab3a <__swsetup_r+0x1e>
 800ab62:	4b24      	ldr	r3, [pc, #144]	; (800abf4 <__swsetup_r+0xd8>)
 800ab64:	429c      	cmp	r4, r3
 800ab66:	bf08      	it	eq
 800ab68:	68ec      	ldreq	r4, [r5, #12]
 800ab6a:	e7e6      	b.n	800ab3a <__swsetup_r+0x1e>
 800ab6c:	0758      	lsls	r0, r3, #29
 800ab6e:	d512      	bpl.n	800ab96 <__swsetup_r+0x7a>
 800ab70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab72:	b141      	cbz	r1, 800ab86 <__swsetup_r+0x6a>
 800ab74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab78:	4299      	cmp	r1, r3
 800ab7a:	d002      	beq.n	800ab82 <__swsetup_r+0x66>
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f002 f865 	bl	800cc4c <_free_r>
 800ab82:	2300      	movs	r3, #0
 800ab84:	6363      	str	r3, [r4, #52]	; 0x34
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab8c:	81a3      	strh	r3, [r4, #12]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	6063      	str	r3, [r4, #4]
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	f043 0308 	orr.w	r3, r3, #8
 800ab9c:	81a3      	strh	r3, [r4, #12]
 800ab9e:	6923      	ldr	r3, [r4, #16]
 800aba0:	b94b      	cbnz	r3, 800abb6 <__swsetup_r+0x9a>
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abac:	d003      	beq.n	800abb6 <__swsetup_r+0x9a>
 800abae:	4621      	mov	r1, r4
 800abb0:	4630      	mov	r0, r6
 800abb2:	f001 fb0b 	bl	800c1cc <__smakebuf_r>
 800abb6:	89a0      	ldrh	r0, [r4, #12]
 800abb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abbc:	f010 0301 	ands.w	r3, r0, #1
 800abc0:	d00a      	beq.n	800abd8 <__swsetup_r+0xbc>
 800abc2:	2300      	movs	r3, #0
 800abc4:	60a3      	str	r3, [r4, #8]
 800abc6:	6963      	ldr	r3, [r4, #20]
 800abc8:	425b      	negs	r3, r3
 800abca:	61a3      	str	r3, [r4, #24]
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	b943      	cbnz	r3, 800abe2 <__swsetup_r+0xc6>
 800abd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abd4:	d1ba      	bne.n	800ab4c <__swsetup_r+0x30>
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	0781      	lsls	r1, r0, #30
 800abda:	bf58      	it	pl
 800abdc:	6963      	ldrpl	r3, [r4, #20]
 800abde:	60a3      	str	r3, [r4, #8]
 800abe0:	e7f4      	b.n	800abcc <__swsetup_r+0xb0>
 800abe2:	2000      	movs	r0, #0
 800abe4:	e7f7      	b.n	800abd6 <__swsetup_r+0xba>
 800abe6:	bf00      	nop
 800abe8:	20000060 	.word	0x20000060
 800abec:	0800d83c 	.word	0x0800d83c
 800abf0:	0800d85c 	.word	0x0800d85c
 800abf4:	0800d81c 	.word	0x0800d81c

0800abf8 <_close_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	2300      	movs	r3, #0
 800abfc:	4d05      	ldr	r5, [pc, #20]	; (800ac14 <_close_r+0x1c>)
 800abfe:	4604      	mov	r4, r0
 800ac00:	4608      	mov	r0, r1
 800ac02:	602b      	str	r3, [r5, #0]
 800ac04:	f7f7 ff68 	bl	8002ad8 <_close>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_close_r+0x1a>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_close_r+0x1a>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20002590 	.word	0x20002590

0800ac18 <quorem>:
 800ac18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	6903      	ldr	r3, [r0, #16]
 800ac1e:	690c      	ldr	r4, [r1, #16]
 800ac20:	4607      	mov	r7, r0
 800ac22:	42a3      	cmp	r3, r4
 800ac24:	f2c0 8082 	blt.w	800ad2c <quorem+0x114>
 800ac28:	3c01      	subs	r4, #1
 800ac2a:	f100 0514 	add.w	r5, r0, #20
 800ac2e:	f101 0814 	add.w	r8, r1, #20
 800ac32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac40:	3301      	adds	r3, #1
 800ac42:	429a      	cmp	r2, r3
 800ac44:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac50:	d331      	bcc.n	800acb6 <quorem+0x9e>
 800ac52:	f04f 0e00 	mov.w	lr, #0
 800ac56:	4640      	mov	r0, r8
 800ac58:	46ac      	mov	ip, r5
 800ac5a:	46f2      	mov	sl, lr
 800ac5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac60:	b293      	uxth	r3, r2
 800ac62:	fb06 e303 	mla	r3, r6, r3, lr
 800ac66:	0c12      	lsrs	r2, r2, #16
 800ac68:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	fb06 e202 	mla	r2, r6, r2, lr
 800ac72:	ebaa 0303 	sub.w	r3, sl, r3
 800ac76:	f8dc a000 	ldr.w	sl, [ip]
 800ac7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac7e:	fa1f fa8a 	uxth.w	sl, sl
 800ac82:	4453      	add	r3, sl
 800ac84:	f8dc a000 	ldr.w	sl, [ip]
 800ac88:	b292      	uxth	r2, r2
 800ac8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac98:	4581      	cmp	r9, r0
 800ac9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac9e:	f84c 3b04 	str.w	r3, [ip], #4
 800aca2:	d2db      	bcs.n	800ac5c <quorem+0x44>
 800aca4:	f855 300b 	ldr.w	r3, [r5, fp]
 800aca8:	b92b      	cbnz	r3, 800acb6 <quorem+0x9e>
 800acaa:	9b01      	ldr	r3, [sp, #4]
 800acac:	3b04      	subs	r3, #4
 800acae:	429d      	cmp	r5, r3
 800acb0:	461a      	mov	r2, r3
 800acb2:	d32f      	bcc.n	800ad14 <quorem+0xfc>
 800acb4:	613c      	str	r4, [r7, #16]
 800acb6:	4638      	mov	r0, r7
 800acb8:	f001 fdc4 	bl	800c844 <__mcmp>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	db25      	blt.n	800ad0c <quorem+0xf4>
 800acc0:	4628      	mov	r0, r5
 800acc2:	f04f 0c00 	mov.w	ip, #0
 800acc6:	3601      	adds	r6, #1
 800acc8:	f858 1b04 	ldr.w	r1, [r8], #4
 800accc:	f8d0 e000 	ldr.w	lr, [r0]
 800acd0:	b28b      	uxth	r3, r1
 800acd2:	ebac 0303 	sub.w	r3, ip, r3
 800acd6:	fa1f f28e 	uxth.w	r2, lr
 800acda:	4413      	add	r3, r2
 800acdc:	0c0a      	lsrs	r2, r1, #16
 800acde:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ace2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acec:	45c1      	cmp	r9, r8
 800acee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800acf2:	f840 3b04 	str.w	r3, [r0], #4
 800acf6:	d2e7      	bcs.n	800acc8 <quorem+0xb0>
 800acf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad00:	b922      	cbnz	r2, 800ad0c <quorem+0xf4>
 800ad02:	3b04      	subs	r3, #4
 800ad04:	429d      	cmp	r5, r3
 800ad06:	461a      	mov	r2, r3
 800ad08:	d30a      	bcc.n	800ad20 <quorem+0x108>
 800ad0a:	613c      	str	r4, [r7, #16]
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	b003      	add	sp, #12
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	6812      	ldr	r2, [r2, #0]
 800ad16:	3b04      	subs	r3, #4
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d1cb      	bne.n	800acb4 <quorem+0x9c>
 800ad1c:	3c01      	subs	r4, #1
 800ad1e:	e7c6      	b.n	800acae <quorem+0x96>
 800ad20:	6812      	ldr	r2, [r2, #0]
 800ad22:	3b04      	subs	r3, #4
 800ad24:	2a00      	cmp	r2, #0
 800ad26:	d1f0      	bne.n	800ad0a <quorem+0xf2>
 800ad28:	3c01      	subs	r4, #1
 800ad2a:	e7eb      	b.n	800ad04 <quorem+0xec>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e7ee      	b.n	800ad0e <quorem+0xf6>

0800ad30 <_dtoa_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	4616      	mov	r6, r2
 800ad36:	461f      	mov	r7, r3
 800ad38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ad3a:	b099      	sub	sp, #100	; 0x64
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ad42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ad46:	b974      	cbnz	r4, 800ad66 <_dtoa_r+0x36>
 800ad48:	2010      	movs	r0, #16
 800ad4a:	f001 fa7f 	bl	800c24c <malloc>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	6268      	str	r0, [r5, #36]	; 0x24
 800ad52:	b920      	cbnz	r0, 800ad5e <_dtoa_r+0x2e>
 800ad54:	21ea      	movs	r1, #234	; 0xea
 800ad56:	4ba8      	ldr	r3, [pc, #672]	; (800aff8 <_dtoa_r+0x2c8>)
 800ad58:	48a8      	ldr	r0, [pc, #672]	; (800affc <_dtoa_r+0x2cc>)
 800ad5a:	f002 faad 	bl	800d2b8 <__assert_func>
 800ad5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad62:	6004      	str	r4, [r0, #0]
 800ad64:	60c4      	str	r4, [r0, #12]
 800ad66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad68:	6819      	ldr	r1, [r3, #0]
 800ad6a:	b151      	cbz	r1, 800ad82 <_dtoa_r+0x52>
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	2301      	movs	r3, #1
 800ad70:	4093      	lsls	r3, r2
 800ad72:	604a      	str	r2, [r1, #4]
 800ad74:	608b      	str	r3, [r1, #8]
 800ad76:	4628      	mov	r0, r5
 800ad78:	f001 fadc 	bl	800c334 <_Bfree>
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	1e3b      	subs	r3, r7, #0
 800ad84:	bfaf      	iteee	ge
 800ad86:	2300      	movge	r3, #0
 800ad88:	2201      	movlt	r2, #1
 800ad8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad8e:	9305      	strlt	r3, [sp, #20]
 800ad90:	bfa8      	it	ge
 800ad92:	f8c8 3000 	strge.w	r3, [r8]
 800ad96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ad9a:	4b99      	ldr	r3, [pc, #612]	; (800b000 <_dtoa_r+0x2d0>)
 800ad9c:	bfb8      	it	lt
 800ad9e:	f8c8 2000 	strlt.w	r2, [r8]
 800ada2:	ea33 0309 	bics.w	r3, r3, r9
 800ada6:	d119      	bne.n	800addc <_dtoa_r+0xac>
 800ada8:	f242 730f 	movw	r3, #9999	; 0x270f
 800adac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adb4:	4333      	orrs	r3, r6
 800adb6:	f000 857f 	beq.w	800b8b8 <_dtoa_r+0xb88>
 800adba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adbc:	b953      	cbnz	r3, 800add4 <_dtoa_r+0xa4>
 800adbe:	4b91      	ldr	r3, [pc, #580]	; (800b004 <_dtoa_r+0x2d4>)
 800adc0:	e022      	b.n	800ae08 <_dtoa_r+0xd8>
 800adc2:	4b91      	ldr	r3, [pc, #580]	; (800b008 <_dtoa_r+0x2d8>)
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	3308      	adds	r3, #8
 800adc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	9803      	ldr	r0, [sp, #12]
 800adce:	b019      	add	sp, #100	; 0x64
 800add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add4:	4b8b      	ldr	r3, [pc, #556]	; (800b004 <_dtoa_r+0x2d4>)
 800add6:	9303      	str	r3, [sp, #12]
 800add8:	3303      	adds	r3, #3
 800adda:	e7f5      	b.n	800adc8 <_dtoa_r+0x98>
 800addc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ade0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ade4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ade8:	2200      	movs	r2, #0
 800adea:	2300      	movs	r3, #0
 800adec:	f7f5 fde6 	bl	80009bc <__aeabi_dcmpeq>
 800adf0:	4680      	mov	r8, r0
 800adf2:	b158      	cbz	r0, 800ae0c <_dtoa_r+0xdc>
 800adf4:	2301      	movs	r3, #1
 800adf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 8558 	beq.w	800b8b2 <_dtoa_r+0xb82>
 800ae02:	4882      	ldr	r0, [pc, #520]	; (800b00c <_dtoa_r+0x2dc>)
 800ae04:	6018      	str	r0, [r3, #0]
 800ae06:	1e43      	subs	r3, r0, #1
 800ae08:	9303      	str	r3, [sp, #12]
 800ae0a:	e7df      	b.n	800adcc <_dtoa_r+0x9c>
 800ae0c:	ab16      	add	r3, sp, #88	; 0x58
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	ab17      	add	r3, sp, #92	; 0x5c
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	4628      	mov	r0, r5
 800ae16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae1a:	f001 fe35 	bl	800ca88 <__d2b>
 800ae1e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ae22:	4683      	mov	fp, r0
 800ae24:	2c00      	cmp	r4, #0
 800ae26:	d07f      	beq.n	800af28 <_dtoa_r+0x1f8>
 800ae28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae2e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ae32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ae3a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ae3e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ae42:	2200      	movs	r2, #0
 800ae44:	4b72      	ldr	r3, [pc, #456]	; (800b010 <_dtoa_r+0x2e0>)
 800ae46:	f7f5 f999 	bl	800017c <__aeabi_dsub>
 800ae4a:	a365      	add	r3, pc, #404	; (adr r3, 800afe0 <_dtoa_r+0x2b0>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 fb4c 	bl	80004ec <__aeabi_dmul>
 800ae54:	a364      	add	r3, pc, #400	; (adr r3, 800afe8 <_dtoa_r+0x2b8>)
 800ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5a:	f7f5 f991 	bl	8000180 <__adddf3>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	4620      	mov	r0, r4
 800ae62:	460f      	mov	r7, r1
 800ae64:	f7f5 fad8 	bl	8000418 <__aeabi_i2d>
 800ae68:	a361      	add	r3, pc, #388	; (adr r3, 800aff0 <_dtoa_r+0x2c0>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	f7f5 fb3d 	bl	80004ec <__aeabi_dmul>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4630      	mov	r0, r6
 800ae78:	4639      	mov	r1, r7
 800ae7a:	f7f5 f981 	bl	8000180 <__adddf3>
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	f7f5 fde3 	bl	8000a4c <__aeabi_d2iz>
 800ae86:	2200      	movs	r2, #0
 800ae88:	4682      	mov	sl, r0
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	4639      	mov	r1, r7
 800ae90:	f7f5 fd9e 	bl	80009d0 <__aeabi_dcmplt>
 800ae94:	b148      	cbz	r0, 800aeaa <_dtoa_r+0x17a>
 800ae96:	4650      	mov	r0, sl
 800ae98:	f7f5 fabe 	bl	8000418 <__aeabi_i2d>
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	463b      	mov	r3, r7
 800aea0:	f7f5 fd8c 	bl	80009bc <__aeabi_dcmpeq>
 800aea4:	b908      	cbnz	r0, 800aeaa <_dtoa_r+0x17a>
 800aea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeaa:	f1ba 0f16 	cmp.w	sl, #22
 800aeae:	d858      	bhi.n	800af62 <_dtoa_r+0x232>
 800aeb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aeb4:	4b57      	ldr	r3, [pc, #348]	; (800b014 <_dtoa_r+0x2e4>)
 800aeb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f7f5 fd87 	bl	80009d0 <__aeabi_dcmplt>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d04f      	beq.n	800af66 <_dtoa_r+0x236>
 800aec6:	2300      	movs	r3, #0
 800aec8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aecc:	930f      	str	r3, [sp, #60]	; 0x3c
 800aece:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aed0:	1b1c      	subs	r4, r3, r4
 800aed2:	1e63      	subs	r3, r4, #1
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	bf49      	itett	mi
 800aed8:	f1c4 0301 	rsbmi	r3, r4, #1
 800aedc:	2300      	movpl	r3, #0
 800aede:	9306      	strmi	r3, [sp, #24]
 800aee0:	2300      	movmi	r3, #0
 800aee2:	bf54      	ite	pl
 800aee4:	9306      	strpl	r3, [sp, #24]
 800aee6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aee8:	f1ba 0f00 	cmp.w	sl, #0
 800aeec:	db3d      	blt.n	800af6a <_dtoa_r+0x23a>
 800aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aef4:	4453      	add	r3, sl
 800aef6:	9309      	str	r3, [sp, #36]	; 0x24
 800aef8:	2300      	movs	r3, #0
 800aefa:	930a      	str	r3, [sp, #40]	; 0x28
 800aefc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aefe:	2b09      	cmp	r3, #9
 800af00:	f200 808c 	bhi.w	800b01c <_dtoa_r+0x2ec>
 800af04:	2b05      	cmp	r3, #5
 800af06:	bfc4      	itt	gt
 800af08:	3b04      	subgt	r3, #4
 800af0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800af0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af0e:	bfc8      	it	gt
 800af10:	2400      	movgt	r4, #0
 800af12:	f1a3 0302 	sub.w	r3, r3, #2
 800af16:	bfd8      	it	le
 800af18:	2401      	movle	r4, #1
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	f200 808a 	bhi.w	800b034 <_dtoa_r+0x304>
 800af20:	e8df f003 	tbb	[pc, r3]
 800af24:	5b4d4f2d 	.word	0x5b4d4f2d
 800af28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800af2c:	441c      	add	r4, r3
 800af2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800af32:	2b20      	cmp	r3, #32
 800af34:	bfc3      	ittte	gt
 800af36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af3a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800af3e:	fa09 f303 	lslgt.w	r3, r9, r3
 800af42:	f1c3 0320 	rsble	r3, r3, #32
 800af46:	bfc6      	itte	gt
 800af48:	fa26 f000 	lsrgt.w	r0, r6, r0
 800af4c:	4318      	orrgt	r0, r3
 800af4e:	fa06 f003 	lslle.w	r0, r6, r3
 800af52:	f7f5 fa51 	bl	80003f8 <__aeabi_ui2d>
 800af56:	2301      	movs	r3, #1
 800af58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800af5c:	3c01      	subs	r4, #1
 800af5e:	9313      	str	r3, [sp, #76]	; 0x4c
 800af60:	e76f      	b.n	800ae42 <_dtoa_r+0x112>
 800af62:	2301      	movs	r3, #1
 800af64:	e7b2      	b.n	800aecc <_dtoa_r+0x19c>
 800af66:	900f      	str	r0, [sp, #60]	; 0x3c
 800af68:	e7b1      	b.n	800aece <_dtoa_r+0x19e>
 800af6a:	9b06      	ldr	r3, [sp, #24]
 800af6c:	eba3 030a 	sub.w	r3, r3, sl
 800af70:	9306      	str	r3, [sp, #24]
 800af72:	f1ca 0300 	rsb	r3, sl, #0
 800af76:	930a      	str	r3, [sp, #40]	; 0x28
 800af78:	2300      	movs	r3, #0
 800af7a:	930e      	str	r3, [sp, #56]	; 0x38
 800af7c:	e7be      	b.n	800aefc <_dtoa_r+0x1cc>
 800af7e:	2300      	movs	r3, #0
 800af80:	930b      	str	r3, [sp, #44]	; 0x2c
 800af82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af84:	2b00      	cmp	r3, #0
 800af86:	dc58      	bgt.n	800b03a <_dtoa_r+0x30a>
 800af88:	f04f 0901 	mov.w	r9, #1
 800af8c:	464b      	mov	r3, r9
 800af8e:	f8cd 9020 	str.w	r9, [sp, #32]
 800af92:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800af96:	2200      	movs	r2, #0
 800af98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800af9a:	6042      	str	r2, [r0, #4]
 800af9c:	2204      	movs	r2, #4
 800af9e:	f102 0614 	add.w	r6, r2, #20
 800afa2:	429e      	cmp	r6, r3
 800afa4:	6841      	ldr	r1, [r0, #4]
 800afa6:	d94e      	bls.n	800b046 <_dtoa_r+0x316>
 800afa8:	4628      	mov	r0, r5
 800afaa:	f001 f983 	bl	800c2b4 <_Balloc>
 800afae:	9003      	str	r0, [sp, #12]
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d14c      	bne.n	800b04e <_dtoa_r+0x31e>
 800afb4:	4602      	mov	r2, r0
 800afb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800afba:	4b17      	ldr	r3, [pc, #92]	; (800b018 <_dtoa_r+0x2e8>)
 800afbc:	e6cc      	b.n	800ad58 <_dtoa_r+0x28>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e7de      	b.n	800af80 <_dtoa_r+0x250>
 800afc2:	2300      	movs	r3, #0
 800afc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800afc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afc8:	eb0a 0903 	add.w	r9, sl, r3
 800afcc:	f109 0301 	add.w	r3, r9, #1
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	9308      	str	r3, [sp, #32]
 800afd4:	bfb8      	it	lt
 800afd6:	2301      	movlt	r3, #1
 800afd8:	e7dd      	b.n	800af96 <_dtoa_r+0x266>
 800afda:	2301      	movs	r3, #1
 800afdc:	e7f2      	b.n	800afc4 <_dtoa_r+0x294>
 800afde:	bf00      	nop
 800afe0:	636f4361 	.word	0x636f4361
 800afe4:	3fd287a7 	.word	0x3fd287a7
 800afe8:	8b60c8b3 	.word	0x8b60c8b3
 800afec:	3fc68a28 	.word	0x3fc68a28
 800aff0:	509f79fb 	.word	0x509f79fb
 800aff4:	3fd34413 	.word	0x3fd34413
 800aff8:	0800da1e 	.word	0x0800da1e
 800affc:	0800da35 	.word	0x0800da35
 800b000:	7ff00000 	.word	0x7ff00000
 800b004:	0800da1a 	.word	0x0800da1a
 800b008:	0800da11 	.word	0x0800da11
 800b00c:	0800d891 	.word	0x0800d891
 800b010:	3ff80000 	.word	0x3ff80000
 800b014:	0800dba0 	.word	0x0800dba0
 800b018:	0800da90 	.word	0x0800da90
 800b01c:	2401      	movs	r4, #1
 800b01e:	2300      	movs	r3, #0
 800b020:	940b      	str	r4, [sp, #44]	; 0x2c
 800b022:	9322      	str	r3, [sp, #136]	; 0x88
 800b024:	f04f 39ff 	mov.w	r9, #4294967295
 800b028:	2200      	movs	r2, #0
 800b02a:	2312      	movs	r3, #18
 800b02c:	f8cd 9020 	str.w	r9, [sp, #32]
 800b030:	9223      	str	r2, [sp, #140]	; 0x8c
 800b032:	e7b0      	b.n	800af96 <_dtoa_r+0x266>
 800b034:	2301      	movs	r3, #1
 800b036:	930b      	str	r3, [sp, #44]	; 0x2c
 800b038:	e7f4      	b.n	800b024 <_dtoa_r+0x2f4>
 800b03a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b03e:	464b      	mov	r3, r9
 800b040:	f8cd 9020 	str.w	r9, [sp, #32]
 800b044:	e7a7      	b.n	800af96 <_dtoa_r+0x266>
 800b046:	3101      	adds	r1, #1
 800b048:	6041      	str	r1, [r0, #4]
 800b04a:	0052      	lsls	r2, r2, #1
 800b04c:	e7a7      	b.n	800af9e <_dtoa_r+0x26e>
 800b04e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b050:	9a03      	ldr	r2, [sp, #12]
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	2b0e      	cmp	r3, #14
 800b058:	f200 80a8 	bhi.w	800b1ac <_dtoa_r+0x47c>
 800b05c:	2c00      	cmp	r4, #0
 800b05e:	f000 80a5 	beq.w	800b1ac <_dtoa_r+0x47c>
 800b062:	f1ba 0f00 	cmp.w	sl, #0
 800b066:	dd34      	ble.n	800b0d2 <_dtoa_r+0x3a2>
 800b068:	4a9a      	ldr	r2, [pc, #616]	; (800b2d4 <_dtoa_r+0x5a4>)
 800b06a:	f00a 030f 	and.w	r3, sl, #15
 800b06e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b072:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b076:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b07a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b07e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b082:	d016      	beq.n	800b0b2 <_dtoa_r+0x382>
 800b084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b088:	4b93      	ldr	r3, [pc, #588]	; (800b2d8 <_dtoa_r+0x5a8>)
 800b08a:	2703      	movs	r7, #3
 800b08c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b090:	f7f5 fb56 	bl	8000740 <__aeabi_ddiv>
 800b094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b098:	f004 040f 	and.w	r4, r4, #15
 800b09c:	4e8e      	ldr	r6, [pc, #568]	; (800b2d8 <_dtoa_r+0x5a8>)
 800b09e:	b954      	cbnz	r4, 800b0b6 <_dtoa_r+0x386>
 800b0a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0a8:	f7f5 fb4a 	bl	8000740 <__aeabi_ddiv>
 800b0ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b0:	e029      	b.n	800b106 <_dtoa_r+0x3d6>
 800b0b2:	2702      	movs	r7, #2
 800b0b4:	e7f2      	b.n	800b09c <_dtoa_r+0x36c>
 800b0b6:	07e1      	lsls	r1, r4, #31
 800b0b8:	d508      	bpl.n	800b0cc <_dtoa_r+0x39c>
 800b0ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0be:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0c2:	f7f5 fa13 	bl	80004ec <__aeabi_dmul>
 800b0c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0ca:	3701      	adds	r7, #1
 800b0cc:	1064      	asrs	r4, r4, #1
 800b0ce:	3608      	adds	r6, #8
 800b0d0:	e7e5      	b.n	800b09e <_dtoa_r+0x36e>
 800b0d2:	f000 80a5 	beq.w	800b220 <_dtoa_r+0x4f0>
 800b0d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0da:	f1ca 0400 	rsb	r4, sl, #0
 800b0de:	4b7d      	ldr	r3, [pc, #500]	; (800b2d4 <_dtoa_r+0x5a4>)
 800b0e0:	f004 020f 	and.w	r2, r4, #15
 800b0e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	f7f5 f9fe 	bl	80004ec <__aeabi_dmul>
 800b0f0:	2702      	movs	r7, #2
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0f8:	4e77      	ldr	r6, [pc, #476]	; (800b2d8 <_dtoa_r+0x5a8>)
 800b0fa:	1124      	asrs	r4, r4, #4
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	f040 8084 	bne.w	800b20a <_dtoa_r+0x4da>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1d2      	bne.n	800b0ac <_dtoa_r+0x37c>
 800b106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 808b 	beq.w	800b224 <_dtoa_r+0x4f4>
 800b10e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b112:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b116:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b11a:	2200      	movs	r2, #0
 800b11c:	4b6f      	ldr	r3, [pc, #444]	; (800b2dc <_dtoa_r+0x5ac>)
 800b11e:	f7f5 fc57 	bl	80009d0 <__aeabi_dcmplt>
 800b122:	2800      	cmp	r0, #0
 800b124:	d07e      	beq.n	800b224 <_dtoa_r+0x4f4>
 800b126:	9b08      	ldr	r3, [sp, #32]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d07b      	beq.n	800b224 <_dtoa_r+0x4f4>
 800b12c:	f1b9 0f00 	cmp.w	r9, #0
 800b130:	dd38      	ble.n	800b1a4 <_dtoa_r+0x474>
 800b132:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b136:	2200      	movs	r2, #0
 800b138:	4b69      	ldr	r3, [pc, #420]	; (800b2e0 <_dtoa_r+0x5b0>)
 800b13a:	f7f5 f9d7 	bl	80004ec <__aeabi_dmul>
 800b13e:	464c      	mov	r4, r9
 800b140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b144:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b148:	3701      	adds	r7, #1
 800b14a:	4638      	mov	r0, r7
 800b14c:	f7f5 f964 	bl	8000418 <__aeabi_i2d>
 800b150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b154:	f7f5 f9ca 	bl	80004ec <__aeabi_dmul>
 800b158:	2200      	movs	r2, #0
 800b15a:	4b62      	ldr	r3, [pc, #392]	; (800b2e4 <_dtoa_r+0x5b4>)
 800b15c:	f7f5 f810 	bl	8000180 <__adddf3>
 800b160:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b164:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b168:	9611      	str	r6, [sp, #68]	; 0x44
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	d15d      	bne.n	800b22a <_dtoa_r+0x4fa>
 800b16e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b172:	2200      	movs	r2, #0
 800b174:	4b5c      	ldr	r3, [pc, #368]	; (800b2e8 <_dtoa_r+0x5b8>)
 800b176:	f7f5 f801 	bl	800017c <__aeabi_dsub>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b182:	4633      	mov	r3, r6
 800b184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b186:	f7f5 fc41 	bl	8000a0c <__aeabi_dcmpgt>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	f040 829c 	bne.w	800b6c8 <_dtoa_r+0x998>
 800b190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b196:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b19a:	f7f5 fc19 	bl	80009d0 <__aeabi_dcmplt>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f040 8290 	bne.w	800b6c4 <_dtoa_r+0x994>
 800b1a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b1a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f2c0 8152 	blt.w	800b458 <_dtoa_r+0x728>
 800b1b4:	f1ba 0f0e 	cmp.w	sl, #14
 800b1b8:	f300 814e 	bgt.w	800b458 <_dtoa_r+0x728>
 800b1bc:	4b45      	ldr	r3, [pc, #276]	; (800b2d4 <_dtoa_r+0x5a4>)
 800b1be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b1ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f280 80db 	bge.w	800b388 <_dtoa_r+0x658>
 800b1d2:	9b08      	ldr	r3, [sp, #32]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f300 80d7 	bgt.w	800b388 <_dtoa_r+0x658>
 800b1da:	f040 8272 	bne.w	800b6c2 <_dtoa_r+0x992>
 800b1de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4b40      	ldr	r3, [pc, #256]	; (800b2e8 <_dtoa_r+0x5b8>)
 800b1e6:	f7f5 f981 	bl	80004ec <__aeabi_dmul>
 800b1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ee:	f7f5 fc03 	bl	80009f8 <__aeabi_dcmpge>
 800b1f2:	9c08      	ldr	r4, [sp, #32]
 800b1f4:	4626      	mov	r6, r4
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f040 8248 	bne.w	800b68c <_dtoa_r+0x95c>
 800b1fc:	2331      	movs	r3, #49	; 0x31
 800b1fe:	9f03      	ldr	r7, [sp, #12]
 800b200:	f10a 0a01 	add.w	sl, sl, #1
 800b204:	f807 3b01 	strb.w	r3, [r7], #1
 800b208:	e244      	b.n	800b694 <_dtoa_r+0x964>
 800b20a:	07e2      	lsls	r2, r4, #31
 800b20c:	d505      	bpl.n	800b21a <_dtoa_r+0x4ea>
 800b20e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b212:	f7f5 f96b 	bl	80004ec <__aeabi_dmul>
 800b216:	2301      	movs	r3, #1
 800b218:	3701      	adds	r7, #1
 800b21a:	1064      	asrs	r4, r4, #1
 800b21c:	3608      	adds	r6, #8
 800b21e:	e76d      	b.n	800b0fc <_dtoa_r+0x3cc>
 800b220:	2702      	movs	r7, #2
 800b222:	e770      	b.n	800b106 <_dtoa_r+0x3d6>
 800b224:	46d0      	mov	r8, sl
 800b226:	9c08      	ldr	r4, [sp, #32]
 800b228:	e78f      	b.n	800b14a <_dtoa_r+0x41a>
 800b22a:	9903      	ldr	r1, [sp, #12]
 800b22c:	4b29      	ldr	r3, [pc, #164]	; (800b2d4 <_dtoa_r+0x5a4>)
 800b22e:	4421      	add	r1, r4
 800b230:	9112      	str	r1, [sp, #72]	; 0x48
 800b232:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b234:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b238:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b23c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b240:	2900      	cmp	r1, #0
 800b242:	d055      	beq.n	800b2f0 <_dtoa_r+0x5c0>
 800b244:	2000      	movs	r0, #0
 800b246:	4929      	ldr	r1, [pc, #164]	; (800b2ec <_dtoa_r+0x5bc>)
 800b248:	f7f5 fa7a 	bl	8000740 <__aeabi_ddiv>
 800b24c:	463b      	mov	r3, r7
 800b24e:	4632      	mov	r2, r6
 800b250:	f7f4 ff94 	bl	800017c <__aeabi_dsub>
 800b254:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b258:	9f03      	ldr	r7, [sp, #12]
 800b25a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b25e:	f7f5 fbf5 	bl	8000a4c <__aeabi_d2iz>
 800b262:	4604      	mov	r4, r0
 800b264:	f7f5 f8d8 	bl	8000418 <__aeabi_i2d>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b270:	f7f4 ff84 	bl	800017c <__aeabi_dsub>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	3430      	adds	r4, #48	; 0x30
 800b27a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b27e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b282:	f807 4b01 	strb.w	r4, [r7], #1
 800b286:	f7f5 fba3 	bl	80009d0 <__aeabi_dcmplt>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d174      	bne.n	800b378 <_dtoa_r+0x648>
 800b28e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b292:	2000      	movs	r0, #0
 800b294:	4911      	ldr	r1, [pc, #68]	; (800b2dc <_dtoa_r+0x5ac>)
 800b296:	f7f4 ff71 	bl	800017c <__aeabi_dsub>
 800b29a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b29e:	f7f5 fb97 	bl	80009d0 <__aeabi_dcmplt>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f040 80b7 	bne.w	800b416 <_dtoa_r+0x6e6>
 800b2a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2aa:	429f      	cmp	r7, r3
 800b2ac:	f43f af7a 	beq.w	800b1a4 <_dtoa_r+0x474>
 800b2b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4b0a      	ldr	r3, [pc, #40]	; (800b2e0 <_dtoa_r+0x5b0>)
 800b2b8:	f7f5 f918 	bl	80004ec <__aeabi_dmul>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2c6:	4b06      	ldr	r3, [pc, #24]	; (800b2e0 <_dtoa_r+0x5b0>)
 800b2c8:	f7f5 f910 	bl	80004ec <__aeabi_dmul>
 800b2cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2d0:	e7c3      	b.n	800b25a <_dtoa_r+0x52a>
 800b2d2:	bf00      	nop
 800b2d4:	0800dba0 	.word	0x0800dba0
 800b2d8:	0800db78 	.word	0x0800db78
 800b2dc:	3ff00000 	.word	0x3ff00000
 800b2e0:	40240000 	.word	0x40240000
 800b2e4:	401c0000 	.word	0x401c0000
 800b2e8:	40140000 	.word	0x40140000
 800b2ec:	3fe00000 	.word	0x3fe00000
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	f7f5 f8fa 	bl	80004ec <__aeabi_dmul>
 800b2f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2fe:	9c03      	ldr	r4, [sp, #12]
 800b300:	9314      	str	r3, [sp, #80]	; 0x50
 800b302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b306:	f7f5 fba1 	bl	8000a4c <__aeabi_d2iz>
 800b30a:	9015      	str	r0, [sp, #84]	; 0x54
 800b30c:	f7f5 f884 	bl	8000418 <__aeabi_i2d>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b318:	f7f4 ff30 	bl	800017c <__aeabi_dsub>
 800b31c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b31e:	4606      	mov	r6, r0
 800b320:	3330      	adds	r3, #48	; 0x30
 800b322:	f804 3b01 	strb.w	r3, [r4], #1
 800b326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b328:	460f      	mov	r7, r1
 800b32a:	429c      	cmp	r4, r3
 800b32c:	f04f 0200 	mov.w	r2, #0
 800b330:	d124      	bne.n	800b37c <_dtoa_r+0x64c>
 800b332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b336:	4bb0      	ldr	r3, [pc, #704]	; (800b5f8 <_dtoa_r+0x8c8>)
 800b338:	f7f4 ff22 	bl	8000180 <__adddf3>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4630      	mov	r0, r6
 800b342:	4639      	mov	r1, r7
 800b344:	f7f5 fb62 	bl	8000a0c <__aeabi_dcmpgt>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d163      	bne.n	800b414 <_dtoa_r+0x6e4>
 800b34c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b350:	2000      	movs	r0, #0
 800b352:	49a9      	ldr	r1, [pc, #676]	; (800b5f8 <_dtoa_r+0x8c8>)
 800b354:	f7f4 ff12 	bl	800017c <__aeabi_dsub>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4630      	mov	r0, r6
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f5 fb36 	bl	80009d0 <__aeabi_dcmplt>
 800b364:	2800      	cmp	r0, #0
 800b366:	f43f af1d 	beq.w	800b1a4 <_dtoa_r+0x474>
 800b36a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b36c:	1e7b      	subs	r3, r7, #1
 800b36e:	9314      	str	r3, [sp, #80]	; 0x50
 800b370:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b374:	2b30      	cmp	r3, #48	; 0x30
 800b376:	d0f8      	beq.n	800b36a <_dtoa_r+0x63a>
 800b378:	46c2      	mov	sl, r8
 800b37a:	e03b      	b.n	800b3f4 <_dtoa_r+0x6c4>
 800b37c:	4b9f      	ldr	r3, [pc, #636]	; (800b5fc <_dtoa_r+0x8cc>)
 800b37e:	f7f5 f8b5 	bl	80004ec <__aeabi_dmul>
 800b382:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b386:	e7bc      	b.n	800b302 <_dtoa_r+0x5d2>
 800b388:	9f03      	ldr	r7, [sp, #12]
 800b38a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b38e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b392:	4640      	mov	r0, r8
 800b394:	4649      	mov	r1, r9
 800b396:	f7f5 f9d3 	bl	8000740 <__aeabi_ddiv>
 800b39a:	f7f5 fb57 	bl	8000a4c <__aeabi_d2iz>
 800b39e:	4604      	mov	r4, r0
 800b3a0:	f7f5 f83a 	bl	8000418 <__aeabi_i2d>
 800b3a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3a8:	f7f5 f8a0 	bl	80004ec <__aeabi_dmul>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	f7f4 fee2 	bl	800017c <__aeabi_dsub>
 800b3b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b3bc:	f807 6b01 	strb.w	r6, [r7], #1
 800b3c0:	9e03      	ldr	r6, [sp, #12]
 800b3c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b3c6:	1bbe      	subs	r6, r7, r6
 800b3c8:	45b4      	cmp	ip, r6
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	d136      	bne.n	800b43e <_dtoa_r+0x70e>
 800b3d0:	f7f4 fed6 	bl	8000180 <__adddf3>
 800b3d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3d8:	4680      	mov	r8, r0
 800b3da:	4689      	mov	r9, r1
 800b3dc:	f7f5 fb16 	bl	8000a0c <__aeabi_dcmpgt>
 800b3e0:	bb58      	cbnz	r0, 800b43a <_dtoa_r+0x70a>
 800b3e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	f7f5 fae7 	bl	80009bc <__aeabi_dcmpeq>
 800b3ee:	b108      	cbz	r0, 800b3f4 <_dtoa_r+0x6c4>
 800b3f0:	07e1      	lsls	r1, r4, #31
 800b3f2:	d422      	bmi.n	800b43a <_dtoa_r+0x70a>
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	4659      	mov	r1, fp
 800b3f8:	f000 ff9c 	bl	800c334 <_Bfree>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	703b      	strb	r3, [r7, #0]
 800b400:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b402:	f10a 0001 	add.w	r0, sl, #1
 800b406:	6018      	str	r0, [r3, #0]
 800b408:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f43f acde 	beq.w	800adcc <_dtoa_r+0x9c>
 800b410:	601f      	str	r7, [r3, #0]
 800b412:	e4db      	b.n	800adcc <_dtoa_r+0x9c>
 800b414:	4627      	mov	r7, r4
 800b416:	463b      	mov	r3, r7
 800b418:	461f      	mov	r7, r3
 800b41a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b41e:	2a39      	cmp	r2, #57	; 0x39
 800b420:	d107      	bne.n	800b432 <_dtoa_r+0x702>
 800b422:	9a03      	ldr	r2, [sp, #12]
 800b424:	429a      	cmp	r2, r3
 800b426:	d1f7      	bne.n	800b418 <_dtoa_r+0x6e8>
 800b428:	2230      	movs	r2, #48	; 0x30
 800b42a:	9903      	ldr	r1, [sp, #12]
 800b42c:	f108 0801 	add.w	r8, r8, #1
 800b430:	700a      	strb	r2, [r1, #0]
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	3201      	adds	r2, #1
 800b436:	701a      	strb	r2, [r3, #0]
 800b438:	e79e      	b.n	800b378 <_dtoa_r+0x648>
 800b43a:	46d0      	mov	r8, sl
 800b43c:	e7eb      	b.n	800b416 <_dtoa_r+0x6e6>
 800b43e:	2200      	movs	r2, #0
 800b440:	4b6e      	ldr	r3, [pc, #440]	; (800b5fc <_dtoa_r+0x8cc>)
 800b442:	f7f5 f853 	bl	80004ec <__aeabi_dmul>
 800b446:	2200      	movs	r2, #0
 800b448:	2300      	movs	r3, #0
 800b44a:	4680      	mov	r8, r0
 800b44c:	4689      	mov	r9, r1
 800b44e:	f7f5 fab5 	bl	80009bc <__aeabi_dcmpeq>
 800b452:	2800      	cmp	r0, #0
 800b454:	d09b      	beq.n	800b38e <_dtoa_r+0x65e>
 800b456:	e7cd      	b.n	800b3f4 <_dtoa_r+0x6c4>
 800b458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b45a:	2a00      	cmp	r2, #0
 800b45c:	f000 80d0 	beq.w	800b600 <_dtoa_r+0x8d0>
 800b460:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b462:	2a01      	cmp	r2, #1
 800b464:	f300 80ae 	bgt.w	800b5c4 <_dtoa_r+0x894>
 800b468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	f000 80a6 	beq.w	800b5bc <_dtoa_r+0x88c>
 800b470:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b474:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b476:	9f06      	ldr	r7, [sp, #24]
 800b478:	9a06      	ldr	r2, [sp, #24]
 800b47a:	2101      	movs	r1, #1
 800b47c:	441a      	add	r2, r3
 800b47e:	9206      	str	r2, [sp, #24]
 800b480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b482:	4628      	mov	r0, r5
 800b484:	441a      	add	r2, r3
 800b486:	9209      	str	r2, [sp, #36]	; 0x24
 800b488:	f001 f854 	bl	800c534 <__i2b>
 800b48c:	4606      	mov	r6, r0
 800b48e:	2f00      	cmp	r7, #0
 800b490:	dd0c      	ble.n	800b4ac <_dtoa_r+0x77c>
 800b492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd09      	ble.n	800b4ac <_dtoa_r+0x77c>
 800b498:	42bb      	cmp	r3, r7
 800b49a:	bfa8      	it	ge
 800b49c:	463b      	movge	r3, r7
 800b49e:	9a06      	ldr	r2, [sp, #24]
 800b4a0:	1aff      	subs	r7, r7, r3
 800b4a2:	1ad2      	subs	r2, r2, r3
 800b4a4:	9206      	str	r2, [sp, #24]
 800b4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ae:	b1f3      	cbz	r3, 800b4ee <_dtoa_r+0x7be>
 800b4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 80a8 	beq.w	800b608 <_dtoa_r+0x8d8>
 800b4b8:	2c00      	cmp	r4, #0
 800b4ba:	dd10      	ble.n	800b4de <_dtoa_r+0x7ae>
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	f001 f8f5 	bl	800c6b0 <__pow5mult>
 800b4c6:	465a      	mov	r2, fp
 800b4c8:	4601      	mov	r1, r0
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f001 f847 	bl	800c560 <__multiply>
 800b4d2:	4680      	mov	r8, r0
 800b4d4:	4659      	mov	r1, fp
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 ff2c 	bl	800c334 <_Bfree>
 800b4dc:	46c3      	mov	fp, r8
 800b4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e0:	1b1a      	subs	r2, r3, r4
 800b4e2:	d004      	beq.n	800b4ee <_dtoa_r+0x7be>
 800b4e4:	4659      	mov	r1, fp
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f001 f8e2 	bl	800c6b0 <__pow5mult>
 800b4ec:	4683      	mov	fp, r0
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f001 f81f 	bl	800c534 <__i2b>
 800b4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f340 8086 	ble.w	800b60c <_dtoa_r+0x8dc>
 800b500:	461a      	mov	r2, r3
 800b502:	4601      	mov	r1, r0
 800b504:	4628      	mov	r0, r5
 800b506:	f001 f8d3 	bl	800c6b0 <__pow5mult>
 800b50a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b50c:	4604      	mov	r4, r0
 800b50e:	2b01      	cmp	r3, #1
 800b510:	dd7f      	ble.n	800b612 <_dtoa_r+0x8e2>
 800b512:	f04f 0800 	mov.w	r8, #0
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b51c:	6918      	ldr	r0, [r3, #16]
 800b51e:	f000 ffbb 	bl	800c498 <__hi0bits>
 800b522:	f1c0 0020 	rsb	r0, r0, #32
 800b526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b528:	4418      	add	r0, r3
 800b52a:	f010 001f 	ands.w	r0, r0, #31
 800b52e:	f000 8092 	beq.w	800b656 <_dtoa_r+0x926>
 800b532:	f1c0 0320 	rsb	r3, r0, #32
 800b536:	2b04      	cmp	r3, #4
 800b538:	f340 808a 	ble.w	800b650 <_dtoa_r+0x920>
 800b53c:	f1c0 001c 	rsb	r0, r0, #28
 800b540:	9b06      	ldr	r3, [sp, #24]
 800b542:	4407      	add	r7, r0
 800b544:	4403      	add	r3, r0
 800b546:	9306      	str	r3, [sp, #24]
 800b548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54a:	4403      	add	r3, r0
 800b54c:	9309      	str	r3, [sp, #36]	; 0x24
 800b54e:	9b06      	ldr	r3, [sp, #24]
 800b550:	2b00      	cmp	r3, #0
 800b552:	dd05      	ble.n	800b560 <_dtoa_r+0x830>
 800b554:	4659      	mov	r1, fp
 800b556:	461a      	mov	r2, r3
 800b558:	4628      	mov	r0, r5
 800b55a:	f001 f903 	bl	800c764 <__lshift>
 800b55e:	4683      	mov	fp, r0
 800b560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b562:	2b00      	cmp	r3, #0
 800b564:	dd05      	ble.n	800b572 <_dtoa_r+0x842>
 800b566:	4621      	mov	r1, r4
 800b568:	461a      	mov	r2, r3
 800b56a:	4628      	mov	r0, r5
 800b56c:	f001 f8fa 	bl	800c764 <__lshift>
 800b570:	4604      	mov	r4, r0
 800b572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d070      	beq.n	800b65a <_dtoa_r+0x92a>
 800b578:	4621      	mov	r1, r4
 800b57a:	4658      	mov	r0, fp
 800b57c:	f001 f962 	bl	800c844 <__mcmp>
 800b580:	2800      	cmp	r0, #0
 800b582:	da6a      	bge.n	800b65a <_dtoa_r+0x92a>
 800b584:	2300      	movs	r3, #0
 800b586:	4659      	mov	r1, fp
 800b588:	220a      	movs	r2, #10
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 fef4 	bl	800c378 <__multadd>
 800b590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b592:	4683      	mov	fp, r0
 800b594:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 8194 	beq.w	800b8c6 <_dtoa_r+0xb96>
 800b59e:	4631      	mov	r1, r6
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	220a      	movs	r2, #10
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	f000 fee7 	bl	800c378 <__multadd>
 800b5aa:	f1b9 0f00 	cmp.w	r9, #0
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	f300 8093 	bgt.w	800b6da <_dtoa_r+0x9aa>
 800b5b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	dc57      	bgt.n	800b66a <_dtoa_r+0x93a>
 800b5ba:	e08e      	b.n	800b6da <_dtoa_r+0x9aa>
 800b5bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b5be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5c2:	e757      	b.n	800b474 <_dtoa_r+0x744>
 800b5c4:	9b08      	ldr	r3, [sp, #32]
 800b5c6:	1e5c      	subs	r4, r3, #1
 800b5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ca:	42a3      	cmp	r3, r4
 800b5cc:	bfb7      	itett	lt
 800b5ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b5d0:	1b1c      	subge	r4, r3, r4
 800b5d2:	1ae2      	sublt	r2, r4, r3
 800b5d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b5d6:	bfbe      	ittt	lt
 800b5d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b5da:	189b      	addlt	r3, r3, r2
 800b5dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b5de:	9b08      	ldr	r3, [sp, #32]
 800b5e0:	bfb8      	it	lt
 800b5e2:	2400      	movlt	r4, #0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bfbb      	ittet	lt
 800b5e8:	9b06      	ldrlt	r3, [sp, #24]
 800b5ea:	9a08      	ldrlt	r2, [sp, #32]
 800b5ec:	9f06      	ldrge	r7, [sp, #24]
 800b5ee:	1a9f      	sublt	r7, r3, r2
 800b5f0:	bfac      	ite	ge
 800b5f2:	9b08      	ldrge	r3, [sp, #32]
 800b5f4:	2300      	movlt	r3, #0
 800b5f6:	e73f      	b.n	800b478 <_dtoa_r+0x748>
 800b5f8:	3fe00000 	.word	0x3fe00000
 800b5fc:	40240000 	.word	0x40240000
 800b600:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b602:	9f06      	ldr	r7, [sp, #24]
 800b604:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b606:	e742      	b.n	800b48e <_dtoa_r+0x75e>
 800b608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b60a:	e76b      	b.n	800b4e4 <_dtoa_r+0x7b4>
 800b60c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b60e:	2b01      	cmp	r3, #1
 800b610:	dc19      	bgt.n	800b646 <_dtoa_r+0x916>
 800b612:	9b04      	ldr	r3, [sp, #16]
 800b614:	b9bb      	cbnz	r3, 800b646 <_dtoa_r+0x916>
 800b616:	9b05      	ldr	r3, [sp, #20]
 800b618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b61c:	b99b      	cbnz	r3, 800b646 <_dtoa_r+0x916>
 800b61e:	9b05      	ldr	r3, [sp, #20]
 800b620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b624:	0d1b      	lsrs	r3, r3, #20
 800b626:	051b      	lsls	r3, r3, #20
 800b628:	b183      	cbz	r3, 800b64c <_dtoa_r+0x91c>
 800b62a:	f04f 0801 	mov.w	r8, #1
 800b62e:	9b06      	ldr	r3, [sp, #24]
 800b630:	3301      	adds	r3, #1
 800b632:	9306      	str	r3, [sp, #24]
 800b634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b636:	3301      	adds	r3, #1
 800b638:	9309      	str	r3, [sp, #36]	; 0x24
 800b63a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f47f af6a 	bne.w	800b516 <_dtoa_r+0x7e6>
 800b642:	2001      	movs	r0, #1
 800b644:	e76f      	b.n	800b526 <_dtoa_r+0x7f6>
 800b646:	f04f 0800 	mov.w	r8, #0
 800b64a:	e7f6      	b.n	800b63a <_dtoa_r+0x90a>
 800b64c:	4698      	mov	r8, r3
 800b64e:	e7f4      	b.n	800b63a <_dtoa_r+0x90a>
 800b650:	f43f af7d 	beq.w	800b54e <_dtoa_r+0x81e>
 800b654:	4618      	mov	r0, r3
 800b656:	301c      	adds	r0, #28
 800b658:	e772      	b.n	800b540 <_dtoa_r+0x810>
 800b65a:	9b08      	ldr	r3, [sp, #32]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	dc36      	bgt.n	800b6ce <_dtoa_r+0x99e>
 800b660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b662:	2b02      	cmp	r3, #2
 800b664:	dd33      	ble.n	800b6ce <_dtoa_r+0x99e>
 800b666:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b66a:	f1b9 0f00 	cmp.w	r9, #0
 800b66e:	d10d      	bne.n	800b68c <_dtoa_r+0x95c>
 800b670:	4621      	mov	r1, r4
 800b672:	464b      	mov	r3, r9
 800b674:	2205      	movs	r2, #5
 800b676:	4628      	mov	r0, r5
 800b678:	f000 fe7e 	bl	800c378 <__multadd>
 800b67c:	4601      	mov	r1, r0
 800b67e:	4604      	mov	r4, r0
 800b680:	4658      	mov	r0, fp
 800b682:	f001 f8df 	bl	800c844 <__mcmp>
 800b686:	2800      	cmp	r0, #0
 800b688:	f73f adb8 	bgt.w	800b1fc <_dtoa_r+0x4cc>
 800b68c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b68e:	9f03      	ldr	r7, [sp, #12]
 800b690:	ea6f 0a03 	mvn.w	sl, r3
 800b694:	f04f 0800 	mov.w	r8, #0
 800b698:	4621      	mov	r1, r4
 800b69a:	4628      	mov	r0, r5
 800b69c:	f000 fe4a 	bl	800c334 <_Bfree>
 800b6a0:	2e00      	cmp	r6, #0
 800b6a2:	f43f aea7 	beq.w	800b3f4 <_dtoa_r+0x6c4>
 800b6a6:	f1b8 0f00 	cmp.w	r8, #0
 800b6aa:	d005      	beq.n	800b6b8 <_dtoa_r+0x988>
 800b6ac:	45b0      	cmp	r8, r6
 800b6ae:	d003      	beq.n	800b6b8 <_dtoa_r+0x988>
 800b6b0:	4641      	mov	r1, r8
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 fe3e 	bl	800c334 <_Bfree>
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f000 fe3a 	bl	800c334 <_Bfree>
 800b6c0:	e698      	b.n	800b3f4 <_dtoa_r+0x6c4>
 800b6c2:	2400      	movs	r4, #0
 800b6c4:	4626      	mov	r6, r4
 800b6c6:	e7e1      	b.n	800b68c <_dtoa_r+0x95c>
 800b6c8:	46c2      	mov	sl, r8
 800b6ca:	4626      	mov	r6, r4
 800b6cc:	e596      	b.n	800b1fc <_dtoa_r+0x4cc>
 800b6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80fd 	beq.w	800b8d4 <_dtoa_r+0xba4>
 800b6da:	2f00      	cmp	r7, #0
 800b6dc:	dd05      	ble.n	800b6ea <_dtoa_r+0x9ba>
 800b6de:	4631      	mov	r1, r6
 800b6e0:	463a      	mov	r2, r7
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f001 f83e 	bl	800c764 <__lshift>
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	f1b8 0f00 	cmp.w	r8, #0
 800b6ee:	d05c      	beq.n	800b7aa <_dtoa_r+0xa7a>
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	6871      	ldr	r1, [r6, #4]
 800b6f4:	f000 fdde 	bl	800c2b4 <_Balloc>
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	b928      	cbnz	r0, 800b708 <_dtoa_r+0x9d8>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b702:	4b7f      	ldr	r3, [pc, #508]	; (800b900 <_dtoa_r+0xbd0>)
 800b704:	f7ff bb28 	b.w	800ad58 <_dtoa_r+0x28>
 800b708:	6932      	ldr	r2, [r6, #16]
 800b70a:	f106 010c 	add.w	r1, r6, #12
 800b70e:	3202      	adds	r2, #2
 800b710:	0092      	lsls	r2, r2, #2
 800b712:	300c      	adds	r0, #12
 800b714:	f7fd fa69 	bl	8008bea <memcpy>
 800b718:	2201      	movs	r2, #1
 800b71a:	4639      	mov	r1, r7
 800b71c:	4628      	mov	r0, r5
 800b71e:	f001 f821 	bl	800c764 <__lshift>
 800b722:	46b0      	mov	r8, r6
 800b724:	4606      	mov	r6, r0
 800b726:	9b03      	ldr	r3, [sp, #12]
 800b728:	3301      	adds	r3, #1
 800b72a:	9308      	str	r3, [sp, #32]
 800b72c:	9b03      	ldr	r3, [sp, #12]
 800b72e:	444b      	add	r3, r9
 800b730:	930a      	str	r3, [sp, #40]	; 0x28
 800b732:	9b04      	ldr	r3, [sp, #16]
 800b734:	f003 0301 	and.w	r3, r3, #1
 800b738:	9309      	str	r3, [sp, #36]	; 0x24
 800b73a:	9b08      	ldr	r3, [sp, #32]
 800b73c:	4621      	mov	r1, r4
 800b73e:	3b01      	subs	r3, #1
 800b740:	4658      	mov	r0, fp
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	f7ff fa68 	bl	800ac18 <quorem>
 800b748:	4603      	mov	r3, r0
 800b74a:	4641      	mov	r1, r8
 800b74c:	3330      	adds	r3, #48	; 0x30
 800b74e:	9006      	str	r0, [sp, #24]
 800b750:	4658      	mov	r0, fp
 800b752:	930b      	str	r3, [sp, #44]	; 0x2c
 800b754:	f001 f876 	bl	800c844 <__mcmp>
 800b758:	4632      	mov	r2, r6
 800b75a:	4681      	mov	r9, r0
 800b75c:	4621      	mov	r1, r4
 800b75e:	4628      	mov	r0, r5
 800b760:	f001 f88c 	bl	800c87c <__mdiff>
 800b764:	68c2      	ldr	r2, [r0, #12]
 800b766:	4607      	mov	r7, r0
 800b768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b76a:	bb02      	cbnz	r2, 800b7ae <_dtoa_r+0xa7e>
 800b76c:	4601      	mov	r1, r0
 800b76e:	4658      	mov	r0, fp
 800b770:	f001 f868 	bl	800c844 <__mcmp>
 800b774:	4602      	mov	r2, r0
 800b776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b778:	4639      	mov	r1, r7
 800b77a:	4628      	mov	r0, r5
 800b77c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b780:	f000 fdd8 	bl	800c334 <_Bfree>
 800b784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b788:	9f08      	ldr	r7, [sp, #32]
 800b78a:	ea43 0102 	orr.w	r1, r3, r2
 800b78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b790:	430b      	orrs	r3, r1
 800b792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b794:	d10d      	bne.n	800b7b2 <_dtoa_r+0xa82>
 800b796:	2b39      	cmp	r3, #57	; 0x39
 800b798:	d029      	beq.n	800b7ee <_dtoa_r+0xabe>
 800b79a:	f1b9 0f00 	cmp.w	r9, #0
 800b79e:	dd01      	ble.n	800b7a4 <_dtoa_r+0xa74>
 800b7a0:	9b06      	ldr	r3, [sp, #24]
 800b7a2:	3331      	adds	r3, #49	; 0x31
 800b7a4:	9a04      	ldr	r2, [sp, #16]
 800b7a6:	7013      	strb	r3, [r2, #0]
 800b7a8:	e776      	b.n	800b698 <_dtoa_r+0x968>
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	e7b9      	b.n	800b722 <_dtoa_r+0x9f2>
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	e7e2      	b.n	800b778 <_dtoa_r+0xa48>
 800b7b2:	f1b9 0f00 	cmp.w	r9, #0
 800b7b6:	db06      	blt.n	800b7c6 <_dtoa_r+0xa96>
 800b7b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b7ba:	ea41 0909 	orr.w	r9, r1, r9
 800b7be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7c0:	ea59 0101 	orrs.w	r1, r9, r1
 800b7c4:	d120      	bne.n	800b808 <_dtoa_r+0xad8>
 800b7c6:	2a00      	cmp	r2, #0
 800b7c8:	ddec      	ble.n	800b7a4 <_dtoa_r+0xa74>
 800b7ca:	4659      	mov	r1, fp
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	9308      	str	r3, [sp, #32]
 800b7d2:	f000 ffc7 	bl	800c764 <__lshift>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4683      	mov	fp, r0
 800b7da:	f001 f833 	bl	800c844 <__mcmp>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	9b08      	ldr	r3, [sp, #32]
 800b7e2:	dc02      	bgt.n	800b7ea <_dtoa_r+0xaba>
 800b7e4:	d1de      	bne.n	800b7a4 <_dtoa_r+0xa74>
 800b7e6:	07da      	lsls	r2, r3, #31
 800b7e8:	d5dc      	bpl.n	800b7a4 <_dtoa_r+0xa74>
 800b7ea:	2b39      	cmp	r3, #57	; 0x39
 800b7ec:	d1d8      	bne.n	800b7a0 <_dtoa_r+0xa70>
 800b7ee:	2339      	movs	r3, #57	; 0x39
 800b7f0:	9a04      	ldr	r2, [sp, #16]
 800b7f2:	7013      	strb	r3, [r2, #0]
 800b7f4:	463b      	mov	r3, r7
 800b7f6:	461f      	mov	r7, r3
 800b7f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	2a39      	cmp	r2, #57	; 0x39
 800b800:	d050      	beq.n	800b8a4 <_dtoa_r+0xb74>
 800b802:	3201      	adds	r2, #1
 800b804:	701a      	strb	r2, [r3, #0]
 800b806:	e747      	b.n	800b698 <_dtoa_r+0x968>
 800b808:	2a00      	cmp	r2, #0
 800b80a:	dd03      	ble.n	800b814 <_dtoa_r+0xae4>
 800b80c:	2b39      	cmp	r3, #57	; 0x39
 800b80e:	d0ee      	beq.n	800b7ee <_dtoa_r+0xabe>
 800b810:	3301      	adds	r3, #1
 800b812:	e7c7      	b.n	800b7a4 <_dtoa_r+0xa74>
 800b814:	9a08      	ldr	r2, [sp, #32]
 800b816:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b818:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b81c:	428a      	cmp	r2, r1
 800b81e:	d02a      	beq.n	800b876 <_dtoa_r+0xb46>
 800b820:	4659      	mov	r1, fp
 800b822:	2300      	movs	r3, #0
 800b824:	220a      	movs	r2, #10
 800b826:	4628      	mov	r0, r5
 800b828:	f000 fda6 	bl	800c378 <__multadd>
 800b82c:	45b0      	cmp	r8, r6
 800b82e:	4683      	mov	fp, r0
 800b830:	f04f 0300 	mov.w	r3, #0
 800b834:	f04f 020a 	mov.w	r2, #10
 800b838:	4641      	mov	r1, r8
 800b83a:	4628      	mov	r0, r5
 800b83c:	d107      	bne.n	800b84e <_dtoa_r+0xb1e>
 800b83e:	f000 fd9b 	bl	800c378 <__multadd>
 800b842:	4680      	mov	r8, r0
 800b844:	4606      	mov	r6, r0
 800b846:	9b08      	ldr	r3, [sp, #32]
 800b848:	3301      	adds	r3, #1
 800b84a:	9308      	str	r3, [sp, #32]
 800b84c:	e775      	b.n	800b73a <_dtoa_r+0xa0a>
 800b84e:	f000 fd93 	bl	800c378 <__multadd>
 800b852:	4631      	mov	r1, r6
 800b854:	4680      	mov	r8, r0
 800b856:	2300      	movs	r3, #0
 800b858:	220a      	movs	r2, #10
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 fd8c 	bl	800c378 <__multadd>
 800b860:	4606      	mov	r6, r0
 800b862:	e7f0      	b.n	800b846 <_dtoa_r+0xb16>
 800b864:	f1b9 0f00 	cmp.w	r9, #0
 800b868:	bfcc      	ite	gt
 800b86a:	464f      	movgt	r7, r9
 800b86c:	2701      	movle	r7, #1
 800b86e:	f04f 0800 	mov.w	r8, #0
 800b872:	9a03      	ldr	r2, [sp, #12]
 800b874:	4417      	add	r7, r2
 800b876:	4659      	mov	r1, fp
 800b878:	2201      	movs	r2, #1
 800b87a:	4628      	mov	r0, r5
 800b87c:	9308      	str	r3, [sp, #32]
 800b87e:	f000 ff71 	bl	800c764 <__lshift>
 800b882:	4621      	mov	r1, r4
 800b884:	4683      	mov	fp, r0
 800b886:	f000 ffdd 	bl	800c844 <__mcmp>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	dcb2      	bgt.n	800b7f4 <_dtoa_r+0xac4>
 800b88e:	d102      	bne.n	800b896 <_dtoa_r+0xb66>
 800b890:	9b08      	ldr	r3, [sp, #32]
 800b892:	07db      	lsls	r3, r3, #31
 800b894:	d4ae      	bmi.n	800b7f4 <_dtoa_r+0xac4>
 800b896:	463b      	mov	r3, r7
 800b898:	461f      	mov	r7, r3
 800b89a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b89e:	2a30      	cmp	r2, #48	; 0x30
 800b8a0:	d0fa      	beq.n	800b898 <_dtoa_r+0xb68>
 800b8a2:	e6f9      	b.n	800b698 <_dtoa_r+0x968>
 800b8a4:	9a03      	ldr	r2, [sp, #12]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d1a5      	bne.n	800b7f6 <_dtoa_r+0xac6>
 800b8aa:	2331      	movs	r3, #49	; 0x31
 800b8ac:	f10a 0a01 	add.w	sl, sl, #1
 800b8b0:	e779      	b.n	800b7a6 <_dtoa_r+0xa76>
 800b8b2:	4b14      	ldr	r3, [pc, #80]	; (800b904 <_dtoa_r+0xbd4>)
 800b8b4:	f7ff baa8 	b.w	800ae08 <_dtoa_r+0xd8>
 800b8b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f47f aa81 	bne.w	800adc2 <_dtoa_r+0x92>
 800b8c0:	4b11      	ldr	r3, [pc, #68]	; (800b908 <_dtoa_r+0xbd8>)
 800b8c2:	f7ff baa1 	b.w	800ae08 <_dtoa_r+0xd8>
 800b8c6:	f1b9 0f00 	cmp.w	r9, #0
 800b8ca:	dc03      	bgt.n	800b8d4 <_dtoa_r+0xba4>
 800b8cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	f73f aecb 	bgt.w	800b66a <_dtoa_r+0x93a>
 800b8d4:	9f03      	ldr	r7, [sp, #12]
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4658      	mov	r0, fp
 800b8da:	f7ff f99d 	bl	800ac18 <quorem>
 800b8de:	9a03      	ldr	r2, [sp, #12]
 800b8e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b8e4:	f807 3b01 	strb.w	r3, [r7], #1
 800b8e8:	1aba      	subs	r2, r7, r2
 800b8ea:	4591      	cmp	r9, r2
 800b8ec:	ddba      	ble.n	800b864 <_dtoa_r+0xb34>
 800b8ee:	4659      	mov	r1, fp
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	220a      	movs	r2, #10
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f000 fd3f 	bl	800c378 <__multadd>
 800b8fa:	4683      	mov	fp, r0
 800b8fc:	e7eb      	b.n	800b8d6 <_dtoa_r+0xba6>
 800b8fe:	bf00      	nop
 800b900:	0800da90 	.word	0x0800da90
 800b904:	0800d890 	.word	0x0800d890
 800b908:	0800da11 	.word	0x0800da11

0800b90c <__sflush_r>:
 800b90c:	898a      	ldrh	r2, [r1, #12]
 800b90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b910:	4605      	mov	r5, r0
 800b912:	0710      	lsls	r0, r2, #28
 800b914:	460c      	mov	r4, r1
 800b916:	d457      	bmi.n	800b9c8 <__sflush_r+0xbc>
 800b918:	684b      	ldr	r3, [r1, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	dc04      	bgt.n	800b928 <__sflush_r+0x1c>
 800b91e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b920:	2b00      	cmp	r3, #0
 800b922:	dc01      	bgt.n	800b928 <__sflush_r+0x1c>
 800b924:	2000      	movs	r0, #0
 800b926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b92a:	2e00      	cmp	r6, #0
 800b92c:	d0fa      	beq.n	800b924 <__sflush_r+0x18>
 800b92e:	2300      	movs	r3, #0
 800b930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b934:	682f      	ldr	r7, [r5, #0]
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	d032      	beq.n	800b9a0 <__sflush_r+0x94>
 800b93a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	075a      	lsls	r2, r3, #29
 800b940:	d505      	bpl.n	800b94e <__sflush_r+0x42>
 800b942:	6863      	ldr	r3, [r4, #4]
 800b944:	1ac0      	subs	r0, r0, r3
 800b946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b948:	b10b      	cbz	r3, 800b94e <__sflush_r+0x42>
 800b94a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b94c:	1ac0      	subs	r0, r0, r3
 800b94e:	2300      	movs	r3, #0
 800b950:	4602      	mov	r2, r0
 800b952:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b954:	4628      	mov	r0, r5
 800b956:	6a21      	ldr	r1, [r4, #32]
 800b958:	47b0      	blx	r6
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	d106      	bne.n	800b96e <__sflush_r+0x62>
 800b960:	6829      	ldr	r1, [r5, #0]
 800b962:	291d      	cmp	r1, #29
 800b964:	d82c      	bhi.n	800b9c0 <__sflush_r+0xb4>
 800b966:	4a29      	ldr	r2, [pc, #164]	; (800ba0c <__sflush_r+0x100>)
 800b968:	40ca      	lsrs	r2, r1
 800b96a:	07d6      	lsls	r6, r2, #31
 800b96c:	d528      	bpl.n	800b9c0 <__sflush_r+0xb4>
 800b96e:	2200      	movs	r2, #0
 800b970:	6062      	str	r2, [r4, #4]
 800b972:	6922      	ldr	r2, [r4, #16]
 800b974:	04d9      	lsls	r1, r3, #19
 800b976:	6022      	str	r2, [r4, #0]
 800b978:	d504      	bpl.n	800b984 <__sflush_r+0x78>
 800b97a:	1c42      	adds	r2, r0, #1
 800b97c:	d101      	bne.n	800b982 <__sflush_r+0x76>
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	b903      	cbnz	r3, 800b984 <__sflush_r+0x78>
 800b982:	6560      	str	r0, [r4, #84]	; 0x54
 800b984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b986:	602f      	str	r7, [r5, #0]
 800b988:	2900      	cmp	r1, #0
 800b98a:	d0cb      	beq.n	800b924 <__sflush_r+0x18>
 800b98c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b990:	4299      	cmp	r1, r3
 800b992:	d002      	beq.n	800b99a <__sflush_r+0x8e>
 800b994:	4628      	mov	r0, r5
 800b996:	f001 f959 	bl	800cc4c <_free_r>
 800b99a:	2000      	movs	r0, #0
 800b99c:	6360      	str	r0, [r4, #52]	; 0x34
 800b99e:	e7c2      	b.n	800b926 <__sflush_r+0x1a>
 800b9a0:	6a21      	ldr	r1, [r4, #32]
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	47b0      	blx	r6
 800b9a8:	1c41      	adds	r1, r0, #1
 800b9aa:	d1c7      	bne.n	800b93c <__sflush_r+0x30>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0c4      	beq.n	800b93c <__sflush_r+0x30>
 800b9b2:	2b1d      	cmp	r3, #29
 800b9b4:	d001      	beq.n	800b9ba <__sflush_r+0xae>
 800b9b6:	2b16      	cmp	r3, #22
 800b9b8:	d101      	bne.n	800b9be <__sflush_r+0xb2>
 800b9ba:	602f      	str	r7, [r5, #0]
 800b9bc:	e7b2      	b.n	800b924 <__sflush_r+0x18>
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	e7ae      	b.n	800b926 <__sflush_r+0x1a>
 800b9c8:	690f      	ldr	r7, [r1, #16]
 800b9ca:	2f00      	cmp	r7, #0
 800b9cc:	d0aa      	beq.n	800b924 <__sflush_r+0x18>
 800b9ce:	0793      	lsls	r3, r2, #30
 800b9d0:	bf18      	it	ne
 800b9d2:	2300      	movne	r3, #0
 800b9d4:	680e      	ldr	r6, [r1, #0]
 800b9d6:	bf08      	it	eq
 800b9d8:	694b      	ldreq	r3, [r1, #20]
 800b9da:	1bf6      	subs	r6, r6, r7
 800b9dc:	600f      	str	r7, [r1, #0]
 800b9de:	608b      	str	r3, [r1, #8]
 800b9e0:	2e00      	cmp	r6, #0
 800b9e2:	dd9f      	ble.n	800b924 <__sflush_r+0x18>
 800b9e4:	4633      	mov	r3, r6
 800b9e6:	463a      	mov	r2, r7
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	6a21      	ldr	r1, [r4, #32]
 800b9ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b9f0:	47e0      	blx	ip
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	dc06      	bgt.n	800ba04 <__sflush_r+0xf8>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba00:	81a3      	strh	r3, [r4, #12]
 800ba02:	e790      	b.n	800b926 <__sflush_r+0x1a>
 800ba04:	4407      	add	r7, r0
 800ba06:	1a36      	subs	r6, r6, r0
 800ba08:	e7ea      	b.n	800b9e0 <__sflush_r+0xd4>
 800ba0a:	bf00      	nop
 800ba0c:	20400001 	.word	0x20400001

0800ba10 <_fflush_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	690b      	ldr	r3, [r1, #16]
 800ba14:	4605      	mov	r5, r0
 800ba16:	460c      	mov	r4, r1
 800ba18:	b913      	cbnz	r3, 800ba20 <_fflush_r+0x10>
 800ba1a:	2500      	movs	r5, #0
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	b118      	cbz	r0, 800ba2a <_fflush_r+0x1a>
 800ba22:	6983      	ldr	r3, [r0, #24]
 800ba24:	b90b      	cbnz	r3, 800ba2a <_fflush_r+0x1a>
 800ba26:	f7fd f81b 	bl	8008a60 <__sinit>
 800ba2a:	4b14      	ldr	r3, [pc, #80]	; (800ba7c <_fflush_r+0x6c>)
 800ba2c:	429c      	cmp	r4, r3
 800ba2e:	d11b      	bne.n	800ba68 <_fflush_r+0x58>
 800ba30:	686c      	ldr	r4, [r5, #4]
 800ba32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0ef      	beq.n	800ba1a <_fflush_r+0xa>
 800ba3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba3c:	07d0      	lsls	r0, r2, #31
 800ba3e:	d404      	bmi.n	800ba4a <_fflush_r+0x3a>
 800ba40:	0599      	lsls	r1, r3, #22
 800ba42:	d402      	bmi.n	800ba4a <_fflush_r+0x3a>
 800ba44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba46:	f7fd f8ce 	bl	8008be6 <__retarget_lock_acquire_recursive>
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	f7ff ff5d 	bl	800b90c <__sflush_r>
 800ba52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba54:	4605      	mov	r5, r0
 800ba56:	07da      	lsls	r2, r3, #31
 800ba58:	d4e0      	bmi.n	800ba1c <_fflush_r+0xc>
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	059b      	lsls	r3, r3, #22
 800ba5e:	d4dd      	bmi.n	800ba1c <_fflush_r+0xc>
 800ba60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba62:	f7fd f8c1 	bl	8008be8 <__retarget_lock_release_recursive>
 800ba66:	e7d9      	b.n	800ba1c <_fflush_r+0xc>
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <_fflush_r+0x70>)
 800ba6a:	429c      	cmp	r4, r3
 800ba6c:	d101      	bne.n	800ba72 <_fflush_r+0x62>
 800ba6e:	68ac      	ldr	r4, [r5, #8]
 800ba70:	e7df      	b.n	800ba32 <_fflush_r+0x22>
 800ba72:	4b04      	ldr	r3, [pc, #16]	; (800ba84 <_fflush_r+0x74>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	bf08      	it	eq
 800ba78:	68ec      	ldreq	r4, [r5, #12]
 800ba7a:	e7da      	b.n	800ba32 <_fflush_r+0x22>
 800ba7c:	0800d83c 	.word	0x0800d83c
 800ba80:	0800d85c 	.word	0x0800d85c
 800ba84:	0800d81c 	.word	0x0800d81c

0800ba88 <rshift>:
 800ba88:	6903      	ldr	r3, [r0, #16]
 800ba8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba92:	f100 0414 	add.w	r4, r0, #20
 800ba96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba9a:	dd46      	ble.n	800bb2a <rshift+0xa2>
 800ba9c:	f011 011f 	ands.w	r1, r1, #31
 800baa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800baa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800baa8:	d10c      	bne.n	800bac4 <rshift+0x3c>
 800baaa:	4629      	mov	r1, r5
 800baac:	f100 0710 	add.w	r7, r0, #16
 800bab0:	42b1      	cmp	r1, r6
 800bab2:	d335      	bcc.n	800bb20 <rshift+0x98>
 800bab4:	1a9b      	subs	r3, r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	1eea      	subs	r2, r5, #3
 800baba:	4296      	cmp	r6, r2
 800babc:	bf38      	it	cc
 800babe:	2300      	movcc	r3, #0
 800bac0:	4423      	add	r3, r4
 800bac2:	e015      	b.n	800baf0 <rshift+0x68>
 800bac4:	46a1      	mov	r9, r4
 800bac6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800baca:	f1c1 0820 	rsb	r8, r1, #32
 800bace:	40cf      	lsrs	r7, r1
 800bad0:	f105 0e04 	add.w	lr, r5, #4
 800bad4:	4576      	cmp	r6, lr
 800bad6:	46f4      	mov	ip, lr
 800bad8:	d816      	bhi.n	800bb08 <rshift+0x80>
 800bada:	1a9a      	subs	r2, r3, r2
 800badc:	0092      	lsls	r2, r2, #2
 800bade:	3a04      	subs	r2, #4
 800bae0:	3501      	adds	r5, #1
 800bae2:	42ae      	cmp	r6, r5
 800bae4:	bf38      	it	cc
 800bae6:	2200      	movcc	r2, #0
 800bae8:	18a3      	adds	r3, r4, r2
 800baea:	50a7      	str	r7, [r4, r2]
 800baec:	b107      	cbz	r7, 800baf0 <rshift+0x68>
 800baee:	3304      	adds	r3, #4
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	eba3 0204 	sub.w	r2, r3, r4
 800baf6:	bf08      	it	eq
 800baf8:	2300      	moveq	r3, #0
 800bafa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bafe:	6102      	str	r2, [r0, #16]
 800bb00:	bf08      	it	eq
 800bb02:	6143      	streq	r3, [r0, #20]
 800bb04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb08:	f8dc c000 	ldr.w	ip, [ip]
 800bb0c:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb10:	ea4c 0707 	orr.w	r7, ip, r7
 800bb14:	f849 7b04 	str.w	r7, [r9], #4
 800bb18:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb1c:	40cf      	lsrs	r7, r1
 800bb1e:	e7d9      	b.n	800bad4 <rshift+0x4c>
 800bb20:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb24:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb28:	e7c2      	b.n	800bab0 <rshift+0x28>
 800bb2a:	4623      	mov	r3, r4
 800bb2c:	e7e0      	b.n	800baf0 <rshift+0x68>

0800bb2e <__hexdig_fun>:
 800bb2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	d802      	bhi.n	800bb3c <__hexdig_fun+0xe>
 800bb36:	3820      	subs	r0, #32
 800bb38:	b2c0      	uxtb	r0, r0
 800bb3a:	4770      	bx	lr
 800bb3c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	d801      	bhi.n	800bb48 <__hexdig_fun+0x1a>
 800bb44:	3847      	subs	r0, #71	; 0x47
 800bb46:	e7f7      	b.n	800bb38 <__hexdig_fun+0xa>
 800bb48:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb4c:	2b05      	cmp	r3, #5
 800bb4e:	d801      	bhi.n	800bb54 <__hexdig_fun+0x26>
 800bb50:	3827      	subs	r0, #39	; 0x27
 800bb52:	e7f1      	b.n	800bb38 <__hexdig_fun+0xa>
 800bb54:	2000      	movs	r0, #0
 800bb56:	4770      	bx	lr

0800bb58 <__gethex>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	b08b      	sub	sp, #44	; 0x2c
 800bb5e:	9305      	str	r3, [sp, #20]
 800bb60:	4bb2      	ldr	r3, [pc, #712]	; (800be2c <__gethex+0x2d4>)
 800bb62:	9002      	str	r0, [sp, #8]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	468b      	mov	fp, r1
 800bb68:	4618      	mov	r0, r3
 800bb6a:	4690      	mov	r8, r2
 800bb6c:	9303      	str	r3, [sp, #12]
 800bb6e:	f7f4 faf9 	bl	8000164 <strlen>
 800bb72:	4682      	mov	sl, r0
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	f8db 2000 	ldr.w	r2, [fp]
 800bb7a:	4403      	add	r3, r0
 800bb7c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bb80:	9306      	str	r3, [sp, #24]
 800bb82:	1c93      	adds	r3, r2, #2
 800bb84:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb88:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb8c:	32fe      	adds	r2, #254	; 0xfe
 800bb8e:	18d1      	adds	r1, r2, r3
 800bb90:	461f      	mov	r7, r3
 800bb92:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb96:	9101      	str	r1, [sp, #4]
 800bb98:	2830      	cmp	r0, #48	; 0x30
 800bb9a:	d0f8      	beq.n	800bb8e <__gethex+0x36>
 800bb9c:	f7ff ffc7 	bl	800bb2e <__hexdig_fun>
 800bba0:	4604      	mov	r4, r0
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d13a      	bne.n	800bc1c <__gethex+0xc4>
 800bba6:	4652      	mov	r2, sl
 800bba8:	4638      	mov	r0, r7
 800bbaa:	9903      	ldr	r1, [sp, #12]
 800bbac:	f001 fb62 	bl	800d274 <strncmp>
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d166      	bne.n	800bc84 <__gethex+0x12c>
 800bbb6:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bbba:	eb07 060a 	add.w	r6, r7, sl
 800bbbe:	f7ff ffb6 	bl	800bb2e <__hexdig_fun>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d060      	beq.n	800bc88 <__gethex+0x130>
 800bbc6:	4633      	mov	r3, r6
 800bbc8:	7818      	ldrb	r0, [r3, #0]
 800bbca:	461f      	mov	r7, r3
 800bbcc:	2830      	cmp	r0, #48	; 0x30
 800bbce:	f103 0301 	add.w	r3, r3, #1
 800bbd2:	d0f9      	beq.n	800bbc8 <__gethex+0x70>
 800bbd4:	f7ff ffab 	bl	800bb2e <__hexdig_fun>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	fab0 f480 	clz	r4, r0
 800bbde:	4635      	mov	r5, r6
 800bbe0:	0964      	lsrs	r4, r4, #5
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	463a      	mov	r2, r7
 800bbe6:	4616      	mov	r6, r2
 800bbe8:	7830      	ldrb	r0, [r6, #0]
 800bbea:	3201      	adds	r2, #1
 800bbec:	f7ff ff9f 	bl	800bb2e <__hexdig_fun>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d1f8      	bne.n	800bbe6 <__gethex+0x8e>
 800bbf4:	4652      	mov	r2, sl
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	9903      	ldr	r1, [sp, #12]
 800bbfa:	f001 fb3b 	bl	800d274 <strncmp>
 800bbfe:	b980      	cbnz	r0, 800bc22 <__gethex+0xca>
 800bc00:	b94d      	cbnz	r5, 800bc16 <__gethex+0xbe>
 800bc02:	eb06 050a 	add.w	r5, r6, sl
 800bc06:	462a      	mov	r2, r5
 800bc08:	4616      	mov	r6, r2
 800bc0a:	7830      	ldrb	r0, [r6, #0]
 800bc0c:	3201      	adds	r2, #1
 800bc0e:	f7ff ff8e 	bl	800bb2e <__hexdig_fun>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d1f8      	bne.n	800bc08 <__gethex+0xb0>
 800bc16:	1bad      	subs	r5, r5, r6
 800bc18:	00ad      	lsls	r5, r5, #2
 800bc1a:	e004      	b.n	800bc26 <__gethex+0xce>
 800bc1c:	2400      	movs	r4, #0
 800bc1e:	4625      	mov	r5, r4
 800bc20:	e7e0      	b.n	800bbe4 <__gethex+0x8c>
 800bc22:	2d00      	cmp	r5, #0
 800bc24:	d1f7      	bne.n	800bc16 <__gethex+0xbe>
 800bc26:	7833      	ldrb	r3, [r6, #0]
 800bc28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc2c:	2b50      	cmp	r3, #80	; 0x50
 800bc2e:	d139      	bne.n	800bca4 <__gethex+0x14c>
 800bc30:	7873      	ldrb	r3, [r6, #1]
 800bc32:	2b2b      	cmp	r3, #43	; 0x2b
 800bc34:	d02a      	beq.n	800bc8c <__gethex+0x134>
 800bc36:	2b2d      	cmp	r3, #45	; 0x2d
 800bc38:	d02c      	beq.n	800bc94 <__gethex+0x13c>
 800bc3a:	f04f 0900 	mov.w	r9, #0
 800bc3e:	1c71      	adds	r1, r6, #1
 800bc40:	7808      	ldrb	r0, [r1, #0]
 800bc42:	f7ff ff74 	bl	800bb2e <__hexdig_fun>
 800bc46:	1e43      	subs	r3, r0, #1
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b18      	cmp	r3, #24
 800bc4c:	d82a      	bhi.n	800bca4 <__gethex+0x14c>
 800bc4e:	f1a0 0210 	sub.w	r2, r0, #16
 800bc52:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc56:	f7ff ff6a 	bl	800bb2e <__hexdig_fun>
 800bc5a:	1e43      	subs	r3, r0, #1
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b18      	cmp	r3, #24
 800bc60:	d91b      	bls.n	800bc9a <__gethex+0x142>
 800bc62:	f1b9 0f00 	cmp.w	r9, #0
 800bc66:	d000      	beq.n	800bc6a <__gethex+0x112>
 800bc68:	4252      	negs	r2, r2
 800bc6a:	4415      	add	r5, r2
 800bc6c:	f8cb 1000 	str.w	r1, [fp]
 800bc70:	b1d4      	cbz	r4, 800bca8 <__gethex+0x150>
 800bc72:	9b01      	ldr	r3, [sp, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bf14      	ite	ne
 800bc78:	2700      	movne	r7, #0
 800bc7a:	2706      	moveq	r7, #6
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	b00b      	add	sp, #44	; 0x2c
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	463e      	mov	r6, r7
 800bc86:	4625      	mov	r5, r4
 800bc88:	2401      	movs	r4, #1
 800bc8a:	e7cc      	b.n	800bc26 <__gethex+0xce>
 800bc8c:	f04f 0900 	mov.w	r9, #0
 800bc90:	1cb1      	adds	r1, r6, #2
 800bc92:	e7d5      	b.n	800bc40 <__gethex+0xe8>
 800bc94:	f04f 0901 	mov.w	r9, #1
 800bc98:	e7fa      	b.n	800bc90 <__gethex+0x138>
 800bc9a:	230a      	movs	r3, #10
 800bc9c:	fb03 0202 	mla	r2, r3, r2, r0
 800bca0:	3a10      	subs	r2, #16
 800bca2:	e7d6      	b.n	800bc52 <__gethex+0xfa>
 800bca4:	4631      	mov	r1, r6
 800bca6:	e7e1      	b.n	800bc6c <__gethex+0x114>
 800bca8:	4621      	mov	r1, r4
 800bcaa:	1bf3      	subs	r3, r6, r7
 800bcac:	3b01      	subs	r3, #1
 800bcae:	2b07      	cmp	r3, #7
 800bcb0:	dc0a      	bgt.n	800bcc8 <__gethex+0x170>
 800bcb2:	9802      	ldr	r0, [sp, #8]
 800bcb4:	f000 fafe 	bl	800c2b4 <_Balloc>
 800bcb8:	4604      	mov	r4, r0
 800bcba:	b940      	cbnz	r0, 800bcce <__gethex+0x176>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	21de      	movs	r1, #222	; 0xde
 800bcc0:	4b5b      	ldr	r3, [pc, #364]	; (800be30 <__gethex+0x2d8>)
 800bcc2:	485c      	ldr	r0, [pc, #368]	; (800be34 <__gethex+0x2dc>)
 800bcc4:	f001 faf8 	bl	800d2b8 <__assert_func>
 800bcc8:	3101      	adds	r1, #1
 800bcca:	105b      	asrs	r3, r3, #1
 800bccc:	e7ef      	b.n	800bcae <__gethex+0x156>
 800bcce:	f04f 0b00 	mov.w	fp, #0
 800bcd2:	f100 0914 	add.w	r9, r0, #20
 800bcd6:	f1ca 0301 	rsb	r3, sl, #1
 800bcda:	f8cd 9010 	str.w	r9, [sp, #16]
 800bcde:	f8cd b004 	str.w	fp, [sp, #4]
 800bce2:	9308      	str	r3, [sp, #32]
 800bce4:	42b7      	cmp	r7, r6
 800bce6:	d33f      	bcc.n	800bd68 <__gethex+0x210>
 800bce8:	9f04      	ldr	r7, [sp, #16]
 800bcea:	9b01      	ldr	r3, [sp, #4]
 800bcec:	f847 3b04 	str.w	r3, [r7], #4
 800bcf0:	eba7 0709 	sub.w	r7, r7, r9
 800bcf4:	10bf      	asrs	r7, r7, #2
 800bcf6:	6127      	str	r7, [r4, #16]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fbcd 	bl	800c498 <__hi0bits>
 800bcfe:	017f      	lsls	r7, r7, #5
 800bd00:	f8d8 6000 	ldr.w	r6, [r8]
 800bd04:	1a3f      	subs	r7, r7, r0
 800bd06:	42b7      	cmp	r7, r6
 800bd08:	dd62      	ble.n	800bdd0 <__gethex+0x278>
 800bd0a:	1bbf      	subs	r7, r7, r6
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 ff67 	bl	800cbe2 <__any_on>
 800bd14:	4682      	mov	sl, r0
 800bd16:	b1a8      	cbz	r0, 800bd44 <__gethex+0x1ec>
 800bd18:	f04f 0a01 	mov.w	sl, #1
 800bd1c:	1e7b      	subs	r3, r7, #1
 800bd1e:	1159      	asrs	r1, r3, #5
 800bd20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bd24:	f003 021f 	and.w	r2, r3, #31
 800bd28:	fa0a f202 	lsl.w	r2, sl, r2
 800bd2c:	420a      	tst	r2, r1
 800bd2e:	d009      	beq.n	800bd44 <__gethex+0x1ec>
 800bd30:	4553      	cmp	r3, sl
 800bd32:	dd05      	ble.n	800bd40 <__gethex+0x1e8>
 800bd34:	4620      	mov	r0, r4
 800bd36:	1eb9      	subs	r1, r7, #2
 800bd38:	f000 ff53 	bl	800cbe2 <__any_on>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d144      	bne.n	800bdca <__gethex+0x272>
 800bd40:	f04f 0a02 	mov.w	sl, #2
 800bd44:	4639      	mov	r1, r7
 800bd46:	4620      	mov	r0, r4
 800bd48:	f7ff fe9e 	bl	800ba88 <rshift>
 800bd4c:	443d      	add	r5, r7
 800bd4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd52:	42ab      	cmp	r3, r5
 800bd54:	da4a      	bge.n	800bdec <__gethex+0x294>
 800bd56:	4621      	mov	r1, r4
 800bd58:	9802      	ldr	r0, [sp, #8]
 800bd5a:	f000 faeb 	bl	800c334 <_Bfree>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd62:	27a3      	movs	r7, #163	; 0xa3
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	e789      	b.n	800bc7c <__gethex+0x124>
 800bd68:	1e73      	subs	r3, r6, #1
 800bd6a:	9a06      	ldr	r2, [sp, #24]
 800bd6c:	9307      	str	r3, [sp, #28]
 800bd6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d019      	beq.n	800bdaa <__gethex+0x252>
 800bd76:	f1bb 0f20 	cmp.w	fp, #32
 800bd7a:	d107      	bne.n	800bd8c <__gethex+0x234>
 800bd7c:	9b04      	ldr	r3, [sp, #16]
 800bd7e:	9a01      	ldr	r2, [sp, #4]
 800bd80:	f843 2b04 	str.w	r2, [r3], #4
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	2300      	movs	r3, #0
 800bd88:	469b      	mov	fp, r3
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bd90:	f7ff fecd 	bl	800bb2e <__hexdig_fun>
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	f000 000f 	and.w	r0, r0, #15
 800bd9a:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd9e:	4303      	orrs	r3, r0
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	f10b 0b04 	add.w	fp, fp, #4
 800bda6:	9b07      	ldr	r3, [sp, #28]
 800bda8:	e00d      	b.n	800bdc6 <__gethex+0x26e>
 800bdaa:	9a08      	ldr	r2, [sp, #32]
 800bdac:	1e73      	subs	r3, r6, #1
 800bdae:	4413      	add	r3, r2
 800bdb0:	42bb      	cmp	r3, r7
 800bdb2:	d3e0      	bcc.n	800bd76 <__gethex+0x21e>
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	4652      	mov	r2, sl
 800bdb8:	9903      	ldr	r1, [sp, #12]
 800bdba:	9309      	str	r3, [sp, #36]	; 0x24
 800bdbc:	f001 fa5a 	bl	800d274 <strncmp>
 800bdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d1d7      	bne.n	800bd76 <__gethex+0x21e>
 800bdc6:	461e      	mov	r6, r3
 800bdc8:	e78c      	b.n	800bce4 <__gethex+0x18c>
 800bdca:	f04f 0a03 	mov.w	sl, #3
 800bdce:	e7b9      	b.n	800bd44 <__gethex+0x1ec>
 800bdd0:	da09      	bge.n	800bde6 <__gethex+0x28e>
 800bdd2:	1bf7      	subs	r7, r6, r7
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	463a      	mov	r2, r7
 800bdd8:	9802      	ldr	r0, [sp, #8]
 800bdda:	f000 fcc3 	bl	800c764 <__lshift>
 800bdde:	4604      	mov	r4, r0
 800bde0:	1bed      	subs	r5, r5, r7
 800bde2:	f100 0914 	add.w	r9, r0, #20
 800bde6:	f04f 0a00 	mov.w	sl, #0
 800bdea:	e7b0      	b.n	800bd4e <__gethex+0x1f6>
 800bdec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bdf0:	42a8      	cmp	r0, r5
 800bdf2:	dd72      	ble.n	800beda <__gethex+0x382>
 800bdf4:	1b45      	subs	r5, r0, r5
 800bdf6:	42ae      	cmp	r6, r5
 800bdf8:	dc35      	bgt.n	800be66 <__gethex+0x30e>
 800bdfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d029      	beq.n	800be56 <__gethex+0x2fe>
 800be02:	2b03      	cmp	r3, #3
 800be04:	d02b      	beq.n	800be5e <__gethex+0x306>
 800be06:	2b01      	cmp	r3, #1
 800be08:	d11c      	bne.n	800be44 <__gethex+0x2ec>
 800be0a:	42ae      	cmp	r6, r5
 800be0c:	d11a      	bne.n	800be44 <__gethex+0x2ec>
 800be0e:	2e01      	cmp	r6, #1
 800be10:	d112      	bne.n	800be38 <__gethex+0x2e0>
 800be12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be16:	9a05      	ldr	r2, [sp, #20]
 800be18:	2762      	movs	r7, #98	; 0x62
 800be1a:	6013      	str	r3, [r2, #0]
 800be1c:	2301      	movs	r3, #1
 800be1e:	6123      	str	r3, [r4, #16]
 800be20:	f8c9 3000 	str.w	r3, [r9]
 800be24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be26:	601c      	str	r4, [r3, #0]
 800be28:	e728      	b.n	800bc7c <__gethex+0x124>
 800be2a:	bf00      	nop
 800be2c:	0800db08 	.word	0x0800db08
 800be30:	0800da90 	.word	0x0800da90
 800be34:	0800daa1 	.word	0x0800daa1
 800be38:	4620      	mov	r0, r4
 800be3a:	1e71      	subs	r1, r6, #1
 800be3c:	f000 fed1 	bl	800cbe2 <__any_on>
 800be40:	2800      	cmp	r0, #0
 800be42:	d1e6      	bne.n	800be12 <__gethex+0x2ba>
 800be44:	4621      	mov	r1, r4
 800be46:	9802      	ldr	r0, [sp, #8]
 800be48:	f000 fa74 	bl	800c334 <_Bfree>
 800be4c:	2300      	movs	r3, #0
 800be4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be50:	2750      	movs	r7, #80	; 0x50
 800be52:	6013      	str	r3, [r2, #0]
 800be54:	e712      	b.n	800bc7c <__gethex+0x124>
 800be56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1f3      	bne.n	800be44 <__gethex+0x2ec>
 800be5c:	e7d9      	b.n	800be12 <__gethex+0x2ba>
 800be5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1d6      	bne.n	800be12 <__gethex+0x2ba>
 800be64:	e7ee      	b.n	800be44 <__gethex+0x2ec>
 800be66:	1e6f      	subs	r7, r5, #1
 800be68:	f1ba 0f00 	cmp.w	sl, #0
 800be6c:	d132      	bne.n	800bed4 <__gethex+0x37c>
 800be6e:	b127      	cbz	r7, 800be7a <__gethex+0x322>
 800be70:	4639      	mov	r1, r7
 800be72:	4620      	mov	r0, r4
 800be74:	f000 feb5 	bl	800cbe2 <__any_on>
 800be78:	4682      	mov	sl, r0
 800be7a:	2101      	movs	r1, #1
 800be7c:	117b      	asrs	r3, r7, #5
 800be7e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be82:	f007 071f 	and.w	r7, r7, #31
 800be86:	fa01 f707 	lsl.w	r7, r1, r7
 800be8a:	421f      	tst	r7, r3
 800be8c:	f04f 0702 	mov.w	r7, #2
 800be90:	4629      	mov	r1, r5
 800be92:	4620      	mov	r0, r4
 800be94:	bf18      	it	ne
 800be96:	f04a 0a02 	orrne.w	sl, sl, #2
 800be9a:	1b76      	subs	r6, r6, r5
 800be9c:	f7ff fdf4 	bl	800ba88 <rshift>
 800bea0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bea4:	f1ba 0f00 	cmp.w	sl, #0
 800bea8:	d048      	beq.n	800bf3c <__gethex+0x3e4>
 800beaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d015      	beq.n	800bede <__gethex+0x386>
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d017      	beq.n	800bee6 <__gethex+0x38e>
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d109      	bne.n	800bece <__gethex+0x376>
 800beba:	f01a 0f02 	tst.w	sl, #2
 800bebe:	d006      	beq.n	800bece <__gethex+0x376>
 800bec0:	f8d9 0000 	ldr.w	r0, [r9]
 800bec4:	ea4a 0a00 	orr.w	sl, sl, r0
 800bec8:	f01a 0f01 	tst.w	sl, #1
 800becc:	d10e      	bne.n	800beec <__gethex+0x394>
 800bece:	f047 0710 	orr.w	r7, r7, #16
 800bed2:	e033      	b.n	800bf3c <__gethex+0x3e4>
 800bed4:	f04f 0a01 	mov.w	sl, #1
 800bed8:	e7cf      	b.n	800be7a <__gethex+0x322>
 800beda:	2701      	movs	r7, #1
 800bedc:	e7e2      	b.n	800bea4 <__gethex+0x34c>
 800bede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee0:	f1c3 0301 	rsb	r3, r3, #1
 800bee4:	9315      	str	r3, [sp, #84]	; 0x54
 800bee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d0f0      	beq.n	800bece <__gethex+0x376>
 800beec:	f04f 0c00 	mov.w	ip, #0
 800bef0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bef4:	f104 0314 	add.w	r3, r4, #20
 800bef8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800befc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf00:	4618      	mov	r0, r3
 800bf02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf06:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf0a:	d01c      	beq.n	800bf46 <__gethex+0x3ee>
 800bf0c:	3201      	adds	r2, #1
 800bf0e:	6002      	str	r2, [r0, #0]
 800bf10:	2f02      	cmp	r7, #2
 800bf12:	f104 0314 	add.w	r3, r4, #20
 800bf16:	d13d      	bne.n	800bf94 <__gethex+0x43c>
 800bf18:	f8d8 2000 	ldr.w	r2, [r8]
 800bf1c:	3a01      	subs	r2, #1
 800bf1e:	42b2      	cmp	r2, r6
 800bf20:	d10a      	bne.n	800bf38 <__gethex+0x3e0>
 800bf22:	2201      	movs	r2, #1
 800bf24:	1171      	asrs	r1, r6, #5
 800bf26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf2a:	f006 061f 	and.w	r6, r6, #31
 800bf2e:	fa02 f606 	lsl.w	r6, r2, r6
 800bf32:	421e      	tst	r6, r3
 800bf34:	bf18      	it	ne
 800bf36:	4617      	movne	r7, r2
 800bf38:	f047 0720 	orr.w	r7, r7, #32
 800bf3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf3e:	601c      	str	r4, [r3, #0]
 800bf40:	9b05      	ldr	r3, [sp, #20]
 800bf42:	601d      	str	r5, [r3, #0]
 800bf44:	e69a      	b.n	800bc7c <__gethex+0x124>
 800bf46:	4299      	cmp	r1, r3
 800bf48:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf4c:	d8d8      	bhi.n	800bf00 <__gethex+0x3a8>
 800bf4e:	68a3      	ldr	r3, [r4, #8]
 800bf50:	459b      	cmp	fp, r3
 800bf52:	db17      	blt.n	800bf84 <__gethex+0x42c>
 800bf54:	6861      	ldr	r1, [r4, #4]
 800bf56:	9802      	ldr	r0, [sp, #8]
 800bf58:	3101      	adds	r1, #1
 800bf5a:	f000 f9ab 	bl	800c2b4 <_Balloc>
 800bf5e:	4681      	mov	r9, r0
 800bf60:	b918      	cbnz	r0, 800bf6a <__gethex+0x412>
 800bf62:	4602      	mov	r2, r0
 800bf64:	2184      	movs	r1, #132	; 0x84
 800bf66:	4b19      	ldr	r3, [pc, #100]	; (800bfcc <__gethex+0x474>)
 800bf68:	e6ab      	b.n	800bcc2 <__gethex+0x16a>
 800bf6a:	6922      	ldr	r2, [r4, #16]
 800bf6c:	f104 010c 	add.w	r1, r4, #12
 800bf70:	3202      	adds	r2, #2
 800bf72:	0092      	lsls	r2, r2, #2
 800bf74:	300c      	adds	r0, #12
 800bf76:	f7fc fe38 	bl	8008bea <memcpy>
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	9802      	ldr	r0, [sp, #8]
 800bf7e:	f000 f9d9 	bl	800c334 <_Bfree>
 800bf82:	464c      	mov	r4, r9
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	6122      	str	r2, [r4, #16]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf90:	615a      	str	r2, [r3, #20]
 800bf92:	e7bd      	b.n	800bf10 <__gethex+0x3b8>
 800bf94:	6922      	ldr	r2, [r4, #16]
 800bf96:	455a      	cmp	r2, fp
 800bf98:	dd0b      	ble.n	800bfb2 <__gethex+0x45a>
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f7ff fd73 	bl	800ba88 <rshift>
 800bfa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfa6:	3501      	adds	r5, #1
 800bfa8:	42ab      	cmp	r3, r5
 800bfaa:	f6ff aed4 	blt.w	800bd56 <__gethex+0x1fe>
 800bfae:	2701      	movs	r7, #1
 800bfb0:	e7c2      	b.n	800bf38 <__gethex+0x3e0>
 800bfb2:	f016 061f 	ands.w	r6, r6, #31
 800bfb6:	d0fa      	beq.n	800bfae <__gethex+0x456>
 800bfb8:	4453      	add	r3, sl
 800bfba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bfbe:	f000 fa6b 	bl	800c498 <__hi0bits>
 800bfc2:	f1c6 0620 	rsb	r6, r6, #32
 800bfc6:	42b0      	cmp	r0, r6
 800bfc8:	dbe7      	blt.n	800bf9a <__gethex+0x442>
 800bfca:	e7f0      	b.n	800bfae <__gethex+0x456>
 800bfcc:	0800da90 	.word	0x0800da90

0800bfd0 <L_shift>:
 800bfd0:	f1c2 0208 	rsb	r2, r2, #8
 800bfd4:	0092      	lsls	r2, r2, #2
 800bfd6:	b570      	push	{r4, r5, r6, lr}
 800bfd8:	f1c2 0620 	rsb	r6, r2, #32
 800bfdc:	6843      	ldr	r3, [r0, #4]
 800bfde:	6804      	ldr	r4, [r0, #0]
 800bfe0:	fa03 f506 	lsl.w	r5, r3, r6
 800bfe4:	432c      	orrs	r4, r5
 800bfe6:	40d3      	lsrs	r3, r2
 800bfe8:	6004      	str	r4, [r0, #0]
 800bfea:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfee:	4288      	cmp	r0, r1
 800bff0:	d3f4      	bcc.n	800bfdc <L_shift+0xc>
 800bff2:	bd70      	pop	{r4, r5, r6, pc}

0800bff4 <__match>:
 800bff4:	b530      	push	{r4, r5, lr}
 800bff6:	6803      	ldr	r3, [r0, #0]
 800bff8:	3301      	adds	r3, #1
 800bffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bffe:	b914      	cbnz	r4, 800c006 <__match+0x12>
 800c000:	6003      	str	r3, [r0, #0]
 800c002:	2001      	movs	r0, #1
 800c004:	bd30      	pop	{r4, r5, pc}
 800c006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c00a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c00e:	2d19      	cmp	r5, #25
 800c010:	bf98      	it	ls
 800c012:	3220      	addls	r2, #32
 800c014:	42a2      	cmp	r2, r4
 800c016:	d0f0      	beq.n	800bffa <__match+0x6>
 800c018:	2000      	movs	r0, #0
 800c01a:	e7f3      	b.n	800c004 <__match+0x10>

0800c01c <__hexnan>:
 800c01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c020:	2500      	movs	r5, #0
 800c022:	680b      	ldr	r3, [r1, #0]
 800c024:	4682      	mov	sl, r0
 800c026:	115e      	asrs	r6, r3, #5
 800c028:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c02c:	f013 031f 	ands.w	r3, r3, #31
 800c030:	bf18      	it	ne
 800c032:	3604      	addne	r6, #4
 800c034:	1f37      	subs	r7, r6, #4
 800c036:	46b9      	mov	r9, r7
 800c038:	463c      	mov	r4, r7
 800c03a:	46ab      	mov	fp, r5
 800c03c:	b087      	sub	sp, #28
 800c03e:	4690      	mov	r8, r2
 800c040:	6802      	ldr	r2, [r0, #0]
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	f846 5c04 	str.w	r5, [r6, #-4]
 800c048:	9502      	str	r5, [sp, #8]
 800c04a:	7851      	ldrb	r1, [r2, #1]
 800c04c:	1c53      	adds	r3, r2, #1
 800c04e:	9303      	str	r3, [sp, #12]
 800c050:	b341      	cbz	r1, 800c0a4 <__hexnan+0x88>
 800c052:	4608      	mov	r0, r1
 800c054:	9205      	str	r2, [sp, #20]
 800c056:	9104      	str	r1, [sp, #16]
 800c058:	f7ff fd69 	bl	800bb2e <__hexdig_fun>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d14f      	bne.n	800c100 <__hexnan+0xe4>
 800c060:	9904      	ldr	r1, [sp, #16]
 800c062:	9a05      	ldr	r2, [sp, #20]
 800c064:	2920      	cmp	r1, #32
 800c066:	d818      	bhi.n	800c09a <__hexnan+0x7e>
 800c068:	9b02      	ldr	r3, [sp, #8]
 800c06a:	459b      	cmp	fp, r3
 800c06c:	dd13      	ble.n	800c096 <__hexnan+0x7a>
 800c06e:	454c      	cmp	r4, r9
 800c070:	d206      	bcs.n	800c080 <__hexnan+0x64>
 800c072:	2d07      	cmp	r5, #7
 800c074:	dc04      	bgt.n	800c080 <__hexnan+0x64>
 800c076:	462a      	mov	r2, r5
 800c078:	4649      	mov	r1, r9
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7ff ffa8 	bl	800bfd0 <L_shift>
 800c080:	4544      	cmp	r4, r8
 800c082:	d950      	bls.n	800c126 <__hexnan+0x10a>
 800c084:	2300      	movs	r3, #0
 800c086:	f1a4 0904 	sub.w	r9, r4, #4
 800c08a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c08e:	461d      	mov	r5, r3
 800c090:	464c      	mov	r4, r9
 800c092:	f8cd b008 	str.w	fp, [sp, #8]
 800c096:	9a03      	ldr	r2, [sp, #12]
 800c098:	e7d7      	b.n	800c04a <__hexnan+0x2e>
 800c09a:	2929      	cmp	r1, #41	; 0x29
 800c09c:	d156      	bne.n	800c14c <__hexnan+0x130>
 800c09e:	3202      	adds	r2, #2
 800c0a0:	f8ca 2000 	str.w	r2, [sl]
 800c0a4:	f1bb 0f00 	cmp.w	fp, #0
 800c0a8:	d050      	beq.n	800c14c <__hexnan+0x130>
 800c0aa:	454c      	cmp	r4, r9
 800c0ac:	d206      	bcs.n	800c0bc <__hexnan+0xa0>
 800c0ae:	2d07      	cmp	r5, #7
 800c0b0:	dc04      	bgt.n	800c0bc <__hexnan+0xa0>
 800c0b2:	462a      	mov	r2, r5
 800c0b4:	4649      	mov	r1, r9
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f7ff ff8a 	bl	800bfd0 <L_shift>
 800c0bc:	4544      	cmp	r4, r8
 800c0be:	d934      	bls.n	800c12a <__hexnan+0x10e>
 800c0c0:	4623      	mov	r3, r4
 800c0c2:	f1a8 0204 	sub.w	r2, r8, #4
 800c0c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0ca:	429f      	cmp	r7, r3
 800c0cc:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0d0:	d2f9      	bcs.n	800c0c6 <__hexnan+0xaa>
 800c0d2:	1b3b      	subs	r3, r7, r4
 800c0d4:	f023 0303 	bic.w	r3, r3, #3
 800c0d8:	3304      	adds	r3, #4
 800c0da:	3401      	adds	r4, #1
 800c0dc:	3e03      	subs	r6, #3
 800c0de:	42b4      	cmp	r4, r6
 800c0e0:	bf88      	it	hi
 800c0e2:	2304      	movhi	r3, #4
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	4443      	add	r3, r8
 800c0e8:	f843 2b04 	str.w	r2, [r3], #4
 800c0ec:	429f      	cmp	r7, r3
 800c0ee:	d2fb      	bcs.n	800c0e8 <__hexnan+0xcc>
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	b91b      	cbnz	r3, 800c0fc <__hexnan+0xe0>
 800c0f4:	4547      	cmp	r7, r8
 800c0f6:	d127      	bne.n	800c148 <__hexnan+0x12c>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	603b      	str	r3, [r7, #0]
 800c0fc:	2005      	movs	r0, #5
 800c0fe:	e026      	b.n	800c14e <__hexnan+0x132>
 800c100:	3501      	adds	r5, #1
 800c102:	2d08      	cmp	r5, #8
 800c104:	f10b 0b01 	add.w	fp, fp, #1
 800c108:	dd06      	ble.n	800c118 <__hexnan+0xfc>
 800c10a:	4544      	cmp	r4, r8
 800c10c:	d9c3      	bls.n	800c096 <__hexnan+0x7a>
 800c10e:	2300      	movs	r3, #0
 800c110:	2501      	movs	r5, #1
 800c112:	f844 3c04 	str.w	r3, [r4, #-4]
 800c116:	3c04      	subs	r4, #4
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	f000 000f 	and.w	r0, r0, #15
 800c11e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	e7b7      	b.n	800c096 <__hexnan+0x7a>
 800c126:	2508      	movs	r5, #8
 800c128:	e7b5      	b.n	800c096 <__hexnan+0x7a>
 800c12a:	9b01      	ldr	r3, [sp, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d0df      	beq.n	800c0f0 <__hexnan+0xd4>
 800c130:	f04f 32ff 	mov.w	r2, #4294967295
 800c134:	f1c3 0320 	rsb	r3, r3, #32
 800c138:	fa22 f303 	lsr.w	r3, r2, r3
 800c13c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c140:	401a      	ands	r2, r3
 800c142:	f846 2c04 	str.w	r2, [r6, #-4]
 800c146:	e7d3      	b.n	800c0f0 <__hexnan+0xd4>
 800c148:	3f04      	subs	r7, #4
 800c14a:	e7d1      	b.n	800c0f0 <__hexnan+0xd4>
 800c14c:	2004      	movs	r0, #4
 800c14e:	b007      	add	sp, #28
 800c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c154 <_localeconv_r>:
 800c154:	4800      	ldr	r0, [pc, #0]	; (800c158 <_localeconv_r+0x4>)
 800c156:	4770      	bx	lr
 800c158:	200001b8 	.word	0x200001b8

0800c15c <_lseek_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	4611      	mov	r1, r2
 800c164:	2200      	movs	r2, #0
 800c166:	4d05      	ldr	r5, [pc, #20]	; (800c17c <_lseek_r+0x20>)
 800c168:	602a      	str	r2, [r5, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	f7f6 fcd8 	bl	8002b20 <_lseek>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	d102      	bne.n	800c17a <_lseek_r+0x1e>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	b103      	cbz	r3, 800c17a <_lseek_r+0x1e>
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	20002590 	.word	0x20002590

0800c180 <__swhatbuf_r>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	460e      	mov	r6, r1
 800c184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c188:	4614      	mov	r4, r2
 800c18a:	2900      	cmp	r1, #0
 800c18c:	461d      	mov	r5, r3
 800c18e:	b096      	sub	sp, #88	; 0x58
 800c190:	da08      	bge.n	800c1a4 <__swhatbuf_r+0x24>
 800c192:	2200      	movs	r2, #0
 800c194:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c198:	602a      	str	r2, [r5, #0]
 800c19a:	061a      	lsls	r2, r3, #24
 800c19c:	d410      	bmi.n	800c1c0 <__swhatbuf_r+0x40>
 800c19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1a2:	e00e      	b.n	800c1c2 <__swhatbuf_r+0x42>
 800c1a4:	466a      	mov	r2, sp
 800c1a6:	f001 f8b7 	bl	800d318 <_fstat_r>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	dbf1      	blt.n	800c192 <__swhatbuf_r+0x12>
 800c1ae:	9a01      	ldr	r2, [sp, #4]
 800c1b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1b8:	425a      	negs	r2, r3
 800c1ba:	415a      	adcs	r2, r3
 800c1bc:	602a      	str	r2, [r5, #0]
 800c1be:	e7ee      	b.n	800c19e <__swhatbuf_r+0x1e>
 800c1c0:	2340      	movs	r3, #64	; 0x40
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	b016      	add	sp, #88	; 0x58
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1cc <__smakebuf_r>:
 800c1cc:	898b      	ldrh	r3, [r1, #12]
 800c1ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1d0:	079d      	lsls	r5, r3, #30
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	d507      	bpl.n	800c1e8 <__smakebuf_r+0x1c>
 800c1d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	6123      	str	r3, [r4, #16]
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	6163      	str	r3, [r4, #20]
 800c1e4:	b002      	add	sp, #8
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	466a      	mov	r2, sp
 800c1ea:	ab01      	add	r3, sp, #4
 800c1ec:	f7ff ffc8 	bl	800c180 <__swhatbuf_r>
 800c1f0:	9900      	ldr	r1, [sp, #0]
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f7fc fd2f 	bl	8008c58 <_malloc_r>
 800c1fa:	b948      	cbnz	r0, 800c210 <__smakebuf_r+0x44>
 800c1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c200:	059a      	lsls	r2, r3, #22
 800c202:	d4ef      	bmi.n	800c1e4 <__smakebuf_r+0x18>
 800c204:	f023 0303 	bic.w	r3, r3, #3
 800c208:	f043 0302 	orr.w	r3, r3, #2
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	e7e3      	b.n	800c1d8 <__smakebuf_r+0xc>
 800c210:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <__smakebuf_r+0x7c>)
 800c212:	62b3      	str	r3, [r6, #40]	; 0x28
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	6020      	str	r0, [r4, #0]
 800c218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	9b00      	ldr	r3, [sp, #0]
 800c220:	6120      	str	r0, [r4, #16]
 800c222:	6163      	str	r3, [r4, #20]
 800c224:	9b01      	ldr	r3, [sp, #4]
 800c226:	b15b      	cbz	r3, 800c240 <__smakebuf_r+0x74>
 800c228:	4630      	mov	r0, r6
 800c22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c22e:	f001 f885 	bl	800d33c <_isatty_r>
 800c232:	b128      	cbz	r0, 800c240 <__smakebuf_r+0x74>
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f023 0303 	bic.w	r3, r3, #3
 800c23a:	f043 0301 	orr.w	r3, r3, #1
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	89a0      	ldrh	r0, [r4, #12]
 800c242:	4305      	orrs	r5, r0
 800c244:	81a5      	strh	r5, [r4, #12]
 800c246:	e7cd      	b.n	800c1e4 <__smakebuf_r+0x18>
 800c248:	080089f9 	.word	0x080089f9

0800c24c <malloc>:
 800c24c:	4b02      	ldr	r3, [pc, #8]	; (800c258 <malloc+0xc>)
 800c24e:	4601      	mov	r1, r0
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f7fc bd01 	b.w	8008c58 <_malloc_r>
 800c256:	bf00      	nop
 800c258:	20000060 	.word	0x20000060

0800c25c <__ascii_mbtowc>:
 800c25c:	b082      	sub	sp, #8
 800c25e:	b901      	cbnz	r1, 800c262 <__ascii_mbtowc+0x6>
 800c260:	a901      	add	r1, sp, #4
 800c262:	b142      	cbz	r2, 800c276 <__ascii_mbtowc+0x1a>
 800c264:	b14b      	cbz	r3, 800c27a <__ascii_mbtowc+0x1e>
 800c266:	7813      	ldrb	r3, [r2, #0]
 800c268:	600b      	str	r3, [r1, #0]
 800c26a:	7812      	ldrb	r2, [r2, #0]
 800c26c:	1e10      	subs	r0, r2, #0
 800c26e:	bf18      	it	ne
 800c270:	2001      	movne	r0, #1
 800c272:	b002      	add	sp, #8
 800c274:	4770      	bx	lr
 800c276:	4610      	mov	r0, r2
 800c278:	e7fb      	b.n	800c272 <__ascii_mbtowc+0x16>
 800c27a:	f06f 0001 	mvn.w	r0, #1
 800c27e:	e7f8      	b.n	800c272 <__ascii_mbtowc+0x16>

0800c280 <memchr>:
 800c280:	4603      	mov	r3, r0
 800c282:	b510      	push	{r4, lr}
 800c284:	b2c9      	uxtb	r1, r1
 800c286:	4402      	add	r2, r0
 800c288:	4293      	cmp	r3, r2
 800c28a:	4618      	mov	r0, r3
 800c28c:	d101      	bne.n	800c292 <memchr+0x12>
 800c28e:	2000      	movs	r0, #0
 800c290:	e003      	b.n	800c29a <memchr+0x1a>
 800c292:	7804      	ldrb	r4, [r0, #0]
 800c294:	3301      	adds	r3, #1
 800c296:	428c      	cmp	r4, r1
 800c298:	d1f6      	bne.n	800c288 <memchr+0x8>
 800c29a:	bd10      	pop	{r4, pc}

0800c29c <__malloc_lock>:
 800c29c:	4801      	ldr	r0, [pc, #4]	; (800c2a4 <__malloc_lock+0x8>)
 800c29e:	f7fc bca2 	b.w	8008be6 <__retarget_lock_acquire_recursive>
 800c2a2:	bf00      	nop
 800c2a4:	20002584 	.word	0x20002584

0800c2a8 <__malloc_unlock>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <__malloc_unlock+0x8>)
 800c2aa:	f7fc bc9d 	b.w	8008be8 <__retarget_lock_release_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	20002584 	.word	0x20002584

0800c2b4 <_Balloc>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	b976      	cbnz	r6, 800c2dc <_Balloc+0x28>
 800c2be:	2010      	movs	r0, #16
 800c2c0:	f7ff ffc4 	bl	800c24c <malloc>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	6260      	str	r0, [r4, #36]	; 0x24
 800c2c8:	b920      	cbnz	r0, 800c2d4 <_Balloc+0x20>
 800c2ca:	2166      	movs	r1, #102	; 0x66
 800c2cc:	4b17      	ldr	r3, [pc, #92]	; (800c32c <_Balloc+0x78>)
 800c2ce:	4818      	ldr	r0, [pc, #96]	; (800c330 <_Balloc+0x7c>)
 800c2d0:	f000 fff2 	bl	800d2b8 <__assert_func>
 800c2d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2d8:	6006      	str	r6, [r0, #0]
 800c2da:	60c6      	str	r6, [r0, #12]
 800c2dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2de:	68f3      	ldr	r3, [r6, #12]
 800c2e0:	b183      	cbz	r3, 800c304 <_Balloc+0x50>
 800c2e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2ea:	b9b8      	cbnz	r0, 800c31c <_Balloc+0x68>
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c2f2:	1d72      	adds	r2, r6, #5
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	0092      	lsls	r2, r2, #2
 800c2f8:	f000 fc94 	bl	800cc24 <_calloc_r>
 800c2fc:	b160      	cbz	r0, 800c318 <_Balloc+0x64>
 800c2fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c302:	e00e      	b.n	800c322 <_Balloc+0x6e>
 800c304:	2221      	movs	r2, #33	; 0x21
 800c306:	2104      	movs	r1, #4
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fc8b 	bl	800cc24 <_calloc_r>
 800c30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c310:	60f0      	str	r0, [r6, #12]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e4      	bne.n	800c2e2 <_Balloc+0x2e>
 800c318:	2000      	movs	r0, #0
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	6802      	ldr	r2, [r0, #0]
 800c31e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c322:	2300      	movs	r3, #0
 800c324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c328:	e7f7      	b.n	800c31a <_Balloc+0x66>
 800c32a:	bf00      	nop
 800c32c:	0800da1e 	.word	0x0800da1e
 800c330:	0800db1c 	.word	0x0800db1c

0800c334 <_Bfree>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c338:	4605      	mov	r5, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	b976      	cbnz	r6, 800c35c <_Bfree+0x28>
 800c33e:	2010      	movs	r0, #16
 800c340:	f7ff ff84 	bl	800c24c <malloc>
 800c344:	4602      	mov	r2, r0
 800c346:	6268      	str	r0, [r5, #36]	; 0x24
 800c348:	b920      	cbnz	r0, 800c354 <_Bfree+0x20>
 800c34a:	218a      	movs	r1, #138	; 0x8a
 800c34c:	4b08      	ldr	r3, [pc, #32]	; (800c370 <_Bfree+0x3c>)
 800c34e:	4809      	ldr	r0, [pc, #36]	; (800c374 <_Bfree+0x40>)
 800c350:	f000 ffb2 	bl	800d2b8 <__assert_func>
 800c354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c358:	6006      	str	r6, [r0, #0]
 800c35a:	60c6      	str	r6, [r0, #12]
 800c35c:	b13c      	cbz	r4, 800c36e <_Bfree+0x3a>
 800c35e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c360:	6862      	ldr	r2, [r4, #4]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c368:	6021      	str	r1, [r4, #0]
 800c36a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	0800da1e 	.word	0x0800da1e
 800c374:	0800db1c 	.word	0x0800db1c

0800c378 <__multadd>:
 800c378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37c:	4607      	mov	r7, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	461e      	mov	r6, r3
 800c382:	2000      	movs	r0, #0
 800c384:	690d      	ldr	r5, [r1, #16]
 800c386:	f101 0c14 	add.w	ip, r1, #20
 800c38a:	f8dc 3000 	ldr.w	r3, [ip]
 800c38e:	3001      	adds	r0, #1
 800c390:	b299      	uxth	r1, r3
 800c392:	fb02 6101 	mla	r1, r2, r1, r6
 800c396:	0c1e      	lsrs	r6, r3, #16
 800c398:	0c0b      	lsrs	r3, r1, #16
 800c39a:	fb02 3306 	mla	r3, r2, r6, r3
 800c39e:	b289      	uxth	r1, r1
 800c3a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3a4:	4285      	cmp	r5, r0
 800c3a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c3ae:	dcec      	bgt.n	800c38a <__multadd+0x12>
 800c3b0:	b30e      	cbz	r6, 800c3f6 <__multadd+0x7e>
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	42ab      	cmp	r3, r5
 800c3b6:	dc19      	bgt.n	800c3ec <__multadd+0x74>
 800c3b8:	6861      	ldr	r1, [r4, #4]
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	3101      	adds	r1, #1
 800c3be:	f7ff ff79 	bl	800c2b4 <_Balloc>
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	b928      	cbnz	r0, 800c3d2 <__multadd+0x5a>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	21b5      	movs	r1, #181	; 0xb5
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <__multadd+0x84>)
 800c3cc:	480c      	ldr	r0, [pc, #48]	; (800c400 <__multadd+0x88>)
 800c3ce:	f000 ff73 	bl	800d2b8 <__assert_func>
 800c3d2:	6922      	ldr	r2, [r4, #16]
 800c3d4:	f104 010c 	add.w	r1, r4, #12
 800c3d8:	3202      	adds	r2, #2
 800c3da:	0092      	lsls	r2, r2, #2
 800c3dc:	300c      	adds	r0, #12
 800c3de:	f7fc fc04 	bl	8008bea <memcpy>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	f7ff ffa5 	bl	800c334 <_Bfree>
 800c3ea:	4644      	mov	r4, r8
 800c3ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	615e      	str	r6, [r3, #20]
 800c3f4:	6125      	str	r5, [r4, #16]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3fc:	0800da90 	.word	0x0800da90
 800c400:	0800db1c 	.word	0x0800db1c

0800c404 <__s2b>:
 800c404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c408:	4615      	mov	r5, r2
 800c40a:	2209      	movs	r2, #9
 800c40c:	461f      	mov	r7, r3
 800c40e:	3308      	adds	r3, #8
 800c410:	460c      	mov	r4, r1
 800c412:	fb93 f3f2 	sdiv	r3, r3, r2
 800c416:	4606      	mov	r6, r0
 800c418:	2201      	movs	r2, #1
 800c41a:	2100      	movs	r1, #0
 800c41c:	429a      	cmp	r2, r3
 800c41e:	db09      	blt.n	800c434 <__s2b+0x30>
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff ff47 	bl	800c2b4 <_Balloc>
 800c426:	b940      	cbnz	r0, 800c43a <__s2b+0x36>
 800c428:	4602      	mov	r2, r0
 800c42a:	21ce      	movs	r1, #206	; 0xce
 800c42c:	4b18      	ldr	r3, [pc, #96]	; (800c490 <__s2b+0x8c>)
 800c42e:	4819      	ldr	r0, [pc, #100]	; (800c494 <__s2b+0x90>)
 800c430:	f000 ff42 	bl	800d2b8 <__assert_func>
 800c434:	0052      	lsls	r2, r2, #1
 800c436:	3101      	adds	r1, #1
 800c438:	e7f0      	b.n	800c41c <__s2b+0x18>
 800c43a:	9b08      	ldr	r3, [sp, #32]
 800c43c:	2d09      	cmp	r5, #9
 800c43e:	6143      	str	r3, [r0, #20]
 800c440:	f04f 0301 	mov.w	r3, #1
 800c444:	6103      	str	r3, [r0, #16]
 800c446:	dd16      	ble.n	800c476 <__s2b+0x72>
 800c448:	f104 0909 	add.w	r9, r4, #9
 800c44c:	46c8      	mov	r8, r9
 800c44e:	442c      	add	r4, r5
 800c450:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c454:	4601      	mov	r1, r0
 800c456:	220a      	movs	r2, #10
 800c458:	4630      	mov	r0, r6
 800c45a:	3b30      	subs	r3, #48	; 0x30
 800c45c:	f7ff ff8c 	bl	800c378 <__multadd>
 800c460:	45a0      	cmp	r8, r4
 800c462:	d1f5      	bne.n	800c450 <__s2b+0x4c>
 800c464:	f1a5 0408 	sub.w	r4, r5, #8
 800c468:	444c      	add	r4, r9
 800c46a:	1b2d      	subs	r5, r5, r4
 800c46c:	1963      	adds	r3, r4, r5
 800c46e:	42bb      	cmp	r3, r7
 800c470:	db04      	blt.n	800c47c <__s2b+0x78>
 800c472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c476:	2509      	movs	r5, #9
 800c478:	340a      	adds	r4, #10
 800c47a:	e7f6      	b.n	800c46a <__s2b+0x66>
 800c47c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c480:	4601      	mov	r1, r0
 800c482:	220a      	movs	r2, #10
 800c484:	4630      	mov	r0, r6
 800c486:	3b30      	subs	r3, #48	; 0x30
 800c488:	f7ff ff76 	bl	800c378 <__multadd>
 800c48c:	e7ee      	b.n	800c46c <__s2b+0x68>
 800c48e:	bf00      	nop
 800c490:	0800da90 	.word	0x0800da90
 800c494:	0800db1c 	.word	0x0800db1c

0800c498 <__hi0bits>:
 800c498:	0c02      	lsrs	r2, r0, #16
 800c49a:	0412      	lsls	r2, r2, #16
 800c49c:	4603      	mov	r3, r0
 800c49e:	b9ca      	cbnz	r2, 800c4d4 <__hi0bits+0x3c>
 800c4a0:	0403      	lsls	r3, r0, #16
 800c4a2:	2010      	movs	r0, #16
 800c4a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c4a8:	bf04      	itt	eq
 800c4aa:	021b      	lsleq	r3, r3, #8
 800c4ac:	3008      	addeq	r0, #8
 800c4ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c4b2:	bf04      	itt	eq
 800c4b4:	011b      	lsleq	r3, r3, #4
 800c4b6:	3004      	addeq	r0, #4
 800c4b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c4bc:	bf04      	itt	eq
 800c4be:	009b      	lsleq	r3, r3, #2
 800c4c0:	3002      	addeq	r0, #2
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	db05      	blt.n	800c4d2 <__hi0bits+0x3a>
 800c4c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c4ca:	f100 0001 	add.w	r0, r0, #1
 800c4ce:	bf08      	it	eq
 800c4d0:	2020      	moveq	r0, #32
 800c4d2:	4770      	bx	lr
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e7e5      	b.n	800c4a4 <__hi0bits+0xc>

0800c4d8 <__lo0bits>:
 800c4d8:	6803      	ldr	r3, [r0, #0]
 800c4da:	4602      	mov	r2, r0
 800c4dc:	f013 0007 	ands.w	r0, r3, #7
 800c4e0:	d00b      	beq.n	800c4fa <__lo0bits+0x22>
 800c4e2:	07d9      	lsls	r1, r3, #31
 800c4e4:	d421      	bmi.n	800c52a <__lo0bits+0x52>
 800c4e6:	0798      	lsls	r0, r3, #30
 800c4e8:	bf49      	itett	mi
 800c4ea:	085b      	lsrmi	r3, r3, #1
 800c4ec:	089b      	lsrpl	r3, r3, #2
 800c4ee:	2001      	movmi	r0, #1
 800c4f0:	6013      	strmi	r3, [r2, #0]
 800c4f2:	bf5c      	itt	pl
 800c4f4:	2002      	movpl	r0, #2
 800c4f6:	6013      	strpl	r3, [r2, #0]
 800c4f8:	4770      	bx	lr
 800c4fa:	b299      	uxth	r1, r3
 800c4fc:	b909      	cbnz	r1, 800c502 <__lo0bits+0x2a>
 800c4fe:	2010      	movs	r0, #16
 800c500:	0c1b      	lsrs	r3, r3, #16
 800c502:	b2d9      	uxtb	r1, r3
 800c504:	b909      	cbnz	r1, 800c50a <__lo0bits+0x32>
 800c506:	3008      	adds	r0, #8
 800c508:	0a1b      	lsrs	r3, r3, #8
 800c50a:	0719      	lsls	r1, r3, #28
 800c50c:	bf04      	itt	eq
 800c50e:	091b      	lsreq	r3, r3, #4
 800c510:	3004      	addeq	r0, #4
 800c512:	0799      	lsls	r1, r3, #30
 800c514:	bf04      	itt	eq
 800c516:	089b      	lsreq	r3, r3, #2
 800c518:	3002      	addeq	r0, #2
 800c51a:	07d9      	lsls	r1, r3, #31
 800c51c:	d403      	bmi.n	800c526 <__lo0bits+0x4e>
 800c51e:	085b      	lsrs	r3, r3, #1
 800c520:	f100 0001 	add.w	r0, r0, #1
 800c524:	d003      	beq.n	800c52e <__lo0bits+0x56>
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	4770      	bx	lr
 800c52a:	2000      	movs	r0, #0
 800c52c:	4770      	bx	lr
 800c52e:	2020      	movs	r0, #32
 800c530:	4770      	bx	lr
	...

0800c534 <__i2b>:
 800c534:	b510      	push	{r4, lr}
 800c536:	460c      	mov	r4, r1
 800c538:	2101      	movs	r1, #1
 800c53a:	f7ff febb 	bl	800c2b4 <_Balloc>
 800c53e:	4602      	mov	r2, r0
 800c540:	b928      	cbnz	r0, 800c54e <__i2b+0x1a>
 800c542:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c546:	4b04      	ldr	r3, [pc, #16]	; (800c558 <__i2b+0x24>)
 800c548:	4804      	ldr	r0, [pc, #16]	; (800c55c <__i2b+0x28>)
 800c54a:	f000 feb5 	bl	800d2b8 <__assert_func>
 800c54e:	2301      	movs	r3, #1
 800c550:	6144      	str	r4, [r0, #20]
 800c552:	6103      	str	r3, [r0, #16]
 800c554:	bd10      	pop	{r4, pc}
 800c556:	bf00      	nop
 800c558:	0800da90 	.word	0x0800da90
 800c55c:	0800db1c 	.word	0x0800db1c

0800c560 <__multiply>:
 800c560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c564:	4691      	mov	r9, r2
 800c566:	690a      	ldr	r2, [r1, #16]
 800c568:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c56c:	460c      	mov	r4, r1
 800c56e:	429a      	cmp	r2, r3
 800c570:	bfbe      	ittt	lt
 800c572:	460b      	movlt	r3, r1
 800c574:	464c      	movlt	r4, r9
 800c576:	4699      	movlt	r9, r3
 800c578:	6927      	ldr	r7, [r4, #16]
 800c57a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c57e:	68a3      	ldr	r3, [r4, #8]
 800c580:	6861      	ldr	r1, [r4, #4]
 800c582:	eb07 060a 	add.w	r6, r7, sl
 800c586:	42b3      	cmp	r3, r6
 800c588:	b085      	sub	sp, #20
 800c58a:	bfb8      	it	lt
 800c58c:	3101      	addlt	r1, #1
 800c58e:	f7ff fe91 	bl	800c2b4 <_Balloc>
 800c592:	b930      	cbnz	r0, 800c5a2 <__multiply+0x42>
 800c594:	4602      	mov	r2, r0
 800c596:	f240 115d 	movw	r1, #349	; 0x15d
 800c59a:	4b43      	ldr	r3, [pc, #268]	; (800c6a8 <__multiply+0x148>)
 800c59c:	4843      	ldr	r0, [pc, #268]	; (800c6ac <__multiply+0x14c>)
 800c59e:	f000 fe8b 	bl	800d2b8 <__assert_func>
 800c5a2:	f100 0514 	add.w	r5, r0, #20
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5ae:	4543      	cmp	r3, r8
 800c5b0:	d321      	bcc.n	800c5f6 <__multiply+0x96>
 800c5b2:	f104 0314 	add.w	r3, r4, #20
 800c5b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5ba:	f109 0314 	add.w	r3, r9, #20
 800c5be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5c2:	9202      	str	r2, [sp, #8]
 800c5c4:	1b3a      	subs	r2, r7, r4
 800c5c6:	3a15      	subs	r2, #21
 800c5c8:	f022 0203 	bic.w	r2, r2, #3
 800c5cc:	3204      	adds	r2, #4
 800c5ce:	f104 0115 	add.w	r1, r4, #21
 800c5d2:	428f      	cmp	r7, r1
 800c5d4:	bf38      	it	cc
 800c5d6:	2204      	movcc	r2, #4
 800c5d8:	9201      	str	r2, [sp, #4]
 800c5da:	9a02      	ldr	r2, [sp, #8]
 800c5dc:	9303      	str	r3, [sp, #12]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d80c      	bhi.n	800c5fc <__multiply+0x9c>
 800c5e2:	2e00      	cmp	r6, #0
 800c5e4:	dd03      	ble.n	800c5ee <__multiply+0x8e>
 800c5e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d059      	beq.n	800c6a2 <__multiply+0x142>
 800c5ee:	6106      	str	r6, [r0, #16]
 800c5f0:	b005      	add	sp, #20
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	f843 2b04 	str.w	r2, [r3], #4
 800c5fa:	e7d8      	b.n	800c5ae <__multiply+0x4e>
 800c5fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800c600:	f1ba 0f00 	cmp.w	sl, #0
 800c604:	d023      	beq.n	800c64e <__multiply+0xee>
 800c606:	46a9      	mov	r9, r5
 800c608:	f04f 0c00 	mov.w	ip, #0
 800c60c:	f104 0e14 	add.w	lr, r4, #20
 800c610:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c614:	f8d9 1000 	ldr.w	r1, [r9]
 800c618:	fa1f fb82 	uxth.w	fp, r2
 800c61c:	b289      	uxth	r1, r1
 800c61e:	fb0a 110b 	mla	r1, sl, fp, r1
 800c622:	4461      	add	r1, ip
 800c624:	f8d9 c000 	ldr.w	ip, [r9]
 800c628:	0c12      	lsrs	r2, r2, #16
 800c62a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c62e:	fb0a c202 	mla	r2, sl, r2, ip
 800c632:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c636:	b289      	uxth	r1, r1
 800c638:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c63c:	4577      	cmp	r7, lr
 800c63e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c642:	f849 1b04 	str.w	r1, [r9], #4
 800c646:	d8e3      	bhi.n	800c610 <__multiply+0xb0>
 800c648:	9a01      	ldr	r2, [sp, #4]
 800c64a:	f845 c002 	str.w	ip, [r5, r2]
 800c64e:	9a03      	ldr	r2, [sp, #12]
 800c650:	3304      	adds	r3, #4
 800c652:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c656:	f1b9 0f00 	cmp.w	r9, #0
 800c65a:	d020      	beq.n	800c69e <__multiply+0x13e>
 800c65c:	46ae      	mov	lr, r5
 800c65e:	f04f 0a00 	mov.w	sl, #0
 800c662:	6829      	ldr	r1, [r5, #0]
 800c664:	f104 0c14 	add.w	ip, r4, #20
 800c668:	f8bc b000 	ldrh.w	fp, [ip]
 800c66c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c670:	b289      	uxth	r1, r1
 800c672:	fb09 220b 	mla	r2, r9, fp, r2
 800c676:	4492      	add	sl, r2
 800c678:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c67c:	f84e 1b04 	str.w	r1, [lr], #4
 800c680:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c684:	f8be 1000 	ldrh.w	r1, [lr]
 800c688:	0c12      	lsrs	r2, r2, #16
 800c68a:	fb09 1102 	mla	r1, r9, r2, r1
 800c68e:	4567      	cmp	r7, ip
 800c690:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c698:	d8e6      	bhi.n	800c668 <__multiply+0x108>
 800c69a:	9a01      	ldr	r2, [sp, #4]
 800c69c:	50a9      	str	r1, [r5, r2]
 800c69e:	3504      	adds	r5, #4
 800c6a0:	e79b      	b.n	800c5da <__multiply+0x7a>
 800c6a2:	3e01      	subs	r6, #1
 800c6a4:	e79d      	b.n	800c5e2 <__multiply+0x82>
 800c6a6:	bf00      	nop
 800c6a8:	0800da90 	.word	0x0800da90
 800c6ac:	0800db1c 	.word	0x0800db1c

0800c6b0 <__pow5mult>:
 800c6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b4:	4615      	mov	r5, r2
 800c6b6:	f012 0203 	ands.w	r2, r2, #3
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	460f      	mov	r7, r1
 800c6be:	d007      	beq.n	800c6d0 <__pow5mult+0x20>
 800c6c0:	4c25      	ldr	r4, [pc, #148]	; (800c758 <__pow5mult+0xa8>)
 800c6c2:	3a01      	subs	r2, #1
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6ca:	f7ff fe55 	bl	800c378 <__multadd>
 800c6ce:	4607      	mov	r7, r0
 800c6d0:	10ad      	asrs	r5, r5, #2
 800c6d2:	d03d      	beq.n	800c750 <__pow5mult+0xa0>
 800c6d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6d6:	b97c      	cbnz	r4, 800c6f8 <__pow5mult+0x48>
 800c6d8:	2010      	movs	r0, #16
 800c6da:	f7ff fdb7 	bl	800c24c <malloc>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	6270      	str	r0, [r6, #36]	; 0x24
 800c6e2:	b928      	cbnz	r0, 800c6f0 <__pow5mult+0x40>
 800c6e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6e8:	4b1c      	ldr	r3, [pc, #112]	; (800c75c <__pow5mult+0xac>)
 800c6ea:	481d      	ldr	r0, [pc, #116]	; (800c760 <__pow5mult+0xb0>)
 800c6ec:	f000 fde4 	bl	800d2b8 <__assert_func>
 800c6f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6f4:	6004      	str	r4, [r0, #0]
 800c6f6:	60c4      	str	r4, [r0, #12]
 800c6f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c700:	b94c      	cbnz	r4, 800c716 <__pow5mult+0x66>
 800c702:	f240 2171 	movw	r1, #625	; 0x271
 800c706:	4630      	mov	r0, r6
 800c708:	f7ff ff14 	bl	800c534 <__i2b>
 800c70c:	2300      	movs	r3, #0
 800c70e:	4604      	mov	r4, r0
 800c710:	f8c8 0008 	str.w	r0, [r8, #8]
 800c714:	6003      	str	r3, [r0, #0]
 800c716:	f04f 0900 	mov.w	r9, #0
 800c71a:	07eb      	lsls	r3, r5, #31
 800c71c:	d50a      	bpl.n	800c734 <__pow5mult+0x84>
 800c71e:	4639      	mov	r1, r7
 800c720:	4622      	mov	r2, r4
 800c722:	4630      	mov	r0, r6
 800c724:	f7ff ff1c 	bl	800c560 <__multiply>
 800c728:	4680      	mov	r8, r0
 800c72a:	4639      	mov	r1, r7
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7ff fe01 	bl	800c334 <_Bfree>
 800c732:	4647      	mov	r7, r8
 800c734:	106d      	asrs	r5, r5, #1
 800c736:	d00b      	beq.n	800c750 <__pow5mult+0xa0>
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	b938      	cbnz	r0, 800c74c <__pow5mult+0x9c>
 800c73c:	4622      	mov	r2, r4
 800c73e:	4621      	mov	r1, r4
 800c740:	4630      	mov	r0, r6
 800c742:	f7ff ff0d 	bl	800c560 <__multiply>
 800c746:	6020      	str	r0, [r4, #0]
 800c748:	f8c0 9000 	str.w	r9, [r0]
 800c74c:	4604      	mov	r4, r0
 800c74e:	e7e4      	b.n	800c71a <__pow5mult+0x6a>
 800c750:	4638      	mov	r0, r7
 800c752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c756:	bf00      	nop
 800c758:	0800dc68 	.word	0x0800dc68
 800c75c:	0800da1e 	.word	0x0800da1e
 800c760:	0800db1c 	.word	0x0800db1c

0800c764 <__lshift>:
 800c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c768:	460c      	mov	r4, r1
 800c76a:	4607      	mov	r7, r0
 800c76c:	4691      	mov	r9, r2
 800c76e:	6923      	ldr	r3, [r4, #16]
 800c770:	6849      	ldr	r1, [r1, #4]
 800c772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c776:	68a3      	ldr	r3, [r4, #8]
 800c778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c77c:	f108 0601 	add.w	r6, r8, #1
 800c780:	42b3      	cmp	r3, r6
 800c782:	db0b      	blt.n	800c79c <__lshift+0x38>
 800c784:	4638      	mov	r0, r7
 800c786:	f7ff fd95 	bl	800c2b4 <_Balloc>
 800c78a:	4605      	mov	r5, r0
 800c78c:	b948      	cbnz	r0, 800c7a2 <__lshift+0x3e>
 800c78e:	4602      	mov	r2, r0
 800c790:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c794:	4b29      	ldr	r3, [pc, #164]	; (800c83c <__lshift+0xd8>)
 800c796:	482a      	ldr	r0, [pc, #168]	; (800c840 <__lshift+0xdc>)
 800c798:	f000 fd8e 	bl	800d2b8 <__assert_func>
 800c79c:	3101      	adds	r1, #1
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	e7ee      	b.n	800c780 <__lshift+0x1c>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f100 0114 	add.w	r1, r0, #20
 800c7a8:	f100 0210 	add.w	r2, r0, #16
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	4553      	cmp	r3, sl
 800c7b0:	db37      	blt.n	800c822 <__lshift+0xbe>
 800c7b2:	6920      	ldr	r0, [r4, #16]
 800c7b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7b8:	f104 0314 	add.w	r3, r4, #20
 800c7bc:	f019 091f 	ands.w	r9, r9, #31
 800c7c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7c8:	d02f      	beq.n	800c82a <__lshift+0xc6>
 800c7ca:	468a      	mov	sl, r1
 800c7cc:	f04f 0c00 	mov.w	ip, #0
 800c7d0:	f1c9 0e20 	rsb	lr, r9, #32
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	fa02 f209 	lsl.w	r2, r2, r9
 800c7da:	ea42 020c 	orr.w	r2, r2, ip
 800c7de:	f84a 2b04 	str.w	r2, [sl], #4
 800c7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7e6:	4298      	cmp	r0, r3
 800c7e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c7ec:	d8f2      	bhi.n	800c7d4 <__lshift+0x70>
 800c7ee:	1b03      	subs	r3, r0, r4
 800c7f0:	3b15      	subs	r3, #21
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	f104 0215 	add.w	r2, r4, #21
 800c7fc:	4290      	cmp	r0, r2
 800c7fe:	bf38      	it	cc
 800c800:	2304      	movcc	r3, #4
 800c802:	f841 c003 	str.w	ip, [r1, r3]
 800c806:	f1bc 0f00 	cmp.w	ip, #0
 800c80a:	d001      	beq.n	800c810 <__lshift+0xac>
 800c80c:	f108 0602 	add.w	r6, r8, #2
 800c810:	3e01      	subs	r6, #1
 800c812:	4638      	mov	r0, r7
 800c814:	4621      	mov	r1, r4
 800c816:	612e      	str	r6, [r5, #16]
 800c818:	f7ff fd8c 	bl	800c334 <_Bfree>
 800c81c:	4628      	mov	r0, r5
 800c81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c822:	f842 0f04 	str.w	r0, [r2, #4]!
 800c826:	3301      	adds	r3, #1
 800c828:	e7c1      	b.n	800c7ae <__lshift+0x4a>
 800c82a:	3904      	subs	r1, #4
 800c82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c830:	4298      	cmp	r0, r3
 800c832:	f841 2f04 	str.w	r2, [r1, #4]!
 800c836:	d8f9      	bhi.n	800c82c <__lshift+0xc8>
 800c838:	e7ea      	b.n	800c810 <__lshift+0xac>
 800c83a:	bf00      	nop
 800c83c:	0800da90 	.word	0x0800da90
 800c840:	0800db1c 	.word	0x0800db1c

0800c844 <__mcmp>:
 800c844:	4603      	mov	r3, r0
 800c846:	690a      	ldr	r2, [r1, #16]
 800c848:	6900      	ldr	r0, [r0, #16]
 800c84a:	b530      	push	{r4, r5, lr}
 800c84c:	1a80      	subs	r0, r0, r2
 800c84e:	d10d      	bne.n	800c86c <__mcmp+0x28>
 800c850:	3314      	adds	r3, #20
 800c852:	3114      	adds	r1, #20
 800c854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c85c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c864:	4295      	cmp	r5, r2
 800c866:	d002      	beq.n	800c86e <__mcmp+0x2a>
 800c868:	d304      	bcc.n	800c874 <__mcmp+0x30>
 800c86a:	2001      	movs	r0, #1
 800c86c:	bd30      	pop	{r4, r5, pc}
 800c86e:	42a3      	cmp	r3, r4
 800c870:	d3f4      	bcc.n	800c85c <__mcmp+0x18>
 800c872:	e7fb      	b.n	800c86c <__mcmp+0x28>
 800c874:	f04f 30ff 	mov.w	r0, #4294967295
 800c878:	e7f8      	b.n	800c86c <__mcmp+0x28>
	...

0800c87c <__mdiff>:
 800c87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c880:	460d      	mov	r5, r1
 800c882:	4607      	mov	r7, r0
 800c884:	4611      	mov	r1, r2
 800c886:	4628      	mov	r0, r5
 800c888:	4614      	mov	r4, r2
 800c88a:	f7ff ffdb 	bl	800c844 <__mcmp>
 800c88e:	1e06      	subs	r6, r0, #0
 800c890:	d111      	bne.n	800c8b6 <__mdiff+0x3a>
 800c892:	4631      	mov	r1, r6
 800c894:	4638      	mov	r0, r7
 800c896:	f7ff fd0d 	bl	800c2b4 <_Balloc>
 800c89a:	4602      	mov	r2, r0
 800c89c:	b928      	cbnz	r0, 800c8aa <__mdiff+0x2e>
 800c89e:	f240 2132 	movw	r1, #562	; 0x232
 800c8a2:	4b3a      	ldr	r3, [pc, #232]	; (800c98c <__mdiff+0x110>)
 800c8a4:	483a      	ldr	r0, [pc, #232]	; (800c990 <__mdiff+0x114>)
 800c8a6:	f000 fd07 	bl	800d2b8 <__assert_func>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b6:	bfa4      	itt	ge
 800c8b8:	4623      	movge	r3, r4
 800c8ba:	462c      	movge	r4, r5
 800c8bc:	4638      	mov	r0, r7
 800c8be:	6861      	ldr	r1, [r4, #4]
 800c8c0:	bfa6      	itte	ge
 800c8c2:	461d      	movge	r5, r3
 800c8c4:	2600      	movge	r6, #0
 800c8c6:	2601      	movlt	r6, #1
 800c8c8:	f7ff fcf4 	bl	800c2b4 <_Balloc>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	b918      	cbnz	r0, 800c8d8 <__mdiff+0x5c>
 800c8d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8d4:	4b2d      	ldr	r3, [pc, #180]	; (800c98c <__mdiff+0x110>)
 800c8d6:	e7e5      	b.n	800c8a4 <__mdiff+0x28>
 800c8d8:	f102 0814 	add.w	r8, r2, #20
 800c8dc:	46c2      	mov	sl, r8
 800c8de:	f04f 0c00 	mov.w	ip, #0
 800c8e2:	6927      	ldr	r7, [r4, #16]
 800c8e4:	60c6      	str	r6, [r0, #12]
 800c8e6:	692e      	ldr	r6, [r5, #16]
 800c8e8:	f104 0014 	add.w	r0, r4, #20
 800c8ec:	f105 0914 	add.w	r9, r5, #20
 800c8f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c8f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c8f8:	3410      	adds	r4, #16
 800c8fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c8fe:	f859 3b04 	ldr.w	r3, [r9], #4
 800c902:	fa1f f18b 	uxth.w	r1, fp
 800c906:	448c      	add	ip, r1
 800c908:	b299      	uxth	r1, r3
 800c90a:	0c1b      	lsrs	r3, r3, #16
 800c90c:	ebac 0101 	sub.w	r1, ip, r1
 800c910:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c914:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c918:	b289      	uxth	r1, r1
 800c91a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c91e:	454e      	cmp	r6, r9
 800c920:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c924:	f84a 3b04 	str.w	r3, [sl], #4
 800c928:	d8e7      	bhi.n	800c8fa <__mdiff+0x7e>
 800c92a:	1b73      	subs	r3, r6, r5
 800c92c:	3b15      	subs	r3, #21
 800c92e:	f023 0303 	bic.w	r3, r3, #3
 800c932:	3515      	adds	r5, #21
 800c934:	3304      	adds	r3, #4
 800c936:	42ae      	cmp	r6, r5
 800c938:	bf38      	it	cc
 800c93a:	2304      	movcc	r3, #4
 800c93c:	4418      	add	r0, r3
 800c93e:	4443      	add	r3, r8
 800c940:	461e      	mov	r6, r3
 800c942:	4605      	mov	r5, r0
 800c944:	4575      	cmp	r5, lr
 800c946:	d30e      	bcc.n	800c966 <__mdiff+0xea>
 800c948:	f10e 0103 	add.w	r1, lr, #3
 800c94c:	1a09      	subs	r1, r1, r0
 800c94e:	f021 0103 	bic.w	r1, r1, #3
 800c952:	3803      	subs	r0, #3
 800c954:	4586      	cmp	lr, r0
 800c956:	bf38      	it	cc
 800c958:	2100      	movcc	r1, #0
 800c95a:	4419      	add	r1, r3
 800c95c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c960:	b18b      	cbz	r3, 800c986 <__mdiff+0x10a>
 800c962:	6117      	str	r7, [r2, #16]
 800c964:	e7a4      	b.n	800c8b0 <__mdiff+0x34>
 800c966:	f855 8b04 	ldr.w	r8, [r5], #4
 800c96a:	fa1f f188 	uxth.w	r1, r8
 800c96e:	4461      	add	r1, ip
 800c970:	140c      	asrs	r4, r1, #16
 800c972:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c976:	b289      	uxth	r1, r1
 800c978:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c97c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c980:	f846 1b04 	str.w	r1, [r6], #4
 800c984:	e7de      	b.n	800c944 <__mdiff+0xc8>
 800c986:	3f01      	subs	r7, #1
 800c988:	e7e8      	b.n	800c95c <__mdiff+0xe0>
 800c98a:	bf00      	nop
 800c98c:	0800da90 	.word	0x0800da90
 800c990:	0800db1c 	.word	0x0800db1c

0800c994 <__ulp>:
 800c994:	4b11      	ldr	r3, [pc, #68]	; (800c9dc <__ulp+0x48>)
 800c996:	400b      	ands	r3, r1
 800c998:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	dd02      	ble.n	800c9a6 <__ulp+0x12>
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4770      	bx	lr
 800c9a6:	425b      	negs	r3, r3
 800c9a8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c9ac:	f04f 0000 	mov.w	r0, #0
 800c9b0:	f04f 0100 	mov.w	r1, #0
 800c9b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c9b8:	da04      	bge.n	800c9c4 <__ulp+0x30>
 800c9ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c9be:	fa43 f102 	asr.w	r1, r3, r2
 800c9c2:	4770      	bx	lr
 800c9c4:	f1a2 0314 	sub.w	r3, r2, #20
 800c9c8:	2b1e      	cmp	r3, #30
 800c9ca:	bfd6      	itet	le
 800c9cc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c9d0:	2301      	movgt	r3, #1
 800c9d2:	fa22 f303 	lsrle.w	r3, r2, r3
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	7ff00000 	.word	0x7ff00000

0800c9e0 <__b2d>:
 800c9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e4:	6907      	ldr	r7, [r0, #16]
 800c9e6:	f100 0914 	add.w	r9, r0, #20
 800c9ea:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c9ee:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c9f2:	f1a7 0804 	sub.w	r8, r7, #4
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7ff fd4e 	bl	800c498 <__hi0bits>
 800c9fc:	f1c0 0320 	rsb	r3, r0, #32
 800ca00:	280a      	cmp	r0, #10
 800ca02:	600b      	str	r3, [r1, #0]
 800ca04:	491f      	ldr	r1, [pc, #124]	; (800ca84 <__b2d+0xa4>)
 800ca06:	dc17      	bgt.n	800ca38 <__b2d+0x58>
 800ca08:	45c1      	cmp	r9, r8
 800ca0a:	bf28      	it	cs
 800ca0c:	2200      	movcs	r2, #0
 800ca0e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ca12:	fa26 f30c 	lsr.w	r3, r6, ip
 800ca16:	bf38      	it	cc
 800ca18:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ca1c:	ea43 0501 	orr.w	r5, r3, r1
 800ca20:	f100 0315 	add.w	r3, r0, #21
 800ca24:	fa06 f303 	lsl.w	r3, r6, r3
 800ca28:	fa22 f20c 	lsr.w	r2, r2, ip
 800ca2c:	ea43 0402 	orr.w	r4, r3, r2
 800ca30:	4620      	mov	r0, r4
 800ca32:	4629      	mov	r1, r5
 800ca34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca38:	45c1      	cmp	r9, r8
 800ca3a:	bf2e      	itee	cs
 800ca3c:	2200      	movcs	r2, #0
 800ca3e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ca42:	f1a7 0808 	subcc.w	r8, r7, #8
 800ca46:	f1b0 030b 	subs.w	r3, r0, #11
 800ca4a:	d016      	beq.n	800ca7a <__b2d+0x9a>
 800ca4c:	f1c3 0720 	rsb	r7, r3, #32
 800ca50:	fa22 f107 	lsr.w	r1, r2, r7
 800ca54:	45c8      	cmp	r8, r9
 800ca56:	fa06 f603 	lsl.w	r6, r6, r3
 800ca5a:	ea46 0601 	orr.w	r6, r6, r1
 800ca5e:	bf94      	ite	ls
 800ca60:	2100      	movls	r1, #0
 800ca62:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ca66:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ca6a:	fa02 f003 	lsl.w	r0, r2, r3
 800ca6e:	40f9      	lsrs	r1, r7
 800ca70:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca74:	ea40 0401 	orr.w	r4, r0, r1
 800ca78:	e7da      	b.n	800ca30 <__b2d+0x50>
 800ca7a:	4614      	mov	r4, r2
 800ca7c:	ea46 0501 	orr.w	r5, r6, r1
 800ca80:	e7d6      	b.n	800ca30 <__b2d+0x50>
 800ca82:	bf00      	nop
 800ca84:	3ff00000 	.word	0x3ff00000

0800ca88 <__d2b>:
 800ca88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ca92:	4690      	mov	r8, r2
 800ca94:	461d      	mov	r5, r3
 800ca96:	f7ff fc0d 	bl	800c2b4 <_Balloc>
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	b930      	cbnz	r0, 800caac <__d2b+0x24>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	f240 310a 	movw	r1, #778	; 0x30a
 800caa4:	4b24      	ldr	r3, [pc, #144]	; (800cb38 <__d2b+0xb0>)
 800caa6:	4825      	ldr	r0, [pc, #148]	; (800cb3c <__d2b+0xb4>)
 800caa8:	f000 fc06 	bl	800d2b8 <__assert_func>
 800caac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cab0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cab4:	bb2d      	cbnz	r5, 800cb02 <__d2b+0x7a>
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	f1b8 0300 	subs.w	r3, r8, #0
 800cabc:	d026      	beq.n	800cb0c <__d2b+0x84>
 800cabe:	4668      	mov	r0, sp
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	f7ff fd09 	bl	800c4d8 <__lo0bits>
 800cac6:	9900      	ldr	r1, [sp, #0]
 800cac8:	b1f0      	cbz	r0, 800cb08 <__d2b+0x80>
 800caca:	9a01      	ldr	r2, [sp, #4]
 800cacc:	f1c0 0320 	rsb	r3, r0, #32
 800cad0:	fa02 f303 	lsl.w	r3, r2, r3
 800cad4:	430b      	orrs	r3, r1
 800cad6:	40c2      	lsrs	r2, r0
 800cad8:	6163      	str	r3, [r4, #20]
 800cada:	9201      	str	r2, [sp, #4]
 800cadc:	9b01      	ldr	r3, [sp, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	bf14      	ite	ne
 800cae2:	2102      	movne	r1, #2
 800cae4:	2101      	moveq	r1, #1
 800cae6:	61a3      	str	r3, [r4, #24]
 800cae8:	6121      	str	r1, [r4, #16]
 800caea:	b1c5      	cbz	r5, 800cb1e <__d2b+0x96>
 800caec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800caf0:	4405      	add	r5, r0
 800caf2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800caf6:	603d      	str	r5, [r7, #0]
 800caf8:	6030      	str	r0, [r6, #0]
 800cafa:	4620      	mov	r0, r4
 800cafc:	b002      	add	sp, #8
 800cafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb06:	e7d6      	b.n	800cab6 <__d2b+0x2e>
 800cb08:	6161      	str	r1, [r4, #20]
 800cb0a:	e7e7      	b.n	800cadc <__d2b+0x54>
 800cb0c:	a801      	add	r0, sp, #4
 800cb0e:	f7ff fce3 	bl	800c4d8 <__lo0bits>
 800cb12:	2101      	movs	r1, #1
 800cb14:	9b01      	ldr	r3, [sp, #4]
 800cb16:	6121      	str	r1, [r4, #16]
 800cb18:	6163      	str	r3, [r4, #20]
 800cb1a:	3020      	adds	r0, #32
 800cb1c:	e7e5      	b.n	800caea <__d2b+0x62>
 800cb1e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cb22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb26:	6038      	str	r0, [r7, #0]
 800cb28:	6918      	ldr	r0, [r3, #16]
 800cb2a:	f7ff fcb5 	bl	800c498 <__hi0bits>
 800cb2e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cb32:	6031      	str	r1, [r6, #0]
 800cb34:	e7e1      	b.n	800cafa <__d2b+0x72>
 800cb36:	bf00      	nop
 800cb38:	0800da90 	.word	0x0800da90
 800cb3c:	0800db1c 	.word	0x0800db1c

0800cb40 <__ratio>:
 800cb40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	4688      	mov	r8, r1
 800cb46:	4669      	mov	r1, sp
 800cb48:	4681      	mov	r9, r0
 800cb4a:	f7ff ff49 	bl	800c9e0 <__b2d>
 800cb4e:	460f      	mov	r7, r1
 800cb50:	4604      	mov	r4, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	4640      	mov	r0, r8
 800cb56:	a901      	add	r1, sp, #4
 800cb58:	f7ff ff42 	bl	800c9e0 <__b2d>
 800cb5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb64:	468b      	mov	fp, r1
 800cb66:	eba3 0c02 	sub.w	ip, r3, r2
 800cb6a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bfd5      	itete	le
 800cb78:	460a      	movle	r2, r1
 800cb7a:	462a      	movgt	r2, r5
 800cb7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb80:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb84:	bfd8      	it	le
 800cb86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb8a:	465b      	mov	r3, fp
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	4639      	mov	r1, r7
 800cb90:	4620      	mov	r0, r4
 800cb92:	f7f3 fdd5 	bl	8000740 <__aeabi_ddiv>
 800cb96:	b003      	add	sp, #12
 800cb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb9c <__copybits>:
 800cb9c:	3901      	subs	r1, #1
 800cb9e:	b570      	push	{r4, r5, r6, lr}
 800cba0:	1149      	asrs	r1, r1, #5
 800cba2:	6914      	ldr	r4, [r2, #16]
 800cba4:	3101      	adds	r1, #1
 800cba6:	f102 0314 	add.w	r3, r2, #20
 800cbaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cbae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbb2:	1f05      	subs	r5, r0, #4
 800cbb4:	42a3      	cmp	r3, r4
 800cbb6:	d30c      	bcc.n	800cbd2 <__copybits+0x36>
 800cbb8:	1aa3      	subs	r3, r4, r2
 800cbba:	3b11      	subs	r3, #17
 800cbbc:	f023 0303 	bic.w	r3, r3, #3
 800cbc0:	3211      	adds	r2, #17
 800cbc2:	42a2      	cmp	r2, r4
 800cbc4:	bf88      	it	hi
 800cbc6:	2300      	movhi	r3, #0
 800cbc8:	4418      	add	r0, r3
 800cbca:	2300      	movs	r3, #0
 800cbcc:	4288      	cmp	r0, r1
 800cbce:	d305      	bcc.n	800cbdc <__copybits+0x40>
 800cbd0:	bd70      	pop	{r4, r5, r6, pc}
 800cbd2:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbd6:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbda:	e7eb      	b.n	800cbb4 <__copybits+0x18>
 800cbdc:	f840 3b04 	str.w	r3, [r0], #4
 800cbe0:	e7f4      	b.n	800cbcc <__copybits+0x30>

0800cbe2 <__any_on>:
 800cbe2:	f100 0214 	add.w	r2, r0, #20
 800cbe6:	6900      	ldr	r0, [r0, #16]
 800cbe8:	114b      	asrs	r3, r1, #5
 800cbea:	4298      	cmp	r0, r3
 800cbec:	b510      	push	{r4, lr}
 800cbee:	db11      	blt.n	800cc14 <__any_on+0x32>
 800cbf0:	dd0a      	ble.n	800cc08 <__any_on+0x26>
 800cbf2:	f011 011f 	ands.w	r1, r1, #31
 800cbf6:	d007      	beq.n	800cc08 <__any_on+0x26>
 800cbf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbfc:	fa24 f001 	lsr.w	r0, r4, r1
 800cc00:	fa00 f101 	lsl.w	r1, r0, r1
 800cc04:	428c      	cmp	r4, r1
 800cc06:	d10b      	bne.n	800cc20 <__any_on+0x3e>
 800cc08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d803      	bhi.n	800cc18 <__any_on+0x36>
 800cc10:	2000      	movs	r0, #0
 800cc12:	bd10      	pop	{r4, pc}
 800cc14:	4603      	mov	r3, r0
 800cc16:	e7f7      	b.n	800cc08 <__any_on+0x26>
 800cc18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc1c:	2900      	cmp	r1, #0
 800cc1e:	d0f5      	beq.n	800cc0c <__any_on+0x2a>
 800cc20:	2001      	movs	r0, #1
 800cc22:	e7f6      	b.n	800cc12 <__any_on+0x30>

0800cc24 <_calloc_r>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	fba1 5402 	umull	r5, r4, r1, r2
 800cc2a:	b934      	cbnz	r4, 800cc3a <_calloc_r+0x16>
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	f7fc f813 	bl	8008c58 <_malloc_r>
 800cc32:	4606      	mov	r6, r0
 800cc34:	b928      	cbnz	r0, 800cc42 <_calloc_r+0x1e>
 800cc36:	4630      	mov	r0, r6
 800cc38:	bd70      	pop	{r4, r5, r6, pc}
 800cc3a:	220c      	movs	r2, #12
 800cc3c:	2600      	movs	r6, #0
 800cc3e:	6002      	str	r2, [r0, #0]
 800cc40:	e7f9      	b.n	800cc36 <_calloc_r+0x12>
 800cc42:	462a      	mov	r2, r5
 800cc44:	4621      	mov	r1, r4
 800cc46:	f7fb ffde 	bl	8008c06 <memset>
 800cc4a:	e7f4      	b.n	800cc36 <_calloc_r+0x12>

0800cc4c <_free_r>:
 800cc4c:	b538      	push	{r3, r4, r5, lr}
 800cc4e:	4605      	mov	r5, r0
 800cc50:	2900      	cmp	r1, #0
 800cc52:	d040      	beq.n	800ccd6 <_free_r+0x8a>
 800cc54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc58:	1f0c      	subs	r4, r1, #4
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bfb8      	it	lt
 800cc5e:	18e4      	addlt	r4, r4, r3
 800cc60:	f7ff fb1c 	bl	800c29c <__malloc_lock>
 800cc64:	4a1c      	ldr	r2, [pc, #112]	; (800ccd8 <_free_r+0x8c>)
 800cc66:	6813      	ldr	r3, [r2, #0]
 800cc68:	b933      	cbnz	r3, 800cc78 <_free_r+0x2c>
 800cc6a:	6063      	str	r3, [r4, #4]
 800cc6c:	6014      	str	r4, [r2, #0]
 800cc6e:	4628      	mov	r0, r5
 800cc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc74:	f7ff bb18 	b.w	800c2a8 <__malloc_unlock>
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	d908      	bls.n	800cc8e <_free_r+0x42>
 800cc7c:	6820      	ldr	r0, [r4, #0]
 800cc7e:	1821      	adds	r1, r4, r0
 800cc80:	428b      	cmp	r3, r1
 800cc82:	bf01      	itttt	eq
 800cc84:	6819      	ldreq	r1, [r3, #0]
 800cc86:	685b      	ldreq	r3, [r3, #4]
 800cc88:	1809      	addeq	r1, r1, r0
 800cc8a:	6021      	streq	r1, [r4, #0]
 800cc8c:	e7ed      	b.n	800cc6a <_free_r+0x1e>
 800cc8e:	461a      	mov	r2, r3
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	b10b      	cbz	r3, 800cc98 <_free_r+0x4c>
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	d9fa      	bls.n	800cc8e <_free_r+0x42>
 800cc98:	6811      	ldr	r1, [r2, #0]
 800cc9a:	1850      	adds	r0, r2, r1
 800cc9c:	42a0      	cmp	r0, r4
 800cc9e:	d10b      	bne.n	800ccb8 <_free_r+0x6c>
 800cca0:	6820      	ldr	r0, [r4, #0]
 800cca2:	4401      	add	r1, r0
 800cca4:	1850      	adds	r0, r2, r1
 800cca6:	4283      	cmp	r3, r0
 800cca8:	6011      	str	r1, [r2, #0]
 800ccaa:	d1e0      	bne.n	800cc6e <_free_r+0x22>
 800ccac:	6818      	ldr	r0, [r3, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	4401      	add	r1, r0
 800ccb2:	6011      	str	r1, [r2, #0]
 800ccb4:	6053      	str	r3, [r2, #4]
 800ccb6:	e7da      	b.n	800cc6e <_free_r+0x22>
 800ccb8:	d902      	bls.n	800ccc0 <_free_r+0x74>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	e7d6      	b.n	800cc6e <_free_r+0x22>
 800ccc0:	6820      	ldr	r0, [r4, #0]
 800ccc2:	1821      	adds	r1, r4, r0
 800ccc4:	428b      	cmp	r3, r1
 800ccc6:	bf01      	itttt	eq
 800ccc8:	6819      	ldreq	r1, [r3, #0]
 800ccca:	685b      	ldreq	r3, [r3, #4]
 800cccc:	1809      	addeq	r1, r1, r0
 800ccce:	6021      	streq	r1, [r4, #0]
 800ccd0:	6063      	str	r3, [r4, #4]
 800ccd2:	6054      	str	r4, [r2, #4]
 800ccd4:	e7cb      	b.n	800cc6e <_free_r+0x22>
 800ccd6:	bd38      	pop	{r3, r4, r5, pc}
 800ccd8:	20002588 	.word	0x20002588

0800ccdc <__ssputs_r>:
 800ccdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce0:	688e      	ldr	r6, [r1, #8]
 800cce2:	4682      	mov	sl, r0
 800cce4:	429e      	cmp	r6, r3
 800cce6:	460c      	mov	r4, r1
 800cce8:	4690      	mov	r8, r2
 800ccea:	461f      	mov	r7, r3
 800ccec:	d838      	bhi.n	800cd60 <__ssputs_r+0x84>
 800ccee:	898a      	ldrh	r2, [r1, #12]
 800ccf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccf4:	d032      	beq.n	800cd5c <__ssputs_r+0x80>
 800ccf6:	6825      	ldr	r5, [r4, #0]
 800ccf8:	6909      	ldr	r1, [r1, #16]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	eba5 0901 	sub.w	r9, r5, r1
 800cd00:	6965      	ldr	r5, [r4, #20]
 800cd02:	444b      	add	r3, r9
 800cd04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd0c:	106d      	asrs	r5, r5, #1
 800cd0e:	429d      	cmp	r5, r3
 800cd10:	bf38      	it	cc
 800cd12:	461d      	movcc	r5, r3
 800cd14:	0553      	lsls	r3, r2, #21
 800cd16:	d531      	bpl.n	800cd7c <__ssputs_r+0xa0>
 800cd18:	4629      	mov	r1, r5
 800cd1a:	f7fb ff9d 	bl	8008c58 <_malloc_r>
 800cd1e:	4606      	mov	r6, r0
 800cd20:	b950      	cbnz	r0, 800cd38 <__ssputs_r+0x5c>
 800cd22:	230c      	movs	r3, #12
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	f8ca 3000 	str.w	r3, [sl]
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd32:	81a3      	strh	r3, [r4, #12]
 800cd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd38:	464a      	mov	r2, r9
 800cd3a:	6921      	ldr	r1, [r4, #16]
 800cd3c:	f7fb ff55 	bl	8008bea <memcpy>
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4a:	81a3      	strh	r3, [r4, #12]
 800cd4c:	6126      	str	r6, [r4, #16]
 800cd4e:	444e      	add	r6, r9
 800cd50:	6026      	str	r6, [r4, #0]
 800cd52:	463e      	mov	r6, r7
 800cd54:	6165      	str	r5, [r4, #20]
 800cd56:	eba5 0509 	sub.w	r5, r5, r9
 800cd5a:	60a5      	str	r5, [r4, #8]
 800cd5c:	42be      	cmp	r6, r7
 800cd5e:	d900      	bls.n	800cd62 <__ssputs_r+0x86>
 800cd60:	463e      	mov	r6, r7
 800cd62:	4632      	mov	r2, r6
 800cd64:	4641      	mov	r1, r8
 800cd66:	6820      	ldr	r0, [r4, #0]
 800cd68:	f000 faf8 	bl	800d35c <memmove>
 800cd6c:	68a3      	ldr	r3, [r4, #8]
 800cd6e:	2000      	movs	r0, #0
 800cd70:	1b9b      	subs	r3, r3, r6
 800cd72:	60a3      	str	r3, [r4, #8]
 800cd74:	6823      	ldr	r3, [r4, #0]
 800cd76:	4433      	add	r3, r6
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	e7db      	b.n	800cd34 <__ssputs_r+0x58>
 800cd7c:	462a      	mov	r2, r5
 800cd7e:	f000 fb07 	bl	800d390 <_realloc_r>
 800cd82:	4606      	mov	r6, r0
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d1e1      	bne.n	800cd4c <__ssputs_r+0x70>
 800cd88:	4650      	mov	r0, sl
 800cd8a:	6921      	ldr	r1, [r4, #16]
 800cd8c:	f7ff ff5e 	bl	800cc4c <_free_r>
 800cd90:	e7c7      	b.n	800cd22 <__ssputs_r+0x46>
	...

0800cd94 <_svfiprintf_r>:
 800cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd98:	4698      	mov	r8, r3
 800cd9a:	898b      	ldrh	r3, [r1, #12]
 800cd9c:	4607      	mov	r7, r0
 800cd9e:	061b      	lsls	r3, r3, #24
 800cda0:	460d      	mov	r5, r1
 800cda2:	4614      	mov	r4, r2
 800cda4:	b09d      	sub	sp, #116	; 0x74
 800cda6:	d50e      	bpl.n	800cdc6 <_svfiprintf_r+0x32>
 800cda8:	690b      	ldr	r3, [r1, #16]
 800cdaa:	b963      	cbnz	r3, 800cdc6 <_svfiprintf_r+0x32>
 800cdac:	2140      	movs	r1, #64	; 0x40
 800cdae:	f7fb ff53 	bl	8008c58 <_malloc_r>
 800cdb2:	6028      	str	r0, [r5, #0]
 800cdb4:	6128      	str	r0, [r5, #16]
 800cdb6:	b920      	cbnz	r0, 800cdc2 <_svfiprintf_r+0x2e>
 800cdb8:	230c      	movs	r3, #12
 800cdba:	603b      	str	r3, [r7, #0]
 800cdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc0:	e0d1      	b.n	800cf66 <_svfiprintf_r+0x1d2>
 800cdc2:	2340      	movs	r3, #64	; 0x40
 800cdc4:	616b      	str	r3, [r5, #20]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdca:	2320      	movs	r3, #32
 800cdcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdd0:	2330      	movs	r3, #48	; 0x30
 800cdd2:	f04f 0901 	mov.w	r9, #1
 800cdd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf80 <_svfiprintf_r+0x1ec>
 800cdde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cde2:	4623      	mov	r3, r4
 800cde4:	469a      	mov	sl, r3
 800cde6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdea:	b10a      	cbz	r2, 800cdf0 <_svfiprintf_r+0x5c>
 800cdec:	2a25      	cmp	r2, #37	; 0x25
 800cdee:	d1f9      	bne.n	800cde4 <_svfiprintf_r+0x50>
 800cdf0:	ebba 0b04 	subs.w	fp, sl, r4
 800cdf4:	d00b      	beq.n	800ce0e <_svfiprintf_r+0x7a>
 800cdf6:	465b      	mov	r3, fp
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	f7ff ff6d 	bl	800ccdc <__ssputs_r>
 800ce02:	3001      	adds	r0, #1
 800ce04:	f000 80aa 	beq.w	800cf5c <_svfiprintf_r+0x1c8>
 800ce08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce0a:	445a      	add	r2, fp
 800ce0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 80a2 	beq.w	800cf5c <_svfiprintf_r+0x1c8>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce22:	f10a 0a01 	add.w	sl, sl, #1
 800ce26:	9304      	str	r3, [sp, #16]
 800ce28:	9307      	str	r3, [sp, #28]
 800ce2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce2e:	931a      	str	r3, [sp, #104]	; 0x68
 800ce30:	4654      	mov	r4, sl
 800ce32:	2205      	movs	r2, #5
 800ce34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce38:	4851      	ldr	r0, [pc, #324]	; (800cf80 <_svfiprintf_r+0x1ec>)
 800ce3a:	f7ff fa21 	bl	800c280 <memchr>
 800ce3e:	9a04      	ldr	r2, [sp, #16]
 800ce40:	b9d8      	cbnz	r0, 800ce7a <_svfiprintf_r+0xe6>
 800ce42:	06d0      	lsls	r0, r2, #27
 800ce44:	bf44      	itt	mi
 800ce46:	2320      	movmi	r3, #32
 800ce48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce4c:	0711      	lsls	r1, r2, #28
 800ce4e:	bf44      	itt	mi
 800ce50:	232b      	movmi	r3, #43	; 0x2b
 800ce52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce56:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce5c:	d015      	beq.n	800ce8a <_svfiprintf_r+0xf6>
 800ce5e:	4654      	mov	r4, sl
 800ce60:	2000      	movs	r0, #0
 800ce62:	f04f 0c0a 	mov.w	ip, #10
 800ce66:	9a07      	ldr	r2, [sp, #28]
 800ce68:	4621      	mov	r1, r4
 800ce6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce6e:	3b30      	subs	r3, #48	; 0x30
 800ce70:	2b09      	cmp	r3, #9
 800ce72:	d94e      	bls.n	800cf12 <_svfiprintf_r+0x17e>
 800ce74:	b1b0      	cbz	r0, 800cea4 <_svfiprintf_r+0x110>
 800ce76:	9207      	str	r2, [sp, #28]
 800ce78:	e014      	b.n	800cea4 <_svfiprintf_r+0x110>
 800ce7a:	eba0 0308 	sub.w	r3, r0, r8
 800ce7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce82:	4313      	orrs	r3, r2
 800ce84:	46a2      	mov	sl, r4
 800ce86:	9304      	str	r3, [sp, #16]
 800ce88:	e7d2      	b.n	800ce30 <_svfiprintf_r+0x9c>
 800ce8a:	9b03      	ldr	r3, [sp, #12]
 800ce8c:	1d19      	adds	r1, r3, #4
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	9103      	str	r1, [sp, #12]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	bfbb      	ittet	lt
 800ce96:	425b      	neglt	r3, r3
 800ce98:	f042 0202 	orrlt.w	r2, r2, #2
 800ce9c:	9307      	strge	r3, [sp, #28]
 800ce9e:	9307      	strlt	r3, [sp, #28]
 800cea0:	bfb8      	it	lt
 800cea2:	9204      	strlt	r2, [sp, #16]
 800cea4:	7823      	ldrb	r3, [r4, #0]
 800cea6:	2b2e      	cmp	r3, #46	; 0x2e
 800cea8:	d10c      	bne.n	800cec4 <_svfiprintf_r+0x130>
 800ceaa:	7863      	ldrb	r3, [r4, #1]
 800ceac:	2b2a      	cmp	r3, #42	; 0x2a
 800ceae:	d135      	bne.n	800cf1c <_svfiprintf_r+0x188>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	3402      	adds	r4, #2
 800ceb4:	1d1a      	adds	r2, r3, #4
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	9203      	str	r2, [sp, #12]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	bfb8      	it	lt
 800cebe:	f04f 33ff 	movlt.w	r3, #4294967295
 800cec2:	9305      	str	r3, [sp, #20]
 800cec4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cf84 <_svfiprintf_r+0x1f0>
 800cec8:	2203      	movs	r2, #3
 800ceca:	4650      	mov	r0, sl
 800cecc:	7821      	ldrb	r1, [r4, #0]
 800cece:	f7ff f9d7 	bl	800c280 <memchr>
 800ced2:	b140      	cbz	r0, 800cee6 <_svfiprintf_r+0x152>
 800ced4:	2340      	movs	r3, #64	; 0x40
 800ced6:	eba0 000a 	sub.w	r0, r0, sl
 800ceda:	fa03 f000 	lsl.w	r0, r3, r0
 800cede:	9b04      	ldr	r3, [sp, #16]
 800cee0:	3401      	adds	r4, #1
 800cee2:	4303      	orrs	r3, r0
 800cee4:	9304      	str	r3, [sp, #16]
 800cee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceea:	2206      	movs	r2, #6
 800ceec:	4826      	ldr	r0, [pc, #152]	; (800cf88 <_svfiprintf_r+0x1f4>)
 800ceee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cef2:	f7ff f9c5 	bl	800c280 <memchr>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d038      	beq.n	800cf6c <_svfiprintf_r+0x1d8>
 800cefa:	4b24      	ldr	r3, [pc, #144]	; (800cf8c <_svfiprintf_r+0x1f8>)
 800cefc:	bb1b      	cbnz	r3, 800cf46 <_svfiprintf_r+0x1b2>
 800cefe:	9b03      	ldr	r3, [sp, #12]
 800cf00:	3307      	adds	r3, #7
 800cf02:	f023 0307 	bic.w	r3, r3, #7
 800cf06:	3308      	adds	r3, #8
 800cf08:	9303      	str	r3, [sp, #12]
 800cf0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf0c:	4433      	add	r3, r6
 800cf0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf10:	e767      	b.n	800cde2 <_svfiprintf_r+0x4e>
 800cf12:	460c      	mov	r4, r1
 800cf14:	2001      	movs	r0, #1
 800cf16:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf1a:	e7a5      	b.n	800ce68 <_svfiprintf_r+0xd4>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f04f 0c0a 	mov.w	ip, #10
 800cf22:	4619      	mov	r1, r3
 800cf24:	3401      	adds	r4, #1
 800cf26:	9305      	str	r3, [sp, #20]
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf2e:	3a30      	subs	r2, #48	; 0x30
 800cf30:	2a09      	cmp	r2, #9
 800cf32:	d903      	bls.n	800cf3c <_svfiprintf_r+0x1a8>
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d0c5      	beq.n	800cec4 <_svfiprintf_r+0x130>
 800cf38:	9105      	str	r1, [sp, #20]
 800cf3a:	e7c3      	b.n	800cec4 <_svfiprintf_r+0x130>
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	2301      	movs	r3, #1
 800cf40:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf44:	e7f0      	b.n	800cf28 <_svfiprintf_r+0x194>
 800cf46:	ab03      	add	r3, sp, #12
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	4b10      	ldr	r3, [pc, #64]	; (800cf90 <_svfiprintf_r+0x1fc>)
 800cf50:	a904      	add	r1, sp, #16
 800cf52:	f7fb ff93 	bl	8008e7c <_printf_float>
 800cf56:	1c42      	adds	r2, r0, #1
 800cf58:	4606      	mov	r6, r0
 800cf5a:	d1d6      	bne.n	800cf0a <_svfiprintf_r+0x176>
 800cf5c:	89ab      	ldrh	r3, [r5, #12]
 800cf5e:	065b      	lsls	r3, r3, #25
 800cf60:	f53f af2c 	bmi.w	800cdbc <_svfiprintf_r+0x28>
 800cf64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf66:	b01d      	add	sp, #116	; 0x74
 800cf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6c:	ab03      	add	r3, sp, #12
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	462a      	mov	r2, r5
 800cf72:	4638      	mov	r0, r7
 800cf74:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <_svfiprintf_r+0x1fc>)
 800cf76:	a904      	add	r1, sp, #16
 800cf78:	f7fc fa1c 	bl	80093b4 <_printf_i>
 800cf7c:	e7eb      	b.n	800cf56 <_svfiprintf_r+0x1c2>
 800cf7e:	bf00      	nop
 800cf80:	0800dc74 	.word	0x0800dc74
 800cf84:	0800dc7a 	.word	0x0800dc7a
 800cf88:	0800dc7e 	.word	0x0800dc7e
 800cf8c:	08008e7d 	.word	0x08008e7d
 800cf90:	0800ccdd 	.word	0x0800ccdd

0800cf94 <__sfputc_r>:
 800cf94:	6893      	ldr	r3, [r2, #8]
 800cf96:	b410      	push	{r4}
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	6093      	str	r3, [r2, #8]
 800cf9e:	da07      	bge.n	800cfb0 <__sfputc_r+0x1c>
 800cfa0:	6994      	ldr	r4, [r2, #24]
 800cfa2:	42a3      	cmp	r3, r4
 800cfa4:	db01      	blt.n	800cfaa <__sfputc_r+0x16>
 800cfa6:	290a      	cmp	r1, #10
 800cfa8:	d102      	bne.n	800cfb0 <__sfputc_r+0x1c>
 800cfaa:	bc10      	pop	{r4}
 800cfac:	f7fd bd52 	b.w	800aa54 <__swbuf_r>
 800cfb0:	6813      	ldr	r3, [r2, #0]
 800cfb2:	1c58      	adds	r0, r3, #1
 800cfb4:	6010      	str	r0, [r2, #0]
 800cfb6:	7019      	strb	r1, [r3, #0]
 800cfb8:	4608      	mov	r0, r1
 800cfba:	bc10      	pop	{r4}
 800cfbc:	4770      	bx	lr

0800cfbe <__sfputs_r>:
 800cfbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	460f      	mov	r7, r1
 800cfc4:	4614      	mov	r4, r2
 800cfc6:	18d5      	adds	r5, r2, r3
 800cfc8:	42ac      	cmp	r4, r5
 800cfca:	d101      	bne.n	800cfd0 <__sfputs_r+0x12>
 800cfcc:	2000      	movs	r0, #0
 800cfce:	e007      	b.n	800cfe0 <__sfputs_r+0x22>
 800cfd0:	463a      	mov	r2, r7
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd8:	f7ff ffdc 	bl	800cf94 <__sfputc_r>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d1f3      	bne.n	800cfc8 <__sfputs_r+0xa>
 800cfe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfe4 <_vfiprintf_r>:
 800cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	460d      	mov	r5, r1
 800cfea:	4614      	mov	r4, r2
 800cfec:	4698      	mov	r8, r3
 800cfee:	4606      	mov	r6, r0
 800cff0:	b09d      	sub	sp, #116	; 0x74
 800cff2:	b118      	cbz	r0, 800cffc <_vfiprintf_r+0x18>
 800cff4:	6983      	ldr	r3, [r0, #24]
 800cff6:	b90b      	cbnz	r3, 800cffc <_vfiprintf_r+0x18>
 800cff8:	f7fb fd32 	bl	8008a60 <__sinit>
 800cffc:	4b89      	ldr	r3, [pc, #548]	; (800d224 <_vfiprintf_r+0x240>)
 800cffe:	429d      	cmp	r5, r3
 800d000:	d11b      	bne.n	800d03a <_vfiprintf_r+0x56>
 800d002:	6875      	ldr	r5, [r6, #4]
 800d004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	d405      	bmi.n	800d016 <_vfiprintf_r+0x32>
 800d00a:	89ab      	ldrh	r3, [r5, #12]
 800d00c:	059a      	lsls	r2, r3, #22
 800d00e:	d402      	bmi.n	800d016 <_vfiprintf_r+0x32>
 800d010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d012:	f7fb fde8 	bl	8008be6 <__retarget_lock_acquire_recursive>
 800d016:	89ab      	ldrh	r3, [r5, #12]
 800d018:	071b      	lsls	r3, r3, #28
 800d01a:	d501      	bpl.n	800d020 <_vfiprintf_r+0x3c>
 800d01c:	692b      	ldr	r3, [r5, #16]
 800d01e:	b9eb      	cbnz	r3, 800d05c <_vfiprintf_r+0x78>
 800d020:	4629      	mov	r1, r5
 800d022:	4630      	mov	r0, r6
 800d024:	f7fd fd7a 	bl	800ab1c <__swsetup_r>
 800d028:	b1c0      	cbz	r0, 800d05c <_vfiprintf_r+0x78>
 800d02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d02c:	07dc      	lsls	r4, r3, #31
 800d02e:	d50e      	bpl.n	800d04e <_vfiprintf_r+0x6a>
 800d030:	f04f 30ff 	mov.w	r0, #4294967295
 800d034:	b01d      	add	sp, #116	; 0x74
 800d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03a:	4b7b      	ldr	r3, [pc, #492]	; (800d228 <_vfiprintf_r+0x244>)
 800d03c:	429d      	cmp	r5, r3
 800d03e:	d101      	bne.n	800d044 <_vfiprintf_r+0x60>
 800d040:	68b5      	ldr	r5, [r6, #8]
 800d042:	e7df      	b.n	800d004 <_vfiprintf_r+0x20>
 800d044:	4b79      	ldr	r3, [pc, #484]	; (800d22c <_vfiprintf_r+0x248>)
 800d046:	429d      	cmp	r5, r3
 800d048:	bf08      	it	eq
 800d04a:	68f5      	ldreq	r5, [r6, #12]
 800d04c:	e7da      	b.n	800d004 <_vfiprintf_r+0x20>
 800d04e:	89ab      	ldrh	r3, [r5, #12]
 800d050:	0598      	lsls	r0, r3, #22
 800d052:	d4ed      	bmi.n	800d030 <_vfiprintf_r+0x4c>
 800d054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d056:	f7fb fdc7 	bl	8008be8 <__retarget_lock_release_recursive>
 800d05a:	e7e9      	b.n	800d030 <_vfiprintf_r+0x4c>
 800d05c:	2300      	movs	r3, #0
 800d05e:	9309      	str	r3, [sp, #36]	; 0x24
 800d060:	2320      	movs	r3, #32
 800d062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d066:	2330      	movs	r3, #48	; 0x30
 800d068:	f04f 0901 	mov.w	r9, #1
 800d06c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d070:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d230 <_vfiprintf_r+0x24c>
 800d074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d078:	4623      	mov	r3, r4
 800d07a:	469a      	mov	sl, r3
 800d07c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d080:	b10a      	cbz	r2, 800d086 <_vfiprintf_r+0xa2>
 800d082:	2a25      	cmp	r2, #37	; 0x25
 800d084:	d1f9      	bne.n	800d07a <_vfiprintf_r+0x96>
 800d086:	ebba 0b04 	subs.w	fp, sl, r4
 800d08a:	d00b      	beq.n	800d0a4 <_vfiprintf_r+0xc0>
 800d08c:	465b      	mov	r3, fp
 800d08e:	4622      	mov	r2, r4
 800d090:	4629      	mov	r1, r5
 800d092:	4630      	mov	r0, r6
 800d094:	f7ff ff93 	bl	800cfbe <__sfputs_r>
 800d098:	3001      	adds	r0, #1
 800d09a:	f000 80aa 	beq.w	800d1f2 <_vfiprintf_r+0x20e>
 800d09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0a0:	445a      	add	r2, fp
 800d0a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 80a2 	beq.w	800d1f2 <_vfiprintf_r+0x20e>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b8:	f10a 0a01 	add.w	sl, sl, #1
 800d0bc:	9304      	str	r3, [sp, #16]
 800d0be:	9307      	str	r3, [sp, #28]
 800d0c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0c4:	931a      	str	r3, [sp, #104]	; 0x68
 800d0c6:	4654      	mov	r4, sl
 800d0c8:	2205      	movs	r2, #5
 800d0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ce:	4858      	ldr	r0, [pc, #352]	; (800d230 <_vfiprintf_r+0x24c>)
 800d0d0:	f7ff f8d6 	bl	800c280 <memchr>
 800d0d4:	9a04      	ldr	r2, [sp, #16]
 800d0d6:	b9d8      	cbnz	r0, 800d110 <_vfiprintf_r+0x12c>
 800d0d8:	06d1      	lsls	r1, r2, #27
 800d0da:	bf44      	itt	mi
 800d0dc:	2320      	movmi	r3, #32
 800d0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0e2:	0713      	lsls	r3, r2, #28
 800d0e4:	bf44      	itt	mi
 800d0e6:	232b      	movmi	r3, #43	; 0x2b
 800d0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0f2:	d015      	beq.n	800d120 <_vfiprintf_r+0x13c>
 800d0f4:	4654      	mov	r4, sl
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	f04f 0c0a 	mov.w	ip, #10
 800d0fc:	9a07      	ldr	r2, [sp, #28]
 800d0fe:	4621      	mov	r1, r4
 800d100:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d104:	3b30      	subs	r3, #48	; 0x30
 800d106:	2b09      	cmp	r3, #9
 800d108:	d94e      	bls.n	800d1a8 <_vfiprintf_r+0x1c4>
 800d10a:	b1b0      	cbz	r0, 800d13a <_vfiprintf_r+0x156>
 800d10c:	9207      	str	r2, [sp, #28]
 800d10e:	e014      	b.n	800d13a <_vfiprintf_r+0x156>
 800d110:	eba0 0308 	sub.w	r3, r0, r8
 800d114:	fa09 f303 	lsl.w	r3, r9, r3
 800d118:	4313      	orrs	r3, r2
 800d11a:	46a2      	mov	sl, r4
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	e7d2      	b.n	800d0c6 <_vfiprintf_r+0xe2>
 800d120:	9b03      	ldr	r3, [sp, #12]
 800d122:	1d19      	adds	r1, r3, #4
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	9103      	str	r1, [sp, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	bfbb      	ittet	lt
 800d12c:	425b      	neglt	r3, r3
 800d12e:	f042 0202 	orrlt.w	r2, r2, #2
 800d132:	9307      	strge	r3, [sp, #28]
 800d134:	9307      	strlt	r3, [sp, #28]
 800d136:	bfb8      	it	lt
 800d138:	9204      	strlt	r2, [sp, #16]
 800d13a:	7823      	ldrb	r3, [r4, #0]
 800d13c:	2b2e      	cmp	r3, #46	; 0x2e
 800d13e:	d10c      	bne.n	800d15a <_vfiprintf_r+0x176>
 800d140:	7863      	ldrb	r3, [r4, #1]
 800d142:	2b2a      	cmp	r3, #42	; 0x2a
 800d144:	d135      	bne.n	800d1b2 <_vfiprintf_r+0x1ce>
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	3402      	adds	r4, #2
 800d14a:	1d1a      	adds	r2, r3, #4
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	9203      	str	r2, [sp, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	bfb8      	it	lt
 800d154:	f04f 33ff 	movlt.w	r3, #4294967295
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d234 <_vfiprintf_r+0x250>
 800d15e:	2203      	movs	r2, #3
 800d160:	4650      	mov	r0, sl
 800d162:	7821      	ldrb	r1, [r4, #0]
 800d164:	f7ff f88c 	bl	800c280 <memchr>
 800d168:	b140      	cbz	r0, 800d17c <_vfiprintf_r+0x198>
 800d16a:	2340      	movs	r3, #64	; 0x40
 800d16c:	eba0 000a 	sub.w	r0, r0, sl
 800d170:	fa03 f000 	lsl.w	r0, r3, r0
 800d174:	9b04      	ldr	r3, [sp, #16]
 800d176:	3401      	adds	r4, #1
 800d178:	4303      	orrs	r3, r0
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d180:	2206      	movs	r2, #6
 800d182:	482d      	ldr	r0, [pc, #180]	; (800d238 <_vfiprintf_r+0x254>)
 800d184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d188:	f7ff f87a 	bl	800c280 <memchr>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d03f      	beq.n	800d210 <_vfiprintf_r+0x22c>
 800d190:	4b2a      	ldr	r3, [pc, #168]	; (800d23c <_vfiprintf_r+0x258>)
 800d192:	bb1b      	cbnz	r3, 800d1dc <_vfiprintf_r+0x1f8>
 800d194:	9b03      	ldr	r3, [sp, #12]
 800d196:	3307      	adds	r3, #7
 800d198:	f023 0307 	bic.w	r3, r3, #7
 800d19c:	3308      	adds	r3, #8
 800d19e:	9303      	str	r3, [sp, #12]
 800d1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a2:	443b      	add	r3, r7
 800d1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a6:	e767      	b.n	800d078 <_vfiprintf_r+0x94>
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	2001      	movs	r0, #1
 800d1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1b0:	e7a5      	b.n	800d0fe <_vfiprintf_r+0x11a>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f04f 0c0a 	mov.w	ip, #10
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	3401      	adds	r4, #1
 800d1bc:	9305      	str	r3, [sp, #20]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1c4:	3a30      	subs	r2, #48	; 0x30
 800d1c6:	2a09      	cmp	r2, #9
 800d1c8:	d903      	bls.n	800d1d2 <_vfiprintf_r+0x1ee>
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d0c5      	beq.n	800d15a <_vfiprintf_r+0x176>
 800d1ce:	9105      	str	r1, [sp, #20]
 800d1d0:	e7c3      	b.n	800d15a <_vfiprintf_r+0x176>
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1da:	e7f0      	b.n	800d1be <_vfiprintf_r+0x1da>
 800d1dc:	ab03      	add	r3, sp, #12
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	462a      	mov	r2, r5
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	4b16      	ldr	r3, [pc, #88]	; (800d240 <_vfiprintf_r+0x25c>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	f7fb fe48 	bl	8008e7c <_printf_float>
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	1c78      	adds	r0, r7, #1
 800d1f0:	d1d6      	bne.n	800d1a0 <_vfiprintf_r+0x1bc>
 800d1f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1f4:	07d9      	lsls	r1, r3, #31
 800d1f6:	d405      	bmi.n	800d204 <_vfiprintf_r+0x220>
 800d1f8:	89ab      	ldrh	r3, [r5, #12]
 800d1fa:	059a      	lsls	r2, r3, #22
 800d1fc:	d402      	bmi.n	800d204 <_vfiprintf_r+0x220>
 800d1fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d200:	f7fb fcf2 	bl	8008be8 <__retarget_lock_release_recursive>
 800d204:	89ab      	ldrh	r3, [r5, #12]
 800d206:	065b      	lsls	r3, r3, #25
 800d208:	f53f af12 	bmi.w	800d030 <_vfiprintf_r+0x4c>
 800d20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d20e:	e711      	b.n	800d034 <_vfiprintf_r+0x50>
 800d210:	ab03      	add	r3, sp, #12
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	462a      	mov	r2, r5
 800d216:	4630      	mov	r0, r6
 800d218:	4b09      	ldr	r3, [pc, #36]	; (800d240 <_vfiprintf_r+0x25c>)
 800d21a:	a904      	add	r1, sp, #16
 800d21c:	f7fc f8ca 	bl	80093b4 <_printf_i>
 800d220:	e7e4      	b.n	800d1ec <_vfiprintf_r+0x208>
 800d222:	bf00      	nop
 800d224:	0800d83c 	.word	0x0800d83c
 800d228:	0800d85c 	.word	0x0800d85c
 800d22c:	0800d81c 	.word	0x0800d81c
 800d230:	0800dc74 	.word	0x0800dc74
 800d234:	0800dc7a 	.word	0x0800dc7a
 800d238:	0800dc7e 	.word	0x0800dc7e
 800d23c:	08008e7d 	.word	0x08008e7d
 800d240:	0800cfbf 	.word	0x0800cfbf

0800d244 <_read_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4604      	mov	r4, r0
 800d248:	4608      	mov	r0, r1
 800d24a:	4611      	mov	r1, r2
 800d24c:	2200      	movs	r2, #0
 800d24e:	4d05      	ldr	r5, [pc, #20]	; (800d264 <_read_r+0x20>)
 800d250:	602a      	str	r2, [r5, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	f7f5 fc07 	bl	8002a66 <_read>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d102      	bne.n	800d262 <_read_r+0x1e>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	b103      	cbz	r3, 800d262 <_read_r+0x1e>
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	20002590 	.word	0x20002590

0800d268 <nan>:
 800d268:	2000      	movs	r0, #0
 800d26a:	4901      	ldr	r1, [pc, #4]	; (800d270 <nan+0x8>)
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	7ff80000 	.word	0x7ff80000

0800d274 <strncmp>:
 800d274:	4603      	mov	r3, r0
 800d276:	b510      	push	{r4, lr}
 800d278:	b172      	cbz	r2, 800d298 <strncmp+0x24>
 800d27a:	3901      	subs	r1, #1
 800d27c:	1884      	adds	r4, r0, r2
 800d27e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d282:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d286:	4290      	cmp	r0, r2
 800d288:	d101      	bne.n	800d28e <strncmp+0x1a>
 800d28a:	42a3      	cmp	r3, r4
 800d28c:	d101      	bne.n	800d292 <strncmp+0x1e>
 800d28e:	1a80      	subs	r0, r0, r2
 800d290:	bd10      	pop	{r4, pc}
 800d292:	2800      	cmp	r0, #0
 800d294:	d1f3      	bne.n	800d27e <strncmp+0xa>
 800d296:	e7fa      	b.n	800d28e <strncmp+0x1a>
 800d298:	4610      	mov	r0, r2
 800d29a:	e7f9      	b.n	800d290 <strncmp+0x1c>

0800d29c <__ascii_wctomb>:
 800d29c:	4603      	mov	r3, r0
 800d29e:	4608      	mov	r0, r1
 800d2a0:	b141      	cbz	r1, 800d2b4 <__ascii_wctomb+0x18>
 800d2a2:	2aff      	cmp	r2, #255	; 0xff
 800d2a4:	d904      	bls.n	800d2b0 <__ascii_wctomb+0x14>
 800d2a6:	228a      	movs	r2, #138	; 0x8a
 800d2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	4770      	bx	lr
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	700a      	strb	r2, [r1, #0]
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <__assert_func>:
 800d2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ba:	4614      	mov	r4, r2
 800d2bc:	461a      	mov	r2, r3
 800d2be:	4b09      	ldr	r3, [pc, #36]	; (800d2e4 <__assert_func+0x2c>)
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68d8      	ldr	r0, [r3, #12]
 800d2c6:	b14c      	cbz	r4, 800d2dc <__assert_func+0x24>
 800d2c8:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <__assert_func+0x30>)
 800d2ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2ce:	9100      	str	r1, [sp, #0]
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	4906      	ldr	r1, [pc, #24]	; (800d2ec <__assert_func+0x34>)
 800d2d4:	f000 f80e 	bl	800d2f4 <fiprintf>
 800d2d8:	f000 f889 	bl	800d3ee <abort>
 800d2dc:	4b04      	ldr	r3, [pc, #16]	; (800d2f0 <__assert_func+0x38>)
 800d2de:	461c      	mov	r4, r3
 800d2e0:	e7f3      	b.n	800d2ca <__assert_func+0x12>
 800d2e2:	bf00      	nop
 800d2e4:	20000060 	.word	0x20000060
 800d2e8:	0800dc85 	.word	0x0800dc85
 800d2ec:	0800dc92 	.word	0x0800dc92
 800d2f0:	0800dcc0 	.word	0x0800dcc0

0800d2f4 <fiprintf>:
 800d2f4:	b40e      	push	{r1, r2, r3}
 800d2f6:	b503      	push	{r0, r1, lr}
 800d2f8:	4601      	mov	r1, r0
 800d2fa:	ab03      	add	r3, sp, #12
 800d2fc:	4805      	ldr	r0, [pc, #20]	; (800d314 <fiprintf+0x20>)
 800d2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d302:	6800      	ldr	r0, [r0, #0]
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	f7ff fe6d 	bl	800cfe4 <_vfiprintf_r>
 800d30a:	b002      	add	sp, #8
 800d30c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d310:	b003      	add	sp, #12
 800d312:	4770      	bx	lr
 800d314:	20000060 	.word	0x20000060

0800d318 <_fstat_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	2300      	movs	r3, #0
 800d31c:	4d06      	ldr	r5, [pc, #24]	; (800d338 <_fstat_r+0x20>)
 800d31e:	4604      	mov	r4, r0
 800d320:	4608      	mov	r0, r1
 800d322:	4611      	mov	r1, r2
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	f7f5 fbe2 	bl	8002aee <_fstat>
 800d32a:	1c43      	adds	r3, r0, #1
 800d32c:	d102      	bne.n	800d334 <_fstat_r+0x1c>
 800d32e:	682b      	ldr	r3, [r5, #0]
 800d330:	b103      	cbz	r3, 800d334 <_fstat_r+0x1c>
 800d332:	6023      	str	r3, [r4, #0]
 800d334:	bd38      	pop	{r3, r4, r5, pc}
 800d336:	bf00      	nop
 800d338:	20002590 	.word	0x20002590

0800d33c <_isatty_r>:
 800d33c:	b538      	push	{r3, r4, r5, lr}
 800d33e:	2300      	movs	r3, #0
 800d340:	4d05      	ldr	r5, [pc, #20]	; (800d358 <_isatty_r+0x1c>)
 800d342:	4604      	mov	r4, r0
 800d344:	4608      	mov	r0, r1
 800d346:	602b      	str	r3, [r5, #0]
 800d348:	f7f5 fbe0 	bl	8002b0c <_isatty>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d102      	bne.n	800d356 <_isatty_r+0x1a>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	b103      	cbz	r3, 800d356 <_isatty_r+0x1a>
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	20002590 	.word	0x20002590

0800d35c <memmove>:
 800d35c:	4288      	cmp	r0, r1
 800d35e:	b510      	push	{r4, lr}
 800d360:	eb01 0402 	add.w	r4, r1, r2
 800d364:	d902      	bls.n	800d36c <memmove+0x10>
 800d366:	4284      	cmp	r4, r0
 800d368:	4623      	mov	r3, r4
 800d36a:	d807      	bhi.n	800d37c <memmove+0x20>
 800d36c:	1e43      	subs	r3, r0, #1
 800d36e:	42a1      	cmp	r1, r4
 800d370:	d008      	beq.n	800d384 <memmove+0x28>
 800d372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d37a:	e7f8      	b.n	800d36e <memmove+0x12>
 800d37c:	4601      	mov	r1, r0
 800d37e:	4402      	add	r2, r0
 800d380:	428a      	cmp	r2, r1
 800d382:	d100      	bne.n	800d386 <memmove+0x2a>
 800d384:	bd10      	pop	{r4, pc}
 800d386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d38a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d38e:	e7f7      	b.n	800d380 <memmove+0x24>

0800d390 <_realloc_r>:
 800d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d394:	4680      	mov	r8, r0
 800d396:	4614      	mov	r4, r2
 800d398:	460e      	mov	r6, r1
 800d39a:	b921      	cbnz	r1, 800d3a6 <_realloc_r+0x16>
 800d39c:	4611      	mov	r1, r2
 800d39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a2:	f7fb bc59 	b.w	8008c58 <_malloc_r>
 800d3a6:	b92a      	cbnz	r2, 800d3b4 <_realloc_r+0x24>
 800d3a8:	f7ff fc50 	bl	800cc4c <_free_r>
 800d3ac:	4625      	mov	r5, r4
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b4:	f000 f822 	bl	800d3fc <_malloc_usable_size_r>
 800d3b8:	4284      	cmp	r4, r0
 800d3ba:	4607      	mov	r7, r0
 800d3bc:	d802      	bhi.n	800d3c4 <_realloc_r+0x34>
 800d3be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3c2:	d812      	bhi.n	800d3ea <_realloc_r+0x5a>
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	f7fb fc46 	bl	8008c58 <_malloc_r>
 800d3cc:	4605      	mov	r5, r0
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d0ed      	beq.n	800d3ae <_realloc_r+0x1e>
 800d3d2:	42bc      	cmp	r4, r7
 800d3d4:	4622      	mov	r2, r4
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	bf28      	it	cs
 800d3da:	463a      	movcs	r2, r7
 800d3dc:	f7fb fc05 	bl	8008bea <memcpy>
 800d3e0:	4631      	mov	r1, r6
 800d3e2:	4640      	mov	r0, r8
 800d3e4:	f7ff fc32 	bl	800cc4c <_free_r>
 800d3e8:	e7e1      	b.n	800d3ae <_realloc_r+0x1e>
 800d3ea:	4635      	mov	r5, r6
 800d3ec:	e7df      	b.n	800d3ae <_realloc_r+0x1e>

0800d3ee <abort>:
 800d3ee:	2006      	movs	r0, #6
 800d3f0:	b508      	push	{r3, lr}
 800d3f2:	f000 f833 	bl	800d45c <raise>
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	f7f5 fb2b 	bl	8002a52 <_exit>

0800d3fc <_malloc_usable_size_r>:
 800d3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d400:	1f18      	subs	r0, r3, #4
 800d402:	2b00      	cmp	r3, #0
 800d404:	bfbc      	itt	lt
 800d406:	580b      	ldrlt	r3, [r1, r0]
 800d408:	18c0      	addlt	r0, r0, r3
 800d40a:	4770      	bx	lr

0800d40c <_raise_r>:
 800d40c:	291f      	cmp	r1, #31
 800d40e:	b538      	push	{r3, r4, r5, lr}
 800d410:	4604      	mov	r4, r0
 800d412:	460d      	mov	r5, r1
 800d414:	d904      	bls.n	800d420 <_raise_r+0x14>
 800d416:	2316      	movs	r3, #22
 800d418:	6003      	str	r3, [r0, #0]
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d422:	b112      	cbz	r2, 800d42a <_raise_r+0x1e>
 800d424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d428:	b94b      	cbnz	r3, 800d43e <_raise_r+0x32>
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 f830 	bl	800d490 <_getpid_r>
 800d430:	462a      	mov	r2, r5
 800d432:	4601      	mov	r1, r0
 800d434:	4620      	mov	r0, r4
 800d436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d43a:	f000 b817 	b.w	800d46c <_kill_r>
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d00a      	beq.n	800d458 <_raise_r+0x4c>
 800d442:	1c59      	adds	r1, r3, #1
 800d444:	d103      	bne.n	800d44e <_raise_r+0x42>
 800d446:	2316      	movs	r3, #22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	2001      	movs	r0, #1
 800d44c:	e7e7      	b.n	800d41e <_raise_r+0x12>
 800d44e:	2400      	movs	r4, #0
 800d450:	4628      	mov	r0, r5
 800d452:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d456:	4798      	blx	r3
 800d458:	2000      	movs	r0, #0
 800d45a:	e7e0      	b.n	800d41e <_raise_r+0x12>

0800d45c <raise>:
 800d45c:	4b02      	ldr	r3, [pc, #8]	; (800d468 <raise+0xc>)
 800d45e:	4601      	mov	r1, r0
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	f7ff bfd3 	b.w	800d40c <_raise_r>
 800d466:	bf00      	nop
 800d468:	20000060 	.word	0x20000060

0800d46c <_kill_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	2300      	movs	r3, #0
 800d470:	4d06      	ldr	r5, [pc, #24]	; (800d48c <_kill_r+0x20>)
 800d472:	4604      	mov	r4, r0
 800d474:	4608      	mov	r0, r1
 800d476:	4611      	mov	r1, r2
 800d478:	602b      	str	r3, [r5, #0]
 800d47a:	f7f5 fada 	bl	8002a32 <_kill>
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d102      	bne.n	800d488 <_kill_r+0x1c>
 800d482:	682b      	ldr	r3, [r5, #0]
 800d484:	b103      	cbz	r3, 800d488 <_kill_r+0x1c>
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	bd38      	pop	{r3, r4, r5, pc}
 800d48a:	bf00      	nop
 800d48c:	20002590 	.word	0x20002590

0800d490 <_getpid_r>:
 800d490:	f7f5 bac8 	b.w	8002a24 <_getpid>

0800d494 <_init>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	bf00      	nop
 800d498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d49a:	bc08      	pop	{r3}
 800d49c:	469e      	mov	lr, r3
 800d49e:	4770      	bx	lr

0800d4a0 <_fini>:
 800d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a2:	bf00      	nop
 800d4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4a6:	bc08      	pop	{r3}
 800d4a8:	469e      	mov	lr, r3
 800d4aa:	4770      	bx	lr
